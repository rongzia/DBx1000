syntax = "proto3";

package dbx1000;
// when use brpc, this should be true;when use grpc, this should be false
option cc_generic_services = true;

enum RpcLockMode {
  O = 0;
  P = 1;
  S = 2;
  X = 3;
}

enum RpcRC {
  RCOK = 0;
  Commit = 1;
  Abort = 2;
  WAIT = 3;
  ERROR = 4;
  FINISH = 5;
  TIME_OUT = 6;
}

enum RpcTABLES {
    MAIN_TABLE = 0;
    WAREHOUSE = 1;
    DISTRICT = 2;
    CUSTOMER = 3;
    HISTORY = 4;
    NEW_ORDER = 5;
    ORDER = 6;
    ORDER_LINE = 7;
    ITEM = 8;
    STOCK = 9;
}

message LockRemoteRequest{
  int32 instance_id = 1;
  RpcTABLES table = 2;
  uint64 item_id = 3;
  RpcLockMode req_mode = 4;
  bytes buf = 5;
  uint64 count = 6;
}
message LockRemoteReply{
  RpcRC rc = 1;
  bytes buf = 2;
  uint64 count = 3;
}

message UnlockRequest{
  int32 instance_id = 1;
  RpcTABLES table = 2;
  uint64 item_id = 3;
  RpcLockMode req_mode = 4;
  bytes buf = 5;
  uint64 count = 6;
}
message UnlockReply{
  RpcRC rc = 1;
}

message InstanceInitDoneRequest{
  int32 instance_id = 1;
}
message InstanceInitDoneReply{}

message GlobalLockInitDoneRequest{}
message GlobalLockInitDoneReply{
  bool init_done = 1;
}

message InvalidRequest{
  RpcTABLES table = 1;
  uint64 item_id = 2;
  bytes buf = 3;
  uint64 count = 4;
}

message InvalidReply{
  RpcRC rc = 1;
  bytes buf = 2;
  uint64 count = 3;
  uint64 invld_time = 4;
}
message GetNextTsRequest{}
message GetNextTsReply{
  uint64 ts = 1;
}

message  TestRequest{}
message TestReply{}

message ReportResultRequest{
  uint64 throughtput = 1;
  uint64 total_latency = 2;
  uint64 total_txn_cnt = 3;
  uint64 total_count_LockRemote = 4;
  uint64 total_time_LockRemote = 5;
  uint64 instance_run_time = 6;
  int32 instance_id = 7;
  // in branch DB2
  uint64 total_time_Unlock = 8;
  uint64 total_count_Unlock = 9;
}
message ReportResultReply {}


message WarmupDoneRequest{
  int32 instance_id = 1;
}
message WarmupDoneReply {}

message WaitWarmupDoneRequest{
}
message WaitWarmupDoneReply {
  bool warmup_done = 1;
}


service GlobalLockService {
  // for instance
  rpc LockRemote(LockRemoteRequest) returns (LockRemoteReply) {}
  rpc Unlock(UnlockRequest) returns (UnlockReply) {}
  rpc AsyncLockRemote(LockRemoteRequest) returns (LockRemoteReply) {}
  rpc InstanceInitDone(InstanceInitDoneRequest) returns (InstanceInitDoneReply) {}
  rpc AsyncInstanceInitDone(InstanceInitDoneRequest) returns (InstanceInitDoneReply) {}
  rpc GlobalLockInitDone(GlobalLockInitDoneRequest) returns (GlobalLockInitDoneReply) {}
  rpc AsyncGlobalLockInitDone(GlobalLockInitDoneRequest) returns (GlobalLockInitDoneReply) {}
  rpc GetNextTs(GetNextTsRequest) returns (GetNextTsReply) {}
  rpc ReportResult(ReportResultRequest) returns (ReportResultReply) {}

  // for lock_server
  rpc Invalid(InvalidRequest) returns (InvalidReply) {}
  rpc AsyncInvalid(InvalidRequest) returns (InvalidReply) {}
  rpc Test(TestRequest) returns (TestReply) {}
  rpc WarmupDone(WarmupDoneRequest) returns (WarmupDoneReply) {}
  rpc WaitWarmupDone(WaitWarmupDoneRequest) returns (WaitWarmupDoneReply) {}
}