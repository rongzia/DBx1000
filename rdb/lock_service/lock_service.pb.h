// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lock_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lock_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lock_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 4000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 4000000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lock_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lock_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lock_5fservice_2eproto;
namespace rdb {
class GetLockItem;
class GetLockItemDefaultTypeInternal;
extern GetLockItemDefaultTypeInternal _GetLockItem_default_instance_;
class GetLockReply;
class GetLockReplyDefaultTypeInternal;
extern GetLockReplyDefaultTypeInternal _GetLockReply_default_instance_;
class GetLockRequest;
class GetLockRequestDefaultTypeInternal;
extern GetLockRequestDefaultTypeInternal _GetLockRequest_default_instance_;
class GetLocksReply;
class GetLocksReplyDefaultTypeInternal;
extern GetLocksReplyDefaultTypeInternal _GetLocksReply_default_instance_;
class GetLocksRequest;
class GetLocksRequestDefaultTypeInternal;
extern GetLocksRequestDefaultTypeInternal _GetLocksRequest_default_instance_;
class ReturnLockItem;
class ReturnLockItemDefaultTypeInternal;
extern ReturnLockItemDefaultTypeInternal _ReturnLockItem_default_instance_;
}  // namespace rdb
PROTOBUF_NAMESPACE_OPEN
template<> ::rdb::GetLockItem* Arena::CreateMaybeMessage<::rdb::GetLockItem>(Arena*);
template<> ::rdb::GetLockReply* Arena::CreateMaybeMessage<::rdb::GetLockReply>(Arena*);
template<> ::rdb::GetLockRequest* Arena::CreateMaybeMessage<::rdb::GetLockRequest>(Arena*);
template<> ::rdb::GetLocksReply* Arena::CreateMaybeMessage<::rdb::GetLocksReply>(Arena*);
template<> ::rdb::GetLocksRequest* Arena::CreateMaybeMessage<::rdb::GetLocksRequest>(Arena*);
template<> ::rdb::ReturnLockItem* Arena::CreateMaybeMessage<::rdb::ReturnLockItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rdb {

enum RpcLockMode : int {
  O = 0,
  P = 1,
  S = 2,
  X = 3,
  RpcLockMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RpcLockMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RpcLockMode_IsValid(int value);
constexpr RpcLockMode RpcLockMode_MIN = O;
constexpr RpcLockMode RpcLockMode_MAX = X;
constexpr int RpcLockMode_ARRAYSIZE = RpcLockMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcLockMode_descriptor();
template<typename T>
inline const std::string& RpcLockMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcLockMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcLockMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcLockMode_descriptor(), enum_t_value);
}
inline bool RpcLockMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RpcLockMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcLockMode>(
    RpcLockMode_descriptor(), name, value);
}
enum RpcRC : int {
  RCOK = 0,
  Commit = 1,
  Abort = 2,
  WAIT = 3,
  ERROR = 4,
  FINISH = 5,
  TIME_OUT = 6,
  RpcRC_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RpcRC_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RpcRC_IsValid(int value);
constexpr RpcRC RpcRC_MIN = RCOK;
constexpr RpcRC RpcRC_MAX = TIME_OUT;
constexpr int RpcRC_ARRAYSIZE = RpcRC_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcRC_descriptor();
template<typename T>
inline const std::string& RpcRC_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcRC>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcRC_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcRC_descriptor(), enum_t_value);
}
inline bool RpcRC_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RpcRC* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcRC>(
    RpcRC_descriptor(), name, value);
}
enum RpcTABLES : int {
  MAIN_TABLE = 0,
  WAREHOUSE = 1,
  DISTRICT = 2,
  CUSTOMER = 3,
  HISTORY = 4,
  NEW_ORDER = 5,
  ORDER = 6,
  ORDER_LINE = 7,
  ITEM = 8,
  STOCK = 9,
  RpcTABLES_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RpcTABLES_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RpcTABLES_IsValid(int value);
constexpr RpcTABLES RpcTABLES_MIN = MAIN_TABLE;
constexpr RpcTABLES RpcTABLES_MAX = STOCK;
constexpr int RpcTABLES_ARRAYSIZE = RpcTABLES_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcTABLES_descriptor();
template<typename T>
inline const std::string& RpcTABLES_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcTABLES>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcTABLES_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcTABLES_descriptor(), enum_t_value);
}
inline bool RpcTABLES_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RpcTABLES* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcTABLES>(
    RpcTABLES_descriptor(), name, value);
}
// ===================================================================

class GetLockItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rdb.GetLockItem) */ {
 public:
  inline GetLockItem() : GetLockItem(nullptr) {}
  virtual ~GetLockItem();

  GetLockItem(const GetLockItem& from);
  GetLockItem(GetLockItem&& from) noexcept
    : GetLockItem() {
    *this = ::std::move(from);
  }

  inline GetLockItem& operator=(const GetLockItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLockItem& operator=(GetLockItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLockItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLockItem* internal_default_instance() {
    return reinterpret_cast<const GetLockItem*>(
               &_GetLockItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetLockItem& a, GetLockItem& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLockItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLockItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLockItem* New() const final {
    return CreateMaybeMessage<GetLockItem>(nullptr);
  }

  GetLockItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLockItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLockItem& from);
  void MergeFrom(const GetLockItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLockItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rdb.GetLockItem";
  }
  protected:
  explicit GetLockItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufFieldNumber = 4,
    kItemIdFieldNumber = 2,
    kTableFieldNumber = 1,
    kReqModeFieldNumber = 3,
    kCountFieldNumber = 5,
  };
  // bytes buf = 4;
  void clear_buf();
  const std::string& buf() const;
  void set_buf(const std::string& value);
  void set_buf(std::string&& value);
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  std::string* mutable_buf();
  std::string* release_buf();
  void set_allocated_buf(std::string* buf);
  private:
  const std::string& _internal_buf() const;
  void _internal_set_buf(const std::string& value);
  std::string* _internal_mutable_buf();
  public:

  // uint64 item_id = 2;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .rdb.RpcTABLES table = 1;
  void clear_table();
  ::rdb::RpcTABLES table() const;
  void set_table(::rdb::RpcTABLES value);
  private:
  ::rdb::RpcTABLES _internal_table() const;
  void _internal_set_table(::rdb::RpcTABLES value);
  public:

  // .rdb.RpcLockMode req_mode = 3;
  void clear_req_mode();
  ::rdb::RpcLockMode req_mode() const;
  void set_req_mode(::rdb::RpcLockMode value);
  private:
  ::rdb::RpcLockMode _internal_req_mode() const;
  void _internal_set_req_mode(::rdb::RpcLockMode value);
  public:

  // uint64 count = 5;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:rdb.GetLockItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id_;
  int table_;
  int req_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReturnLockItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rdb.ReturnLockItem) */ {
 public:
  inline ReturnLockItem() : ReturnLockItem(nullptr) {}
  virtual ~ReturnLockItem();

  ReturnLockItem(const ReturnLockItem& from);
  ReturnLockItem(ReturnLockItem&& from) noexcept
    : ReturnLockItem() {
    *this = ::std::move(from);
  }

  inline ReturnLockItem& operator=(const ReturnLockItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReturnLockItem& operator=(ReturnLockItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReturnLockItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReturnLockItem* internal_default_instance() {
    return reinterpret_cast<const ReturnLockItem*>(
               &_ReturnLockItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReturnLockItem& a, ReturnLockItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ReturnLockItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReturnLockItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReturnLockItem* New() const final {
    return CreateMaybeMessage<ReturnLockItem>(nullptr);
  }

  ReturnLockItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReturnLockItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReturnLockItem& from);
  void MergeFrom(const ReturnLockItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnLockItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rdb.ReturnLockItem";
  }
  protected:
  explicit ReturnLockItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufFieldNumber = 4,
    kRcFieldNumber = 1,
    kTableFieldNumber = 2,
    kItemIdFieldNumber = 3,
    kCountFieldNumber = 5,
  };
  // bytes buf = 4;
  void clear_buf();
  const std::string& buf() const;
  void set_buf(const std::string& value);
  void set_buf(std::string&& value);
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  std::string* mutable_buf();
  std::string* release_buf();
  void set_allocated_buf(std::string* buf);
  private:
  const std::string& _internal_buf() const;
  void _internal_set_buf(const std::string& value);
  std::string* _internal_mutable_buf();
  public:

  // .rdb.RpcRC rc = 1;
  void clear_rc();
  ::rdb::RpcRC rc() const;
  void set_rc(::rdb::RpcRC value);
  private:
  ::rdb::RpcRC _internal_rc() const;
  void _internal_set_rc(::rdb::RpcRC value);
  public:

  // .rdb.RpcTABLES table = 2;
  void clear_table();
  ::rdb::RpcTABLES table() const;
  void set_table(::rdb::RpcTABLES value);
  private:
  ::rdb::RpcTABLES _internal_table() const;
  void _internal_set_table(::rdb::RpcTABLES value);
  public:

  // uint64 item_id = 3;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 count = 5;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:rdb.ReturnLockItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buf_;
  int rc_;
  int table_;
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rdb.GetLockRequest) */ {
 public:
  inline GetLockRequest() : GetLockRequest(nullptr) {}
  virtual ~GetLockRequest();

  GetLockRequest(const GetLockRequest& from);
  GetLockRequest(GetLockRequest&& from) noexcept
    : GetLockRequest() {
    *this = ::std::move(from);
  }

  inline GetLockRequest& operator=(const GetLockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLockRequest& operator=(GetLockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLockRequest* internal_default_instance() {
    return reinterpret_cast<const GetLockRequest*>(
               &_GetLockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetLockRequest& a, GetLockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLockRequest* New() const final {
    return CreateMaybeMessage<GetLockRequest>(nullptr);
  }

  GetLockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLockRequest& from);
  void MergeFrom(const GetLockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rdb.GetLockRequest";
  }
  protected:
  explicit GetLockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqItemFieldNumber = 2,
    kInstanceIdFieldNumber = 1,
  };
  // .rdb.GetLockItem req_item = 2;
  bool has_req_item() const;
  private:
  bool _internal_has_req_item() const;
  public:
  void clear_req_item();
  const ::rdb::GetLockItem& req_item() const;
  ::rdb::GetLockItem* release_req_item();
  ::rdb::GetLockItem* mutable_req_item();
  void set_allocated_req_item(::rdb::GetLockItem* req_item);
  private:
  const ::rdb::GetLockItem& _internal_req_item() const;
  ::rdb::GetLockItem* _internal_mutable_req_item();
  public:
  void unsafe_arena_set_allocated_req_item(
      ::rdb::GetLockItem* req_item);
  ::rdb::GetLockItem* unsafe_arena_release_req_item();

  // int32 instance_id = 1;
  void clear_instance_id();
  ::PROTOBUF_NAMESPACE_ID::int32 instance_id() const;
  void set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_instance_id() const;
  void _internal_set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rdb.GetLockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::rdb::GetLockItem* req_item_;
  ::PROTOBUF_NAMESPACE_ID::int32 instance_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLockReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rdb.GetLockReply) */ {
 public:
  inline GetLockReply() : GetLockReply(nullptr) {}
  virtual ~GetLockReply();

  GetLockReply(const GetLockReply& from);
  GetLockReply(GetLockReply&& from) noexcept
    : GetLockReply() {
    *this = ::std::move(from);
  }

  inline GetLockReply& operator=(const GetLockReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLockReply& operator=(GetLockReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLockReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLockReply* internal_default_instance() {
    return reinterpret_cast<const GetLockReply*>(
               &_GetLockReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetLockReply& a, GetLockReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLockReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLockReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLockReply* New() const final {
    return CreateMaybeMessage<GetLockReply>(nullptr);
  }

  GetLockReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLockReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLockReply& from);
  void MergeFrom(const GetLockReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLockReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rdb.GetLockReply";
  }
  protected:
  explicit GetLockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetItemFieldNumber = 1,
  };
  // .rdb.ReturnLockItem ret_item = 1;
  bool has_ret_item() const;
  private:
  bool _internal_has_ret_item() const;
  public:
  void clear_ret_item();
  const ::rdb::ReturnLockItem& ret_item() const;
  ::rdb::ReturnLockItem* release_ret_item();
  ::rdb::ReturnLockItem* mutable_ret_item();
  void set_allocated_ret_item(::rdb::ReturnLockItem* ret_item);
  private:
  const ::rdb::ReturnLockItem& _internal_ret_item() const;
  ::rdb::ReturnLockItem* _internal_mutable_ret_item();
  public:
  void unsafe_arena_set_allocated_ret_item(
      ::rdb::ReturnLockItem* ret_item);
  ::rdb::ReturnLockItem* unsafe_arena_release_ret_item();

  // @@protoc_insertion_point(class_scope:rdb.GetLockReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::rdb::ReturnLockItem* ret_item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocksRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rdb.GetLocksRequest) */ {
 public:
  inline GetLocksRequest() : GetLocksRequest(nullptr) {}
  virtual ~GetLocksRequest();

  GetLocksRequest(const GetLocksRequest& from);
  GetLocksRequest(GetLocksRequest&& from) noexcept
    : GetLocksRequest() {
    *this = ::std::move(from);
  }

  inline GetLocksRequest& operator=(const GetLocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocksRequest& operator=(GetLocksRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLocksRequest* internal_default_instance() {
    return reinterpret_cast<const GetLocksRequest*>(
               &_GetLocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetLocksRequest& a, GetLocksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocksRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocksRequest* New() const final {
    return CreateMaybeMessage<GetLocksRequest>(nullptr);
  }

  GetLocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocksRequest& from);
  void MergeFrom(const GetLocksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rdb.GetLocksRequest";
  }
  protected:
  explicit GetLocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqItemsFieldNumber = 2,
    kInstanceIdFieldNumber = 1,
  };
  // repeated .rdb.GetLockItem req_items = 2;
  int req_items_size() const;
  private:
  int _internal_req_items_size() const;
  public:
  void clear_req_items();
  ::rdb::GetLockItem* mutable_req_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rdb::GetLockItem >*
      mutable_req_items();
  private:
  const ::rdb::GetLockItem& _internal_req_items(int index) const;
  ::rdb::GetLockItem* _internal_add_req_items();
  public:
  const ::rdb::GetLockItem& req_items(int index) const;
  ::rdb::GetLockItem* add_req_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rdb::GetLockItem >&
      req_items() const;

  // int32 instance_id = 1;
  void clear_instance_id();
  ::PROTOBUF_NAMESPACE_ID::int32 instance_id() const;
  void set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_instance_id() const;
  void _internal_set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rdb.GetLocksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rdb::GetLockItem > req_items_;
  ::PROTOBUF_NAMESPACE_ID::int32 instance_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocksReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rdb.GetLocksReply) */ {
 public:
  inline GetLocksReply() : GetLocksReply(nullptr) {}
  virtual ~GetLocksReply();

  GetLocksReply(const GetLocksReply& from);
  GetLocksReply(GetLocksReply&& from) noexcept
    : GetLocksReply() {
    *this = ::std::move(from);
  }

  inline GetLocksReply& operator=(const GetLocksReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocksReply& operator=(GetLocksReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocksReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLocksReply* internal_default_instance() {
    return reinterpret_cast<const GetLocksReply*>(
               &_GetLocksReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetLocksReply& a, GetLocksReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocksReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocksReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocksReply* New() const final {
    return CreateMaybeMessage<GetLocksReply>(nullptr);
  }

  GetLocksReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocksReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocksReply& from);
  void MergeFrom(const GetLocksReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocksReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rdb.GetLocksReply";
  }
  protected:
  explicit GetLocksReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lock_5fservice_2eproto);
    return ::descriptor_table_lock_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetItemsFieldNumber = 1,
  };
  // repeated .rdb.ReturnLockItem ret_items = 1;
  int ret_items_size() const;
  private:
  int _internal_ret_items_size() const;
  public:
  void clear_ret_items();
  ::rdb::ReturnLockItem* mutable_ret_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rdb::ReturnLockItem >*
      mutable_ret_items();
  private:
  const ::rdb::ReturnLockItem& _internal_ret_items(int index) const;
  ::rdb::ReturnLockItem* _internal_add_ret_items();
  public:
  const ::rdb::ReturnLockItem& ret_items(int index) const;
  ::rdb::ReturnLockItem* add_ret_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rdb::ReturnLockItem >&
      ret_items() const;

  // @@protoc_insertion_point(class_scope:rdb.GetLocksReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rdb::ReturnLockItem > ret_items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lock_5fservice_2eproto;
};
// ===================================================================

class LockService_Stub;

class LockService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline LockService() {};
 public:
  virtual ~LockService();

  typedef LockService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetLock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rdb::GetLockRequest* request,
                       ::rdb::GetLockReply* response,
                       ::google::protobuf::Closure* done);
  virtual void GetLocks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rdb::GetLocksRequest* request,
                       ::rdb::GetLocksReply* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LockService);
};

class LockService_Stub : public LockService {
 public:
  LockService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  LockService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~LockService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements LockService ------------------------------------------

  void GetLock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rdb::GetLockRequest* request,
                       ::rdb::GetLockReply* response,
                       ::google::protobuf::Closure* done);
  void GetLocks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::rdb::GetLocksRequest* request,
                       ::rdb::GetLocksReply* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LockService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetLockItem

// .rdb.RpcTABLES table = 1;
inline void GetLockItem::clear_table() {
  table_ = 0;
}
inline ::rdb::RpcTABLES GetLockItem::_internal_table() const {
  return static_cast< ::rdb::RpcTABLES >(table_);
}
inline ::rdb::RpcTABLES GetLockItem::table() const {
  // @@protoc_insertion_point(field_get:rdb.GetLockItem.table)
  return _internal_table();
}
inline void GetLockItem::_internal_set_table(::rdb::RpcTABLES value) {
  
  table_ = value;
}
inline void GetLockItem::set_table(::rdb::RpcTABLES value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:rdb.GetLockItem.table)
}

// uint64 item_id = 2;
inline void GetLockItem::clear_item_id() {
  item_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetLockItem::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetLockItem::item_id() const {
  // @@protoc_insertion_point(field_get:rdb.GetLockItem.item_id)
  return _internal_item_id();
}
inline void GetLockItem::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  item_id_ = value;
}
inline void GetLockItem::set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:rdb.GetLockItem.item_id)
}

// .rdb.RpcLockMode req_mode = 3;
inline void GetLockItem::clear_req_mode() {
  req_mode_ = 0;
}
inline ::rdb::RpcLockMode GetLockItem::_internal_req_mode() const {
  return static_cast< ::rdb::RpcLockMode >(req_mode_);
}
inline ::rdb::RpcLockMode GetLockItem::req_mode() const {
  // @@protoc_insertion_point(field_get:rdb.GetLockItem.req_mode)
  return _internal_req_mode();
}
inline void GetLockItem::_internal_set_req_mode(::rdb::RpcLockMode value) {
  
  req_mode_ = value;
}
inline void GetLockItem::set_req_mode(::rdb::RpcLockMode value) {
  _internal_set_req_mode(value);
  // @@protoc_insertion_point(field_set:rdb.GetLockItem.req_mode)
}

// bytes buf = 4;
inline void GetLockItem::clear_buf() {
  buf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetLockItem::buf() const {
  // @@protoc_insertion_point(field_get:rdb.GetLockItem.buf)
  return _internal_buf();
}
inline void GetLockItem::set_buf(const std::string& value) {
  _internal_set_buf(value);
  // @@protoc_insertion_point(field_set:rdb.GetLockItem.buf)
}
inline std::string* GetLockItem::mutable_buf() {
  // @@protoc_insertion_point(field_mutable:rdb.GetLockItem.buf)
  return _internal_mutable_buf();
}
inline const std::string& GetLockItem::_internal_buf() const {
  return buf_.Get();
}
inline void GetLockItem::_internal_set_buf(const std::string& value) {
  
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetLockItem::set_buf(std::string&& value) {
  
  buf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rdb.GetLockItem.buf)
}
inline void GetLockItem::set_buf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rdb.GetLockItem.buf)
}
inline void GetLockItem::set_buf(const void* value,
    size_t size) {
  
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rdb.GetLockItem.buf)
}
inline std::string* GetLockItem::_internal_mutable_buf() {
  
  return buf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetLockItem::release_buf() {
  // @@protoc_insertion_point(field_release:rdb.GetLockItem.buf)
  return buf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLockItem::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    
  } else {
    
  }
  buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rdb.GetLockItem.buf)
}

// uint64 count = 5;
inline void GetLockItem::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetLockItem::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetLockItem::count() const {
  // @@protoc_insertion_point(field_get:rdb.GetLockItem.count)
  return _internal_count();
}
inline void GetLockItem::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void GetLockItem::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:rdb.GetLockItem.count)
}

// -------------------------------------------------------------------

// ReturnLockItem

// .rdb.RpcRC rc = 1;
inline void ReturnLockItem::clear_rc() {
  rc_ = 0;
}
inline ::rdb::RpcRC ReturnLockItem::_internal_rc() const {
  return static_cast< ::rdb::RpcRC >(rc_);
}
inline ::rdb::RpcRC ReturnLockItem::rc() const {
  // @@protoc_insertion_point(field_get:rdb.ReturnLockItem.rc)
  return _internal_rc();
}
inline void ReturnLockItem::_internal_set_rc(::rdb::RpcRC value) {
  
  rc_ = value;
}
inline void ReturnLockItem::set_rc(::rdb::RpcRC value) {
  _internal_set_rc(value);
  // @@protoc_insertion_point(field_set:rdb.ReturnLockItem.rc)
}

// .rdb.RpcTABLES table = 2;
inline void ReturnLockItem::clear_table() {
  table_ = 0;
}
inline ::rdb::RpcTABLES ReturnLockItem::_internal_table() const {
  return static_cast< ::rdb::RpcTABLES >(table_);
}
inline ::rdb::RpcTABLES ReturnLockItem::table() const {
  // @@protoc_insertion_point(field_get:rdb.ReturnLockItem.table)
  return _internal_table();
}
inline void ReturnLockItem::_internal_set_table(::rdb::RpcTABLES value) {
  
  table_ = value;
}
inline void ReturnLockItem::set_table(::rdb::RpcTABLES value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:rdb.ReturnLockItem.table)
}

// uint64 item_id = 3;
inline void ReturnLockItem::clear_item_id() {
  item_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReturnLockItem::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReturnLockItem::item_id() const {
  // @@protoc_insertion_point(field_get:rdb.ReturnLockItem.item_id)
  return _internal_item_id();
}
inline void ReturnLockItem::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  item_id_ = value;
}
inline void ReturnLockItem::set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:rdb.ReturnLockItem.item_id)
}

// bytes buf = 4;
inline void ReturnLockItem::clear_buf() {
  buf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReturnLockItem::buf() const {
  // @@protoc_insertion_point(field_get:rdb.ReturnLockItem.buf)
  return _internal_buf();
}
inline void ReturnLockItem::set_buf(const std::string& value) {
  _internal_set_buf(value);
  // @@protoc_insertion_point(field_set:rdb.ReturnLockItem.buf)
}
inline std::string* ReturnLockItem::mutable_buf() {
  // @@protoc_insertion_point(field_mutable:rdb.ReturnLockItem.buf)
  return _internal_mutable_buf();
}
inline const std::string& ReturnLockItem::_internal_buf() const {
  return buf_.Get();
}
inline void ReturnLockItem::_internal_set_buf(const std::string& value) {
  
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReturnLockItem::set_buf(std::string&& value) {
  
  buf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rdb.ReturnLockItem.buf)
}
inline void ReturnLockItem::set_buf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rdb.ReturnLockItem.buf)
}
inline void ReturnLockItem::set_buf(const void* value,
    size_t size) {
  
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rdb.ReturnLockItem.buf)
}
inline std::string* ReturnLockItem::_internal_mutable_buf() {
  
  return buf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReturnLockItem::release_buf() {
  // @@protoc_insertion_point(field_release:rdb.ReturnLockItem.buf)
  return buf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReturnLockItem::set_allocated_buf(std::string* buf) {
  if (buf != nullptr) {
    
  } else {
    
  }
  buf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rdb.ReturnLockItem.buf)
}

// uint64 count = 5;
inline void ReturnLockItem::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReturnLockItem::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReturnLockItem::count() const {
  // @@protoc_insertion_point(field_get:rdb.ReturnLockItem.count)
  return _internal_count();
}
inline void ReturnLockItem::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void ReturnLockItem::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:rdb.ReturnLockItem.count)
}

// -------------------------------------------------------------------

// GetLockRequest

// int32 instance_id = 1;
inline void GetLockRequest::clear_instance_id() {
  instance_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLockRequest::_internal_instance_id() const {
  return instance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLockRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:rdb.GetLockRequest.instance_id)
  return _internal_instance_id();
}
inline void GetLockRequest::_internal_set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  instance_id_ = value;
}
inline void GetLockRequest::set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:rdb.GetLockRequest.instance_id)
}

// .rdb.GetLockItem req_item = 2;
inline bool GetLockRequest::_internal_has_req_item() const {
  return this != internal_default_instance() && req_item_ != nullptr;
}
inline bool GetLockRequest::has_req_item() const {
  return _internal_has_req_item();
}
inline void GetLockRequest::clear_req_item() {
  if (GetArena() == nullptr && req_item_ != nullptr) {
    delete req_item_;
  }
  req_item_ = nullptr;
}
inline const ::rdb::GetLockItem& GetLockRequest::_internal_req_item() const {
  const ::rdb::GetLockItem* p = req_item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rdb::GetLockItem*>(
      &::rdb::_GetLockItem_default_instance_);
}
inline const ::rdb::GetLockItem& GetLockRequest::req_item() const {
  // @@protoc_insertion_point(field_get:rdb.GetLockRequest.req_item)
  return _internal_req_item();
}
inline void GetLockRequest::unsafe_arena_set_allocated_req_item(
    ::rdb::GetLockItem* req_item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_item_);
  }
  req_item_ = req_item;
  if (req_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rdb.GetLockRequest.req_item)
}
inline ::rdb::GetLockItem* GetLockRequest::release_req_item() {
  
  ::rdb::GetLockItem* temp = req_item_;
  req_item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::rdb::GetLockItem* GetLockRequest::unsafe_arena_release_req_item() {
  // @@protoc_insertion_point(field_release:rdb.GetLockRequest.req_item)
  
  ::rdb::GetLockItem* temp = req_item_;
  req_item_ = nullptr;
  return temp;
}
inline ::rdb::GetLockItem* GetLockRequest::_internal_mutable_req_item() {
  
  if (req_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::rdb::GetLockItem>(GetArena());
    req_item_ = p;
  }
  return req_item_;
}
inline ::rdb::GetLockItem* GetLockRequest::mutable_req_item() {
  // @@protoc_insertion_point(field_mutable:rdb.GetLockRequest.req_item)
  return _internal_mutable_req_item();
}
inline void GetLockRequest::set_allocated_req_item(::rdb::GetLockItem* req_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete req_item_;
  }
  if (req_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(req_item);
    if (message_arena != submessage_arena) {
      req_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req_item, submessage_arena);
    }
    
  } else {
    
  }
  req_item_ = req_item;
  // @@protoc_insertion_point(field_set_allocated:rdb.GetLockRequest.req_item)
}

// -------------------------------------------------------------------

// GetLockReply

// .rdb.ReturnLockItem ret_item = 1;
inline bool GetLockReply::_internal_has_ret_item() const {
  return this != internal_default_instance() && ret_item_ != nullptr;
}
inline bool GetLockReply::has_ret_item() const {
  return _internal_has_ret_item();
}
inline void GetLockReply::clear_ret_item() {
  if (GetArena() == nullptr && ret_item_ != nullptr) {
    delete ret_item_;
  }
  ret_item_ = nullptr;
}
inline const ::rdb::ReturnLockItem& GetLockReply::_internal_ret_item() const {
  const ::rdb::ReturnLockItem* p = ret_item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rdb::ReturnLockItem*>(
      &::rdb::_ReturnLockItem_default_instance_);
}
inline const ::rdb::ReturnLockItem& GetLockReply::ret_item() const {
  // @@protoc_insertion_point(field_get:rdb.GetLockReply.ret_item)
  return _internal_ret_item();
}
inline void GetLockReply::unsafe_arena_set_allocated_ret_item(
    ::rdb::ReturnLockItem* ret_item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ret_item_);
  }
  ret_item_ = ret_item;
  if (ret_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rdb.GetLockReply.ret_item)
}
inline ::rdb::ReturnLockItem* GetLockReply::release_ret_item() {
  
  ::rdb::ReturnLockItem* temp = ret_item_;
  ret_item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::rdb::ReturnLockItem* GetLockReply::unsafe_arena_release_ret_item() {
  // @@protoc_insertion_point(field_release:rdb.GetLockReply.ret_item)
  
  ::rdb::ReturnLockItem* temp = ret_item_;
  ret_item_ = nullptr;
  return temp;
}
inline ::rdb::ReturnLockItem* GetLockReply::_internal_mutable_ret_item() {
  
  if (ret_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::rdb::ReturnLockItem>(GetArena());
    ret_item_ = p;
  }
  return ret_item_;
}
inline ::rdb::ReturnLockItem* GetLockReply::mutable_ret_item() {
  // @@protoc_insertion_point(field_mutable:rdb.GetLockReply.ret_item)
  return _internal_mutable_ret_item();
}
inline void GetLockReply::set_allocated_ret_item(::rdb::ReturnLockItem* ret_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ret_item_;
  }
  if (ret_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ret_item);
    if (message_arena != submessage_arena) {
      ret_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ret_item, submessage_arena);
    }
    
  } else {
    
  }
  ret_item_ = ret_item;
  // @@protoc_insertion_point(field_set_allocated:rdb.GetLockReply.ret_item)
}

// -------------------------------------------------------------------

// GetLocksRequest

// int32 instance_id = 1;
inline void GetLocksRequest::clear_instance_id() {
  instance_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLocksRequest::_internal_instance_id() const {
  return instance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLocksRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:rdb.GetLocksRequest.instance_id)
  return _internal_instance_id();
}
inline void GetLocksRequest::_internal_set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  instance_id_ = value;
}
inline void GetLocksRequest::set_instance_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:rdb.GetLocksRequest.instance_id)
}

// repeated .rdb.GetLockItem req_items = 2;
inline int GetLocksRequest::_internal_req_items_size() const {
  return req_items_.size();
}
inline int GetLocksRequest::req_items_size() const {
  return _internal_req_items_size();
}
inline void GetLocksRequest::clear_req_items() {
  req_items_.Clear();
}
inline ::rdb::GetLockItem* GetLocksRequest::mutable_req_items(int index) {
  // @@protoc_insertion_point(field_mutable:rdb.GetLocksRequest.req_items)
  return req_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rdb::GetLockItem >*
GetLocksRequest::mutable_req_items() {
  // @@protoc_insertion_point(field_mutable_list:rdb.GetLocksRequest.req_items)
  return &req_items_;
}
inline const ::rdb::GetLockItem& GetLocksRequest::_internal_req_items(int index) const {
  return req_items_.Get(index);
}
inline const ::rdb::GetLockItem& GetLocksRequest::req_items(int index) const {
  // @@protoc_insertion_point(field_get:rdb.GetLocksRequest.req_items)
  return _internal_req_items(index);
}
inline ::rdb::GetLockItem* GetLocksRequest::_internal_add_req_items() {
  return req_items_.Add();
}
inline ::rdb::GetLockItem* GetLocksRequest::add_req_items() {
  // @@protoc_insertion_point(field_add:rdb.GetLocksRequest.req_items)
  return _internal_add_req_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rdb::GetLockItem >&
GetLocksRequest::req_items() const {
  // @@protoc_insertion_point(field_list:rdb.GetLocksRequest.req_items)
  return req_items_;
}

// -------------------------------------------------------------------

// GetLocksReply

// repeated .rdb.ReturnLockItem ret_items = 1;
inline int GetLocksReply::_internal_ret_items_size() const {
  return ret_items_.size();
}
inline int GetLocksReply::ret_items_size() const {
  return _internal_ret_items_size();
}
inline void GetLocksReply::clear_ret_items() {
  ret_items_.Clear();
}
inline ::rdb::ReturnLockItem* GetLocksReply::mutable_ret_items(int index) {
  // @@protoc_insertion_point(field_mutable:rdb.GetLocksReply.ret_items)
  return ret_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rdb::ReturnLockItem >*
GetLocksReply::mutable_ret_items() {
  // @@protoc_insertion_point(field_mutable_list:rdb.GetLocksReply.ret_items)
  return &ret_items_;
}
inline const ::rdb::ReturnLockItem& GetLocksReply::_internal_ret_items(int index) const {
  return ret_items_.Get(index);
}
inline const ::rdb::ReturnLockItem& GetLocksReply::ret_items(int index) const {
  // @@protoc_insertion_point(field_get:rdb.GetLocksReply.ret_items)
  return _internal_ret_items(index);
}
inline ::rdb::ReturnLockItem* GetLocksReply::_internal_add_ret_items() {
  return ret_items_.Add();
}
inline ::rdb::ReturnLockItem* GetLocksReply::add_ret_items() {
  // @@protoc_insertion_point(field_add:rdb.GetLocksReply.ret_items)
  return _internal_add_ret_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rdb::ReturnLockItem >&
GetLocksReply::ret_items() const {
  // @@protoc_insertion_point(field_list:rdb.GetLocksReply.ret_items)
  return ret_items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rdb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rdb::RpcLockMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rdb::RpcLockMode>() {
  return ::rdb::RpcLockMode_descriptor();
}
template <> struct is_proto_enum< ::rdb::RpcRC> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rdb::RpcRC>() {
  return ::rdb::RpcRC_descriptor();
}
template <> struct is_proto_enum< ::rdb::RpcTABLES> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rdb::RpcTABLES>() {
  return ::rdb::RpcTABLES_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lock_5fservice_2eproto
