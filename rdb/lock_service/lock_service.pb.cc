// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lock_service.proto

#include "lock_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lock_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLockItem_lock_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lock_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReturnLockItem_lock_5fservice_2eproto;
namespace rdb {
class GetLockItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLockItem> _instance;
} _GetLockItem_default_instance_;
class ReturnLockItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReturnLockItem> _instance;
} _ReturnLockItem_default_instance_;
class GetLockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLockRequest> _instance;
} _GetLockRequest_default_instance_;
class GetLockReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLockReply> _instance;
} _GetLockReply_default_instance_;
class GetLocksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocksRequest> _instance;
} _GetLocksRequest_default_instance_;
class GetLocksReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocksReply> _instance;
} _GetLocksReply_default_instance_;
}  // namespace rdb
static void InitDefaultsscc_info_GetLockItem_lock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rdb::_GetLockItem_default_instance_;
    new (ptr) ::rdb::GetLockItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rdb::GetLockItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLockItem_lock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLockItem_lock_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetLockReply_lock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rdb::_GetLockReply_default_instance_;
    new (ptr) ::rdb::GetLockReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rdb::GetLockReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLockReply_lock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLockReply_lock_5fservice_2eproto}, {
      &scc_info_ReturnLockItem_lock_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetLockRequest_lock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rdb::_GetLockRequest_default_instance_;
    new (ptr) ::rdb::GetLockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rdb::GetLockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLockRequest_lock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLockRequest_lock_5fservice_2eproto}, {
      &scc_info_GetLockItem_lock_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetLocksReply_lock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rdb::_GetLocksReply_default_instance_;
    new (ptr) ::rdb::GetLocksReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rdb::GetLocksReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLocksReply_lock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLocksReply_lock_5fservice_2eproto}, {
      &scc_info_ReturnLockItem_lock_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetLocksRequest_lock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rdb::_GetLocksRequest_default_instance_;
    new (ptr) ::rdb::GetLocksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rdb::GetLocksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLocksRequest_lock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLocksRequest_lock_5fservice_2eproto}, {
      &scc_info_GetLockItem_lock_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ReturnLockItem_lock_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rdb::_ReturnLockItem_default_instance_;
    new (ptr) ::rdb::ReturnLockItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rdb::ReturnLockItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReturnLockItem_lock_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReturnLockItem_lock_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lock_5fservice_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_lock_5fservice_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_lock_5fservice_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lock_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rdb::GetLockItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rdb::GetLockItem, table_),
  PROTOBUF_FIELD_OFFSET(::rdb::GetLockItem, item_id_),
  PROTOBUF_FIELD_OFFSET(::rdb::GetLockItem, req_mode_),
  PROTOBUF_FIELD_OFFSET(::rdb::GetLockItem, buf_),
  PROTOBUF_FIELD_OFFSET(::rdb::GetLockItem, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rdb::ReturnLockItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rdb::ReturnLockItem, rc_),
  PROTOBUF_FIELD_OFFSET(::rdb::ReturnLockItem, table_),
  PROTOBUF_FIELD_OFFSET(::rdb::ReturnLockItem, item_id_),
  PROTOBUF_FIELD_OFFSET(::rdb::ReturnLockItem, buf_),
  PROTOBUF_FIELD_OFFSET(::rdb::ReturnLockItem, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rdb::GetLockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rdb::GetLockRequest, instance_id_),
  PROTOBUF_FIELD_OFFSET(::rdb::GetLockRequest, req_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rdb::GetLockReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rdb::GetLockReply, ret_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rdb::GetLocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rdb::GetLocksRequest, instance_id_),
  PROTOBUF_FIELD_OFFSET(::rdb::GetLocksRequest, req_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rdb::GetLocksReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rdb::GetLocksReply, ret_items_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rdb::GetLockItem)},
  { 10, -1, sizeof(::rdb::ReturnLockItem)},
  { 20, -1, sizeof(::rdb::GetLockRequest)},
  { 27, -1, sizeof(::rdb::GetLockReply)},
  { 33, -1, sizeof(::rdb::GetLocksRequest)},
  { 40, -1, sizeof(::rdb::GetLocksReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rdb::_GetLockItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rdb::_ReturnLockItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rdb::_GetLockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rdb::_GetLockReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rdb::_GetLocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rdb::_GetLocksReply_default_instance_),
};

const char descriptor_table_protodef_lock_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022lock_service.proto\022\003rdb\"}\n\013GetLockItem"
  "\022\035\n\005table\030\001 \001(\0162\016.rdb.RpcTABLES\022\017\n\007item_"
  "id\030\002 \001(\004\022\"\n\010req_mode\030\003 \001(\0162\020.rdb.RpcLock"
  "Mode\022\013\n\003buf\030\004 \001(\014\022\r\n\005count\030\005 \001(\004\"t\n\016Retu"
  "rnLockItem\022\026\n\002rc\030\001 \001(\0162\n.rdb.RpcRC\022\035\n\005ta"
  "ble\030\002 \001(\0162\016.rdb.RpcTABLES\022\017\n\007item_id\030\003 \001"
  "(\004\022\013\n\003buf\030\004 \001(\014\022\r\n\005count\030\005 \001(\004\"I\n\016GetLoc"
  "kRequest\022\023\n\013instance_id\030\001 \001(\005\022\"\n\010req_ite"
  "m\030\002 \001(\0132\020.rdb.GetLockItem\"5\n\014GetLockRepl"
  "y\022%\n\010ret_item\030\001 \001(\0132\023.rdb.ReturnLockItem"
  "\"K\n\017GetLocksRequest\022\023\n\013instance_id\030\001 \001(\005"
  "\022#\n\treq_items\030\002 \003(\0132\020.rdb.GetLockItem\"7\n"
  "\rGetLocksReply\022&\n\tret_items\030\001 \003(\0132\023.rdb."
  "ReturnLockItem*)\n\013RpcLockMode\022\005\n\001O\020\000\022\005\n\001"
  "P\020\001\022\005\n\001S\020\002\022\005\n\001X\020\003*W\n\005RpcRC\022\010\n\004RCOK\020\000\022\n\n\006"
  "Commit\020\001\022\t\n\005Abort\020\002\022\010\n\004WAIT\020\003\022\t\n\005ERROR\020\004"
  "\022\n\n\006FINISH\020\005\022\014\n\010TIME_OUT\020\006*\222\001\n\tRpcTABLES"
  "\022\016\n\nMAIN_TABLE\020\000\022\r\n\tWAREHOUSE\020\001\022\014\n\010DISTR"
  "ICT\020\002\022\014\n\010CUSTOMER\020\003\022\013\n\007HISTORY\020\004\022\r\n\tNEW_"
  "ORDER\020\005\022\t\n\005ORDER\020\006\022\016\n\nORDER_LINE\020\007\022\010\n\004IT"
  "EM\020\010\022\t\n\005STOCK\020\t2z\n\013LockService\0223\n\007GetLoc"
  "k\022\023.rdb.GetLockRequest\032\021.rdb.GetLockRepl"
  "y\"\000\0226\n\010GetLocks\022\024.rdb.GetLocksRequest\032\022."
  "rdb.GetLocksReply\"\000B\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lock_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lock_5fservice_2eproto_sccs[6] = {
  &scc_info_GetLockItem_lock_5fservice_2eproto.base,
  &scc_info_GetLockReply_lock_5fservice_2eproto.base,
  &scc_info_GetLockRequest_lock_5fservice_2eproto.base,
  &scc_info_GetLocksReply_lock_5fservice_2eproto.base,
  &scc_info_GetLocksRequest_lock_5fservice_2eproto.base,
  &scc_info_ReturnLockItem_lock_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lock_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lock_5fservice_2eproto = {
  false, false, descriptor_table_protodef_lock_5fservice_2eproto, "lock_service.proto", 952,
  &descriptor_table_lock_5fservice_2eproto_once, descriptor_table_lock_5fservice_2eproto_sccs, descriptor_table_lock_5fservice_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_lock_5fservice_2eproto::offsets,
  file_level_metadata_lock_5fservice_2eproto, 6, file_level_enum_descriptors_lock_5fservice_2eproto, file_level_service_descriptors_lock_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lock_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lock_5fservice_2eproto)), true);
namespace rdb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcLockMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lock_5fservice_2eproto);
  return file_level_enum_descriptors_lock_5fservice_2eproto[0];
}
bool RpcLockMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcRC_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lock_5fservice_2eproto);
  return file_level_enum_descriptors_lock_5fservice_2eproto[1];
}
bool RpcRC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcTABLES_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lock_5fservice_2eproto);
  return file_level_enum_descriptors_lock_5fservice_2eproto[2];
}
bool RpcTABLES_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GetLockItem::InitAsDefaultInstance() {
}
class GetLockItem::_Internal {
 public:
};

GetLockItem::GetLockItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rdb.GetLockItem)
}
GetLockItem::GetLockItem(const GetLockItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buf().empty()) {
    buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_buf(),
      GetArena());
  }
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:rdb.GetLockItem)
}

void GetLockItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLockItem_lock_5fservice_2eproto.base);
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(count_));
}

GetLockItem::~GetLockItem() {
  // @@protoc_insertion_point(destructor:rdb.GetLockItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLockItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  buf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLockItem::ArenaDtor(void* object) {
  GetLockItem* _this = reinterpret_cast< GetLockItem* >(object);
  (void)_this;
}
void GetLockItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLockItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLockItem& GetLockItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLockItem_lock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLockItem::Clear() {
// @@protoc_insertion_point(message_clear_start:rdb.GetLockItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLockItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rdb.RpcTABLES table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table(static_cast<::rdb::RpcTABLES>(val));
        } else goto handle_unusual;
        continue;
      // uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rdb.RpcLockMode req_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_req_mode(static_cast<::rdb::RpcLockMode>(val));
        } else goto handle_unusual;
        continue;
      // bytes buf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_buf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLockItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rdb.GetLockItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rdb.RpcTABLES table = 1;
  if (this->table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table(), target);
  }

  // uint64 item_id = 2;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  // .rdb.RpcLockMode req_mode = 3;
  if (this->req_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_req_mode(), target);
  }

  // bytes buf = 4;
  if (this->buf().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_buf(), target);
  }

  // uint64 count = 5;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rdb.GetLockItem)
  return target;
}

size_t GetLockItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rdb.GetLockItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buf = 4;
  if (this->buf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buf());
  }

  // uint64 item_id = 2;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_item_id());
  }

  // .rdb.RpcTABLES table = 1;
  if (this->table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table());
  }

  // .rdb.RpcLockMode req_mode = 3;
  if (this->req_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_req_mode());
  }

  // uint64 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLockItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rdb.GetLockItem)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLockItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLockItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rdb.GetLockItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rdb.GetLockItem)
    MergeFrom(*source);
  }
}

void GetLockItem::MergeFrom(const GetLockItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rdb.GetLockItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buf().size() > 0) {
    _internal_set_buf(from._internal_buf());
  }
  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.table() != 0) {
    _internal_set_table(from._internal_table());
  }
  if (from.req_mode() != 0) {
    _internal_set_req_mode(from._internal_req_mode());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetLockItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rdb.GetLockItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLockItem::CopyFrom(const GetLockItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rdb.GetLockItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLockItem::IsInitialized() const {
  return true;
}

void GetLockItem::InternalSwap(GetLockItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buf_.Swap(&other->buf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLockItem, count_)
      + sizeof(GetLockItem::count_)
      - PROTOBUF_FIELD_OFFSET(GetLockItem, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLockItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReturnLockItem::InitAsDefaultInstance() {
}
class ReturnLockItem::_Internal {
 public:
};

ReturnLockItem::ReturnLockItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rdb.ReturnLockItem)
}
ReturnLockItem::ReturnLockItem(const ReturnLockItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buf().empty()) {
    buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_buf(),
      GetArena());
  }
  ::memcpy(&rc_, &from.rc_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&rc_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:rdb.ReturnLockItem)
}

void ReturnLockItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReturnLockItem_lock_5fservice_2eproto.base);
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&rc_)) + sizeof(count_));
}

ReturnLockItem::~ReturnLockItem() {
  // @@protoc_insertion_point(destructor:rdb.ReturnLockItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReturnLockItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  buf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReturnLockItem::ArenaDtor(void* object) {
  ReturnLockItem* _this = reinterpret_cast< ReturnLockItem* >(object);
  (void)_this;
}
void ReturnLockItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReturnLockItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReturnLockItem& ReturnLockItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReturnLockItem_lock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ReturnLockItem::Clear() {
// @@protoc_insertion_point(message_clear_start:rdb.ReturnLockItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&rc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&rc_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReturnLockItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rdb.RpcRC rc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rc(static_cast<::rdb::RpcRC>(val));
        } else goto handle_unusual;
        continue;
      // .rdb.RpcTABLES table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_table(static_cast<::rdb::RpcTABLES>(val));
        } else goto handle_unusual;
        continue;
      // uint64 item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes buf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_buf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReturnLockItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rdb.ReturnLockItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rdb.RpcRC rc = 1;
  if (this->rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rc(), target);
  }

  // .rdb.RpcTABLES table = 2;
  if (this->table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_table(), target);
  }

  // uint64 item_id = 3;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_item_id(), target);
  }

  // bytes buf = 4;
  if (this->buf().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_buf(), target);
  }

  // uint64 count = 5;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rdb.ReturnLockItem)
  return target;
}

size_t ReturnLockItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rdb.ReturnLockItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buf = 4;
  if (this->buf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buf());
  }

  // .rdb.RpcRC rc = 1;
  if (this->rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rc());
  }

  // .rdb.RpcTABLES table = 2;
  if (this->table() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table());
  }

  // uint64 item_id = 3;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_item_id());
  }

  // uint64 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReturnLockItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rdb.ReturnLockItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ReturnLockItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReturnLockItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rdb.ReturnLockItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rdb.ReturnLockItem)
    MergeFrom(*source);
  }
}

void ReturnLockItem::MergeFrom(const ReturnLockItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rdb.ReturnLockItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buf().size() > 0) {
    _internal_set_buf(from._internal_buf());
  }
  if (from.rc() != 0) {
    _internal_set_rc(from._internal_rc());
  }
  if (from.table() != 0) {
    _internal_set_table(from._internal_table());
  }
  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ReturnLockItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rdb.ReturnLockItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnLockItem::CopyFrom(const ReturnLockItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rdb.ReturnLockItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnLockItem::IsInitialized() const {
  return true;
}

void ReturnLockItem::InternalSwap(ReturnLockItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buf_.Swap(&other->buf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReturnLockItem, count_)
      + sizeof(ReturnLockItem::count_)
      - PROTOBUF_FIELD_OFFSET(ReturnLockItem, rc_)>(
          reinterpret_cast<char*>(&rc_),
          reinterpret_cast<char*>(&other->rc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReturnLockItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLockRequest::InitAsDefaultInstance() {
  ::rdb::_GetLockRequest_default_instance_._instance.get_mutable()->req_item_ = const_cast< ::rdb::GetLockItem*>(
      ::rdb::GetLockItem::internal_default_instance());
}
class GetLockRequest::_Internal {
 public:
  static const ::rdb::GetLockItem& req_item(const GetLockRequest* msg);
};

const ::rdb::GetLockItem&
GetLockRequest::_Internal::req_item(const GetLockRequest* msg) {
  return *msg->req_item_;
}
GetLockRequest::GetLockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rdb.GetLockRequest)
}
GetLockRequest::GetLockRequest(const GetLockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req_item()) {
    req_item_ = new ::rdb::GetLockItem(*from.req_item_);
  } else {
    req_item_ = nullptr;
  }
  instance_id_ = from.instance_id_;
  // @@protoc_insertion_point(copy_constructor:rdb.GetLockRequest)
}

void GetLockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLockRequest_lock_5fservice_2eproto.base);
  ::memset(&req_item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instance_id_) -
      reinterpret_cast<char*>(&req_item_)) + sizeof(instance_id_));
}

GetLockRequest::~GetLockRequest() {
  // @@protoc_insertion_point(destructor:rdb.GetLockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete req_item_;
}

void GetLockRequest::ArenaDtor(void* object) {
  GetLockRequest* _this = reinterpret_cast< GetLockRequest* >(object);
  (void)_this;
}
void GetLockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLockRequest& GetLockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLockRequest_lock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rdb.GetLockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && req_item_ != nullptr) {
    delete req_item_;
  }
  req_item_ = nullptr;
  instance_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .rdb.GetLockItem req_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_req_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rdb.GetLockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_instance_id(), target);
  }

  // .rdb.GetLockItem req_item = 2;
  if (this->has_req_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::req_item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rdb.GetLockRequest)
  return target;
}

size_t GetLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rdb.GetLockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rdb.GetLockItem req_item = 2;
  if (this->has_req_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_item_);
  }

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_instance_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rdb.GetLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rdb.GetLockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rdb.GetLockRequest)
    MergeFrom(*source);
  }
}

void GetLockRequest::MergeFrom(const GetLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rdb.GetLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_req_item()) {
    _internal_mutable_req_item()->::rdb::GetLockItem::MergeFrom(from._internal_req_item());
  }
  if (from.instance_id() != 0) {
    _internal_set_instance_id(from._internal_instance_id());
  }
}

void GetLockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rdb.GetLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLockRequest::CopyFrom(const GetLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rdb.GetLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLockRequest::IsInitialized() const {
  return true;
}

void GetLockRequest::InternalSwap(GetLockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLockRequest, instance_id_)
      + sizeof(GetLockRequest::instance_id_)
      - PROTOBUF_FIELD_OFFSET(GetLockRequest, req_item_)>(
          reinterpret_cast<char*>(&req_item_),
          reinterpret_cast<char*>(&other->req_item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLockReply::InitAsDefaultInstance() {
  ::rdb::_GetLockReply_default_instance_._instance.get_mutable()->ret_item_ = const_cast< ::rdb::ReturnLockItem*>(
      ::rdb::ReturnLockItem::internal_default_instance());
}
class GetLockReply::_Internal {
 public:
  static const ::rdb::ReturnLockItem& ret_item(const GetLockReply* msg);
};

const ::rdb::ReturnLockItem&
GetLockReply::_Internal::ret_item(const GetLockReply* msg) {
  return *msg->ret_item_;
}
GetLockReply::GetLockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rdb.GetLockReply)
}
GetLockReply::GetLockReply(const GetLockReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ret_item()) {
    ret_item_ = new ::rdb::ReturnLockItem(*from.ret_item_);
  } else {
    ret_item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rdb.GetLockReply)
}

void GetLockReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLockReply_lock_5fservice_2eproto.base);
  ret_item_ = nullptr;
}

GetLockReply::~GetLockReply() {
  // @@protoc_insertion_point(destructor:rdb.GetLockReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLockReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ret_item_;
}

void GetLockReply::ArenaDtor(void* object) {
  GetLockReply* _this = reinterpret_cast< GetLockReply* >(object);
  (void)_this;
}
void GetLockReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLockReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLockReply& GetLockReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLockReply_lock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLockReply::Clear() {
// @@protoc_insertion_point(message_clear_start:rdb.GetLockReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ret_item_ != nullptr) {
    delete ret_item_;
  }
  ret_item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLockReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .rdb.ReturnLockItem ret_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ret_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLockReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rdb.GetLockReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rdb.ReturnLockItem ret_item = 1;
  if (this->has_ret_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ret_item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rdb.GetLockReply)
  return target;
}

size_t GetLockReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rdb.GetLockReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rdb.ReturnLockItem ret_item = 1;
  if (this->has_ret_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ret_item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLockReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rdb.GetLockReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLockReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLockReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rdb.GetLockReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rdb.GetLockReply)
    MergeFrom(*source);
  }
}

void GetLockReply::MergeFrom(const GetLockReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rdb.GetLockReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ret_item()) {
    _internal_mutable_ret_item()->::rdb::ReturnLockItem::MergeFrom(from._internal_ret_item());
  }
}

void GetLockReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rdb.GetLockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLockReply::CopyFrom(const GetLockReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rdb.GetLockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLockReply::IsInitialized() const {
  return true;
}

void GetLockReply::InternalSwap(GetLockReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ret_item_, other->ret_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLockReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLocksRequest::InitAsDefaultInstance() {
}
class GetLocksRequest::_Internal {
 public:
};

GetLocksRequest::GetLocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  req_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rdb.GetLocksRequest)
}
GetLocksRequest::GetLocksRequest(const GetLocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      req_items_(from.req_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instance_id_ = from.instance_id_;
  // @@protoc_insertion_point(copy_constructor:rdb.GetLocksRequest)
}

void GetLocksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocksRequest_lock_5fservice_2eproto.base);
  instance_id_ = 0;
}

GetLocksRequest::~GetLocksRequest() {
  // @@protoc_insertion_point(destructor:rdb.GetLocksRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLocksRequest::ArenaDtor(void* object) {
  GetLocksRequest* _this = reinterpret_cast< GetLocksRequest* >(object);
  (void)_this;
}
void GetLocksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocksRequest& GetLocksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocksRequest_lock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rdb.GetLocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  req_items_.Clear();
  instance_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rdb.GetLockItem req_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_req_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rdb.GetLocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_instance_id(), target);
  }

  // repeated .rdb.GetLockItem req_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_req_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_req_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rdb.GetLocksRequest)
  return target;
}

size_t GetLocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rdb.GetLocksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rdb.GetLockItem req_items = 2;
  total_size += 1UL * this->_internal_req_items_size();
  for (const auto& msg : this->req_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_instance_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rdb.GetLocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rdb.GetLocksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rdb.GetLocksRequest)
    MergeFrom(*source);
  }
}

void GetLocksRequest::MergeFrom(const GetLocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rdb.GetLocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  req_items_.MergeFrom(from.req_items_);
  if (from.instance_id() != 0) {
    _internal_set_instance_id(from._internal_instance_id());
  }
}

void GetLocksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rdb.GetLocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocksRequest::CopyFrom(const GetLocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rdb.GetLocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocksRequest::IsInitialized() const {
  return true;
}

void GetLocksRequest::InternalSwap(GetLocksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  req_items_.InternalSwap(&other->req_items_);
  swap(instance_id_, other->instance_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLocksReply::InitAsDefaultInstance() {
}
class GetLocksReply::_Internal {
 public:
};

GetLocksReply::GetLocksReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ret_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rdb.GetLocksReply)
}
GetLocksReply::GetLocksReply(const GetLocksReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ret_items_(from.ret_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rdb.GetLocksReply)
}

void GetLocksReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocksReply_lock_5fservice_2eproto.base);
}

GetLocksReply::~GetLocksReply() {
  // @@protoc_insertion_point(destructor:rdb.GetLocksReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocksReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLocksReply::ArenaDtor(void* object) {
  GetLocksReply* _this = reinterpret_cast< GetLocksReply* >(object);
  (void)_this;
}
void GetLocksReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocksReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocksReply& GetLocksReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocksReply_lock_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetLocksReply::Clear() {
// @@protoc_insertion_point(message_clear_start:rdb.GetLocksReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocksReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .rdb.ReturnLockItem ret_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ret_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocksReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rdb.GetLocksReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rdb.ReturnLockItem ret_items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ret_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ret_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rdb.GetLocksReply)
  return target;
}

size_t GetLocksReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rdb.GetLocksReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rdb.ReturnLockItem ret_items = 1;
  total_size += 1UL * this->_internal_ret_items_size();
  for (const auto& msg : this->ret_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocksReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rdb.GetLocksReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocksReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocksReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rdb.GetLocksReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rdb.GetLocksReply)
    MergeFrom(*source);
  }
}

void GetLocksReply::MergeFrom(const GetLocksReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rdb.GetLocksReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ret_items_.MergeFrom(from.ret_items_);
}

void GetLocksReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rdb.GetLocksReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocksReply::CopyFrom(const GetLocksReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rdb.GetLocksReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocksReply::IsInitialized() const {
  return true;
}

void GetLocksReply::InternalSwap(GetLocksReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ret_items_.InternalSwap(&other->ret_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocksReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

LockService::~LockService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* LockService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lock_5fservice_2eproto);
  return file_level_service_descriptors_lock_5fservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* LockService::GetDescriptor() {
  return descriptor();
}

void LockService::GetLock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::rdb::GetLockRequest*,
                         ::rdb::GetLockReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLock() not implemented.");
  done->Run();
}

void LockService::GetLocks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::rdb::GetLocksRequest*,
                         ::rdb::GetLocksReply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetLocks() not implemented.");
  done->Run();
}

void LockService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_lock_5fservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetLock(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::rdb::GetLockRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::rdb::GetLockReply*>(
                 response),
             done);
      break;
    case 1:
      GetLocks(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::rdb::GetLocksRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::rdb::GetLocksReply*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& LockService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rdb::GetLockRequest::default_instance();
    case 1:
      return ::rdb::GetLocksRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& LockService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::rdb::GetLockReply::default_instance();
    case 1:
      return ::rdb::GetLocksReply::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

LockService_Stub::LockService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
LockService_Stub::LockService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
LockService_Stub::~LockService_Stub() {
  if (owns_channel_) delete channel_;
}

void LockService_Stub::GetLock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::rdb::GetLockRequest* request,
                              ::rdb::GetLockReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void LockService_Stub::GetLocks(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::rdb::GetLocksRequest* request,
                              ::rdb::GetLocksReply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rdb::GetLockItem* Arena::CreateMaybeMessage< ::rdb::GetLockItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rdb::GetLockItem >(arena);
}
template<> PROTOBUF_NOINLINE ::rdb::ReturnLockItem* Arena::CreateMaybeMessage< ::rdb::ReturnLockItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rdb::ReturnLockItem >(arena);
}
template<> PROTOBUF_NOINLINE ::rdb::GetLockRequest* Arena::CreateMaybeMessage< ::rdb::GetLockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rdb::GetLockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rdb::GetLockReply* Arena::CreateMaybeMessage< ::rdb::GetLockReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rdb::GetLockReply >(arena);
}
template<> PROTOBUF_NOINLINE ::rdb::GetLocksRequest* Arena::CreateMaybeMessage< ::rdb::GetLocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rdb::GetLocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rdb::GetLocksReply* Arena::CreateMaybeMessage< ::rdb::GetLocksReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rdb::GetLocksReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
