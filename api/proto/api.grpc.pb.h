// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api.proto
#ifndef GRPC_api_2eproto__INCLUDED
#define GRPC_api_2eproto__INCLUDED

#include "api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace dbx1000 {

class DBx1000Service final {
 public:
  static constexpr char const* service_full_name() {
    return "dbx1000.DBx1000Service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // / for txn thread
    virtual ::grpc::Status TxnReady(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest& request, ::dbx1000::TxnReadyReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::TxnReadyReply>> AsyncTxnReady(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::TxnReadyReply>>(AsyncTxnReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::TxnReadyReply>> PrepareAsyncTxnReady(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::TxnReadyReply>>(PrepareAsyncTxnReadyRaw(context, request, cq));
    }
    virtual ::grpc::Status InitWlDone(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest& request, ::dbx1000::InitWlDoneReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InitWlDoneReply>> AsyncInitWlDone(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InitWlDoneReply>>(AsyncInitWlDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InitWlDoneReply>> PrepareAsyncInitWlDone(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InitWlDoneReply>>(PrepareAsyncInitWlDoneRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRow(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest& request, ::dbx1000::GetRowReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetRowReply>> AsyncGetRow(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetRowReply>>(AsyncGetRowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetRowReply>> PrepareAsyncGetRow(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetRowReply>>(PrepareAsyncGetRowRaw(context, request, cq));
    }
    virtual ::grpc::Status ReturnRow(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest& request, ::dbx1000::ReturnRowReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReturnRowReply>> AsyncReturnRow(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReturnRowReply>>(AsyncReturnRowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReturnRowReply>> PrepareAsyncReturnRow(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReturnRowReply>>(PrepareAsyncReturnRowRaw(context, request, cq));
    }
    virtual ::grpc::Status SetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest& request, ::dbx1000::SetWlSimDoneReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::SetWlSimDoneReply>> AsyncSetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::SetWlSimDoneReply>>(AsyncSetWlSimDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::SetWlSimDoneReply>> PrepareAsyncSetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::SetWlSimDoneReply>>(PrepareAsyncSetWlSimDoneRaw(context, request, cq));
    }
    virtual ::grpc::Status GetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest& request, ::dbx1000::GetWlSimDoneReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetWlSimDoneReply>> AsyncGetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetWlSimDoneReply>>(AsyncGetWlSimDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetWlSimDoneReply>> PrepareAsyncGetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetWlSimDoneReply>>(PrepareAsyncGetWlSimDoneRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::dbx1000::GetNextTsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetNextTsReply>> AsyncGetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetNextTsReply>>(AsyncGetNextTsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetNextTsReply>> PrepareAsyncGetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetNextTsReply>>(PrepareAsyncGetNextTsRaw(context, request, cq));
    }
    virtual ::grpc::Status AddTs(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest& request, ::dbx1000::AddTsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::AddTsReply>> AsyncAddTs(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::AddTsReply>>(AsyncAddTsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::AddTsReply>> PrepareAsyncAddTs(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::AddTsReply>>(PrepareAsyncAddTsRaw(context, request, cq));
    }
    virtual ::grpc::Status ThreadDone(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest& request, ::dbx1000::ThreadDoneReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ThreadDoneReply>> AsyncThreadDone(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ThreadDoneReply>>(AsyncThreadDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ThreadDoneReply>> PrepareAsyncThreadDone(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ThreadDoneReply>>(PrepareAsyncThreadDoneRaw(context, request, cq));
    }
    // / for cc
    virtual ::grpc::Status SetTsReady(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest& request, ::dbx1000::SetTsReadyReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::SetTsReadyReply>> AsyncSetTsReady(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::SetTsReadyReply>>(AsyncSetTsReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::SetTsReadyReply>> PrepareAsyncSetTsReady(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::SetTsReadyReply>>(PrepareAsyncSetTsReadyRaw(context, request, cq));
    }
    virtual ::grpc::Status Test(::grpc::ClientContext* context, const ::dbx1000::TestRequest& request, ::dbx1000::TestReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::TestReply>> AsyncTest(::grpc::ClientContext* context, const ::dbx1000::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::TestReply>>(AsyncTestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::TestReply>> PrepareAsyncTest(::grpc::ClientContext* context, const ::dbx1000::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::TestReply>>(PrepareAsyncTestRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // / for txn thread
      virtual void TxnReady(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TxnReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::TxnReadyReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TxnReady(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void TxnReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::TxnReadyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void InitWlDone(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitWlDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InitWlDoneReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitWlDone(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void InitWlDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InitWlDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRow(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetRowReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRow(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetRowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ReturnRow(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReturnRow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReturnRowReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReturnRow(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ReturnRow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReturnRowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetWlSimDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::SetWlSimDoneReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetWlSimDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::SetWlSimDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWlSimDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetWlSimDoneReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetWlSimDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetWlSimDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddTs(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::AddTsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddTs(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::AddTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ThreadDone(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ThreadDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ThreadDoneReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ThreadDone(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ThreadDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ThreadDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // / for cc
      virtual void SetTsReady(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTsReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::SetTsReadyReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTsReady(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetTsReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::SetTsReadyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Test(::grpc::ClientContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Test(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::TestReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Test(::grpc::ClientContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Test(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::TestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::TxnReadyReply>* AsyncTxnReadyRaw(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::TxnReadyReply>* PrepareAsyncTxnReadyRaw(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InitWlDoneReply>* AsyncInitWlDoneRaw(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InitWlDoneReply>* PrepareAsyncInitWlDoneRaw(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetRowReply>* AsyncGetRowRaw(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetRowReply>* PrepareAsyncGetRowRaw(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReturnRowReply>* AsyncReturnRowRaw(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReturnRowReply>* PrepareAsyncReturnRowRaw(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::SetWlSimDoneReply>* AsyncSetWlSimDoneRaw(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::SetWlSimDoneReply>* PrepareAsyncSetWlSimDoneRaw(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetWlSimDoneReply>* AsyncGetWlSimDoneRaw(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetWlSimDoneReply>* PrepareAsyncGetWlSimDoneRaw(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetNextTsReply>* AsyncGetNextTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetNextTsReply>* PrepareAsyncGetNextTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::AddTsReply>* AsyncAddTsRaw(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::AddTsReply>* PrepareAsyncAddTsRaw(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ThreadDoneReply>* AsyncThreadDoneRaw(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ThreadDoneReply>* PrepareAsyncThreadDoneRaw(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::SetTsReadyReply>* AsyncSetTsReadyRaw(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::SetTsReadyReply>* PrepareAsyncSetTsReadyRaw(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::TestReply>* AsyncTestRaw(::grpc::ClientContext* context, const ::dbx1000::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::TestReply>* PrepareAsyncTestRaw(::grpc::ClientContext* context, const ::dbx1000::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status TxnReady(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest& request, ::dbx1000::TxnReadyReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::TxnReadyReply>> AsyncTxnReady(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::TxnReadyReply>>(AsyncTxnReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::TxnReadyReply>> PrepareAsyncTxnReady(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::TxnReadyReply>>(PrepareAsyncTxnReadyRaw(context, request, cq));
    }
    ::grpc::Status InitWlDone(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest& request, ::dbx1000::InitWlDoneReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::InitWlDoneReply>> AsyncInitWlDone(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::InitWlDoneReply>>(AsyncInitWlDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::InitWlDoneReply>> PrepareAsyncInitWlDone(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::InitWlDoneReply>>(PrepareAsyncInitWlDoneRaw(context, request, cq));
    }
    ::grpc::Status GetRow(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest& request, ::dbx1000::GetRowReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetRowReply>> AsyncGetRow(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetRowReply>>(AsyncGetRowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetRowReply>> PrepareAsyncGetRow(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetRowReply>>(PrepareAsyncGetRowRaw(context, request, cq));
    }
    ::grpc::Status ReturnRow(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest& request, ::dbx1000::ReturnRowReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ReturnRowReply>> AsyncReturnRow(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ReturnRowReply>>(AsyncReturnRowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ReturnRowReply>> PrepareAsyncReturnRow(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ReturnRowReply>>(PrepareAsyncReturnRowRaw(context, request, cq));
    }
    ::grpc::Status SetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest& request, ::dbx1000::SetWlSimDoneReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::SetWlSimDoneReply>> AsyncSetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::SetWlSimDoneReply>>(AsyncSetWlSimDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::SetWlSimDoneReply>> PrepareAsyncSetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::SetWlSimDoneReply>>(PrepareAsyncSetWlSimDoneRaw(context, request, cq));
    }
    ::grpc::Status GetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest& request, ::dbx1000::GetWlSimDoneReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetWlSimDoneReply>> AsyncGetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetWlSimDoneReply>>(AsyncGetWlSimDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetWlSimDoneReply>> PrepareAsyncGetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetWlSimDoneReply>>(PrepareAsyncGetWlSimDoneRaw(context, request, cq));
    }
    ::grpc::Status GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::dbx1000::GetNextTsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>> AsyncGetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>>(AsyncGetNextTsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>> PrepareAsyncGetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>>(PrepareAsyncGetNextTsRaw(context, request, cq));
    }
    ::grpc::Status AddTs(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest& request, ::dbx1000::AddTsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::AddTsReply>> AsyncAddTs(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::AddTsReply>>(AsyncAddTsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::AddTsReply>> PrepareAsyncAddTs(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::AddTsReply>>(PrepareAsyncAddTsRaw(context, request, cq));
    }
    ::grpc::Status ThreadDone(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest& request, ::dbx1000::ThreadDoneReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ThreadDoneReply>> AsyncThreadDone(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ThreadDoneReply>>(AsyncThreadDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ThreadDoneReply>> PrepareAsyncThreadDone(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ThreadDoneReply>>(PrepareAsyncThreadDoneRaw(context, request, cq));
    }
    ::grpc::Status SetTsReady(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest& request, ::dbx1000::SetTsReadyReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::SetTsReadyReply>> AsyncSetTsReady(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::SetTsReadyReply>>(AsyncSetTsReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::SetTsReadyReply>> PrepareAsyncSetTsReady(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::SetTsReadyReply>>(PrepareAsyncSetTsReadyRaw(context, request, cq));
    }
    ::grpc::Status Test(::grpc::ClientContext* context, const ::dbx1000::TestRequest& request, ::dbx1000::TestReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::TestReply>> AsyncTest(::grpc::ClientContext* context, const ::dbx1000::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::TestReply>>(AsyncTestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::TestReply>> PrepareAsyncTest(::grpc::ClientContext* context, const ::dbx1000::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::TestReply>>(PrepareAsyncTestRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void TxnReady(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response, std::function<void(::grpc::Status)>) override;
      void TxnReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::TxnReadyReply* response, std::function<void(::grpc::Status)>) override;
      void TxnReady(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void TxnReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::TxnReadyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void InitWlDone(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response, std::function<void(::grpc::Status)>) override;
      void InitWlDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InitWlDoneReply* response, std::function<void(::grpc::Status)>) override;
      void InitWlDone(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void InitWlDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InitWlDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRow(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response, std::function<void(::grpc::Status)>) override;
      void GetRow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetRowReply* response, std::function<void(::grpc::Status)>) override;
      void GetRow(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetRowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ReturnRow(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response, std::function<void(::grpc::Status)>) override;
      void ReturnRow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReturnRowReply* response, std::function<void(::grpc::Status)>) override;
      void ReturnRow(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ReturnRow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReturnRowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response, std::function<void(::grpc::Status)>) override;
      void SetWlSimDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::SetWlSimDoneReply* response, std::function<void(::grpc::Status)>) override;
      void SetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetWlSimDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::SetWlSimDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response, std::function<void(::grpc::Status)>) override;
      void GetWlSimDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetWlSimDoneReply* response, std::function<void(::grpc::Status)>) override;
      void GetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetWlSimDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetWlSimDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, std::function<void(::grpc::Status)>) override;
      void GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, std::function<void(::grpc::Status)>) override;
      void GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddTs(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response, std::function<void(::grpc::Status)>) override;
      void AddTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::AddTsReply* response, std::function<void(::grpc::Status)>) override;
      void AddTs(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::AddTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ThreadDone(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response, std::function<void(::grpc::Status)>) override;
      void ThreadDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ThreadDoneReply* response, std::function<void(::grpc::Status)>) override;
      void ThreadDone(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ThreadDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ThreadDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetTsReady(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response, std::function<void(::grpc::Status)>) override;
      void SetTsReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::SetTsReadyReply* response, std::function<void(::grpc::Status)>) override;
      void SetTsReady(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetTsReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::SetTsReadyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Test(::grpc::ClientContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response, std::function<void(::grpc::Status)>) override;
      void Test(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::TestReply* response, std::function<void(::grpc::Status)>) override;
      void Test(::grpc::ClientContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Test(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::TestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dbx1000::TxnReadyReply>* AsyncTxnReadyRaw(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::TxnReadyReply>* PrepareAsyncTxnReadyRaw(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::InitWlDoneReply>* AsyncInitWlDoneRaw(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::InitWlDoneReply>* PrepareAsyncInitWlDoneRaw(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::GetRowReply>* AsyncGetRowRaw(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::GetRowReply>* PrepareAsyncGetRowRaw(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::ReturnRowReply>* AsyncReturnRowRaw(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::ReturnRowReply>* PrepareAsyncReturnRowRaw(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::SetWlSimDoneReply>* AsyncSetWlSimDoneRaw(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::SetWlSimDoneReply>* PrepareAsyncSetWlSimDoneRaw(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::GetWlSimDoneReply>* AsyncGetWlSimDoneRaw(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::GetWlSimDoneReply>* PrepareAsyncGetWlSimDoneRaw(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>* AsyncGetNextTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>* PrepareAsyncGetNextTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::AddTsReply>* AsyncAddTsRaw(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::AddTsReply>* PrepareAsyncAddTsRaw(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::ThreadDoneReply>* AsyncThreadDoneRaw(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::ThreadDoneReply>* PrepareAsyncThreadDoneRaw(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::SetTsReadyReply>* AsyncSetTsReadyRaw(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::SetTsReadyReply>* PrepareAsyncSetTsReadyRaw(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::TestReply>* AsyncTestRaw(::grpc::ClientContext* context, const ::dbx1000::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::TestReply>* PrepareAsyncTestRaw(::grpc::ClientContext* context, const ::dbx1000::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_TxnReady_;
    const ::grpc::internal::RpcMethod rpcmethod_InitWlDone_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRow_;
    const ::grpc::internal::RpcMethod rpcmethod_ReturnRow_;
    const ::grpc::internal::RpcMethod rpcmethod_SetWlSimDone_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWlSimDone_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNextTs_;
    const ::grpc::internal::RpcMethod rpcmethod_AddTs_;
    const ::grpc::internal::RpcMethod rpcmethod_ThreadDone_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTsReady_;
    const ::grpc::internal::RpcMethod rpcmethod_Test_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // / for txn thread
    virtual ::grpc::Status TxnReady(::grpc::ServerContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response);
    virtual ::grpc::Status InitWlDone(::grpc::ServerContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response);
    virtual ::grpc::Status GetRow(::grpc::ServerContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response);
    virtual ::grpc::Status ReturnRow(::grpc::ServerContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response);
    virtual ::grpc::Status SetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response);
    virtual ::grpc::Status GetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response);
    virtual ::grpc::Status GetNextTs(::grpc::ServerContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response);
    virtual ::grpc::Status AddTs(::grpc::ServerContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response);
    virtual ::grpc::Status ThreadDone(::grpc::ServerContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response);
    // / for cc
    virtual ::grpc::Status SetTsReady(::grpc::ServerContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response);
    virtual ::grpc::Status Test(::grpc::ServerContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_TxnReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TxnReady() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_TxnReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxnReady(::grpc::ServerContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTxnReady(::grpc::ServerContext* context, ::dbx1000::TxnReadyRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::TxnReadyReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InitWlDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_InitWlDone() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_InitWlDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitWlDone(::grpc::ServerContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitWlDone(::grpc::ServerContext* context, ::dbx1000::InitWlDoneRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::InitWlDoneReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRow() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRow(::grpc::ServerContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRow(::grpc::ServerContext* context, ::dbx1000::GetRowRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::GetRowReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReturnRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReturnRow() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ReturnRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReturnRow(::grpc::ServerContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReturnRow(::grpc::ServerContext* context, ::dbx1000::ReturnRowRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::ReturnRowReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetWlSimDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetWlSimDone() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetWlSimDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetWlSimDone(::grpc::ServerContext* context, ::dbx1000::SetWlSimDoneRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::SetWlSimDoneReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWlSimDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetWlSimDone() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetWlSimDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWlSimDone(::grpc::ServerContext* context, ::dbx1000::GetWlSimDoneRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::GetWlSimDoneReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNextTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetNextTs() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetNextTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextTs(::grpc::ServerContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNextTs(::grpc::ServerContext* context, ::dbx1000::GetNextTsRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::GetNextTsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddTs() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_AddTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTs(::grpc::ServerContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTs(::grpc::ServerContext* context, ::dbx1000::AddTsRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::AddTsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ThreadDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ThreadDone() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ThreadDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ThreadDone(::grpc::ServerContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestThreadDone(::grpc::ServerContext* context, ::dbx1000::ThreadDoneRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::ThreadDoneReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetTsReady() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetTsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTsReady(::grpc::ServerContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTsReady(::grpc::ServerContext* context, ::dbx1000::SetTsReadyRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::SetTsReadyReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Test() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Test(::grpc::ServerContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTest(::grpc::ServerContext* context, ::dbx1000::TestRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::TestReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_TxnReady<WithAsyncMethod_InitWlDone<WithAsyncMethod_GetRow<WithAsyncMethod_ReturnRow<WithAsyncMethod_SetWlSimDone<WithAsyncMethod_GetWlSimDone<WithAsyncMethod_GetNextTs<WithAsyncMethod_AddTs<WithAsyncMethod_ThreadDone<WithAsyncMethod_SetTsReady<WithAsyncMethod_Test<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TxnReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_TxnReady() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::TxnReadyRequest, ::dbx1000::TxnReadyReply>(
          [this](::grpc::ServerContext* context,
                 const ::dbx1000::TxnReadyRequest* request,
                 ::dbx1000::TxnReadyReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->TxnReady(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_TxnReady(
        ::grpc::experimental::MessageAllocator< ::dbx1000::TxnReadyRequest, ::dbx1000::TxnReadyReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::TxnReadyRequest, ::dbx1000::TxnReadyReply>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TxnReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxnReady(::grpc::ServerContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void TxnReady(::grpc::ServerContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InitWlDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_InitWlDone() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::InitWlDoneRequest, ::dbx1000::InitWlDoneReply>(
          [this](::grpc::ServerContext* context,
                 const ::dbx1000::InitWlDoneRequest* request,
                 ::dbx1000::InitWlDoneReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->InitWlDone(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_InitWlDone(
        ::grpc::experimental::MessageAllocator< ::dbx1000::InitWlDoneRequest, ::dbx1000::InitWlDoneReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::InitWlDoneRequest, ::dbx1000::InitWlDoneReply>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InitWlDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitWlDone(::grpc::ServerContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void InitWlDone(::grpc::ServerContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetRow() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::GetRowRequest, ::dbx1000::GetRowReply>(
          [this](::grpc::ServerContext* context,
                 const ::dbx1000::GetRowRequest* request,
                 ::dbx1000::GetRowReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetRow(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetRow(
        ::grpc::experimental::MessageAllocator< ::dbx1000::GetRowRequest, ::dbx1000::GetRowReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::GetRowRequest, ::dbx1000::GetRowReply>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRow(::grpc::ServerContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRow(::grpc::ServerContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReturnRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ReturnRow() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::ReturnRowRequest, ::dbx1000::ReturnRowReply>(
          [this](::grpc::ServerContext* context,
                 const ::dbx1000::ReturnRowRequest* request,
                 ::dbx1000::ReturnRowReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ReturnRow(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ReturnRow(
        ::grpc::experimental::MessageAllocator< ::dbx1000::ReturnRowRequest, ::dbx1000::ReturnRowReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::ReturnRowRequest, ::dbx1000::ReturnRowReply>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReturnRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReturnRow(::grpc::ServerContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReturnRow(::grpc::ServerContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetWlSimDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetWlSimDone() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::SetWlSimDoneRequest, ::dbx1000::SetWlSimDoneReply>(
          [this](::grpc::ServerContext* context,
                 const ::dbx1000::SetWlSimDoneRequest* request,
                 ::dbx1000::SetWlSimDoneReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetWlSimDone(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetWlSimDone(
        ::grpc::experimental::MessageAllocator< ::dbx1000::SetWlSimDoneRequest, ::dbx1000::SetWlSimDoneReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::SetWlSimDoneRequest, ::dbx1000::SetWlSimDoneReply>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetWlSimDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetWlSimDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetWlSimDone() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::GetWlSimDoneRequest, ::dbx1000::GetWlSimDoneReply>(
          [this](::grpc::ServerContext* context,
                 const ::dbx1000::GetWlSimDoneRequest* request,
                 ::dbx1000::GetWlSimDoneReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetWlSimDone(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetWlSimDone(
        ::grpc::experimental::MessageAllocator< ::dbx1000::GetWlSimDoneRequest, ::dbx1000::GetWlSimDoneReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::GetWlSimDoneRequest, ::dbx1000::GetWlSimDoneReply>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetWlSimDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNextTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetNextTs() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::GetNextTsRequest, ::dbx1000::GetNextTsReply>(
          [this](::grpc::ServerContext* context,
                 const ::dbx1000::GetNextTsRequest* request,
                 ::dbx1000::GetNextTsReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetNextTs(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetNextTs(
        ::grpc::experimental::MessageAllocator< ::dbx1000::GetNextTsRequest, ::dbx1000::GetNextTsReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::GetNextTsRequest, ::dbx1000::GetNextTsReply>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNextTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextTs(::grpc::ServerContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNextTs(::grpc::ServerContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AddTs() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::AddTsRequest, ::dbx1000::AddTsReply>(
          [this](::grpc::ServerContext* context,
                 const ::dbx1000::AddTsRequest* request,
                 ::dbx1000::AddTsReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddTs(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_AddTs(
        ::grpc::experimental::MessageAllocator< ::dbx1000::AddTsRequest, ::dbx1000::AddTsReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::AddTsRequest, ::dbx1000::AddTsReply>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTs(::grpc::ServerContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddTs(::grpc::ServerContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ThreadDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ThreadDone() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::ThreadDoneRequest, ::dbx1000::ThreadDoneReply>(
          [this](::grpc::ServerContext* context,
                 const ::dbx1000::ThreadDoneRequest* request,
                 ::dbx1000::ThreadDoneReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ThreadDone(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ThreadDone(
        ::grpc::experimental::MessageAllocator< ::dbx1000::ThreadDoneRequest, ::dbx1000::ThreadDoneReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::ThreadDoneRequest, ::dbx1000::ThreadDoneReply>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ThreadDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ThreadDone(::grpc::ServerContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ThreadDone(::grpc::ServerContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetTsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetTsReady() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::SetTsReadyRequest, ::dbx1000::SetTsReadyReply>(
          [this](::grpc::ServerContext* context,
                 const ::dbx1000::SetTsReadyRequest* request,
                 ::dbx1000::SetTsReadyReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetTsReady(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetTsReady(
        ::grpc::experimental::MessageAllocator< ::dbx1000::SetTsReadyRequest, ::dbx1000::SetTsReadyReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::SetTsReadyRequest, ::dbx1000::SetTsReadyReply>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetTsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTsReady(::grpc::ServerContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetTsReady(::grpc::ServerContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Test() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::TestRequest, ::dbx1000::TestReply>(
          [this](::grpc::ServerContext* context,
                 const ::dbx1000::TestRequest* request,
                 ::dbx1000::TestReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Test(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Test(
        ::grpc::experimental::MessageAllocator< ::dbx1000::TestRequest, ::dbx1000::TestReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::TestRequest, ::dbx1000::TestReply>*>(
          ::grpc::Service::experimental().GetHandler(10))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Test(::grpc::ServerContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Test(::grpc::ServerContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_TxnReady<ExperimentalWithCallbackMethod_InitWlDone<ExperimentalWithCallbackMethod_GetRow<ExperimentalWithCallbackMethod_ReturnRow<ExperimentalWithCallbackMethod_SetWlSimDone<ExperimentalWithCallbackMethod_GetWlSimDone<ExperimentalWithCallbackMethod_GetNextTs<ExperimentalWithCallbackMethod_AddTs<ExperimentalWithCallbackMethod_ThreadDone<ExperimentalWithCallbackMethod_SetTsReady<ExperimentalWithCallbackMethod_Test<Service > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_TxnReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TxnReady() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_TxnReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxnReady(::grpc::ServerContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InitWlDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_InitWlDone() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_InitWlDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitWlDone(::grpc::ServerContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRow() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRow(::grpc::ServerContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReturnRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReturnRow() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ReturnRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReturnRow(::grpc::ServerContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetWlSimDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetWlSimDone() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetWlSimDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWlSimDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetWlSimDone() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetWlSimDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNextTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetNextTs() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetNextTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextTs(::grpc::ServerContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddTs() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_AddTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTs(::grpc::ServerContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ThreadDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ThreadDone() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ThreadDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ThreadDone(::grpc::ServerContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetTsReady() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetTsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTsReady(::grpc::ServerContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Test() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Test(::grpc::ServerContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_TxnReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_TxnReady() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_TxnReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxnReady(::grpc::ServerContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTxnReady(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitWlDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_InitWlDone() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_InitWlDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitWlDone(::grpc::ServerContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitWlDone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRow() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRow(::grpc::ServerContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReturnRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReturnRow() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ReturnRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReturnRow(::grpc::ServerContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReturnRow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetWlSimDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetWlSimDone() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetWlSimDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetWlSimDone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWlSimDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetWlSimDone() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetWlSimDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWlSimDone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNextTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetNextTs() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetNextTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextTs(::grpc::ServerContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNextTs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddTs() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_AddTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTs(::grpc::ServerContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ThreadDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ThreadDone() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ThreadDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ThreadDone(::grpc::ServerContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestThreadDone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetTsReady() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetTsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTsReady(::grpc::ServerContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTsReady(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Test() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Test(::grpc::ServerContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TxnReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_TxnReady() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->TxnReady(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_TxnReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxnReady(::grpc::ServerContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void TxnReady(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InitWlDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_InitWlDone() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->InitWlDone(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_InitWlDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitWlDone(::grpc::ServerContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void InitWlDone(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRow() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetRow(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRow(::grpc::ServerContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRow(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReturnRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ReturnRow() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReturnRow(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ReturnRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReturnRow(::grpc::ServerContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReturnRow(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetWlSimDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetWlSimDone() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetWlSimDone(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetWlSimDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetWlSimDone(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetWlSimDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetWlSimDone() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetWlSimDone(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetWlSimDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetWlSimDone(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNextTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNextTs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetNextTs(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNextTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextTs(::grpc::ServerContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNextTs(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AddTs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddTs(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTs(::grpc::ServerContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddTs(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ThreadDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ThreadDone() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ThreadDone(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ThreadDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ThreadDone(::grpc::ServerContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ThreadDone(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetTsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetTsReady() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetTsReady(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetTsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTsReady(::grpc::ServerContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetTsReady(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Test() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Test(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Test(::grpc::ServerContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Test(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TxnReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TxnReady() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::dbx1000::TxnReadyRequest, ::dbx1000::TxnReadyReply>(std::bind(&WithStreamedUnaryMethod_TxnReady<BaseClass>::StreamedTxnReady, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TxnReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TxnReady(::grpc::ServerContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTxnReady(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::TxnReadyRequest,::dbx1000::TxnReadyReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitWlDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_InitWlDone() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::dbx1000::InitWlDoneRequest, ::dbx1000::InitWlDoneReply>(std::bind(&WithStreamedUnaryMethod_InitWlDone<BaseClass>::StreamedInitWlDone, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InitWlDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitWlDone(::grpc::ServerContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitWlDone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::InitWlDoneRequest,::dbx1000::InitWlDoneReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRow() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::dbx1000::GetRowRequest, ::dbx1000::GetRowReply>(std::bind(&WithStreamedUnaryMethod_GetRow<BaseClass>::StreamedGetRow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRow(::grpc::ServerContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::GetRowRequest,::dbx1000::GetRowReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReturnRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReturnRow() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::dbx1000::ReturnRowRequest, ::dbx1000::ReturnRowReply>(std::bind(&WithStreamedUnaryMethod_ReturnRow<BaseClass>::StreamedReturnRow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReturnRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReturnRow(::grpc::ServerContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReturnRow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::ReturnRowRequest,::dbx1000::ReturnRowReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetWlSimDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetWlSimDone() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::dbx1000::SetWlSimDoneRequest, ::dbx1000::SetWlSimDoneReply>(std::bind(&WithStreamedUnaryMethod_SetWlSimDone<BaseClass>::StreamedSetWlSimDone, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetWlSimDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetWlSimDone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::SetWlSimDoneRequest,::dbx1000::SetWlSimDoneReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWlSimDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetWlSimDone() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::dbx1000::GetWlSimDoneRequest, ::dbx1000::GetWlSimDoneReply>(std::bind(&WithStreamedUnaryMethod_GetWlSimDone<BaseClass>::StreamedGetWlSimDone, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetWlSimDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWlSimDone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::GetWlSimDoneRequest,::dbx1000::GetWlSimDoneReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNextTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetNextTs() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::dbx1000::GetNextTsRequest, ::dbx1000::GetNextTsReply>(std::bind(&WithStreamedUnaryMethod_GetNextTs<BaseClass>::StreamedGetNextTs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNextTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNextTs(::grpc::ServerContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNextTs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::GetNextTsRequest,::dbx1000::GetNextTsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddTs() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::dbx1000::AddTsRequest, ::dbx1000::AddTsReply>(std::bind(&WithStreamedUnaryMethod_AddTs<BaseClass>::StreamedAddTs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddTs(::grpc::ServerContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddTs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::AddTsRequest,::dbx1000::AddTsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ThreadDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ThreadDone() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::dbx1000::ThreadDoneRequest, ::dbx1000::ThreadDoneReply>(std::bind(&WithStreamedUnaryMethod_ThreadDone<BaseClass>::StreamedThreadDone, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ThreadDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ThreadDone(::grpc::ServerContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedThreadDone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::ThreadDoneRequest,::dbx1000::ThreadDoneReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetTsReady() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::dbx1000::SetTsReadyRequest, ::dbx1000::SetTsReadyReply>(std::bind(&WithStreamedUnaryMethod_SetTsReady<BaseClass>::StreamedSetTsReady, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetTsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTsReady(::grpc::ServerContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTsReady(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::SetTsReadyRequest,::dbx1000::SetTsReadyReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Test() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::dbx1000::TestRequest, ::dbx1000::TestReply>(std::bind(&WithStreamedUnaryMethod_Test<BaseClass>::StreamedTest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Test(::grpc::ServerContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::TestRequest,::dbx1000::TestReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_TxnReady<WithStreamedUnaryMethod_InitWlDone<WithStreamedUnaryMethod_GetRow<WithStreamedUnaryMethod_ReturnRow<WithStreamedUnaryMethod_SetWlSimDone<WithStreamedUnaryMethod_GetWlSimDone<WithStreamedUnaryMethod_GetNextTs<WithStreamedUnaryMethod_AddTs<WithStreamedUnaryMethod_ThreadDone<WithStreamedUnaryMethod_SetTsReady<WithStreamedUnaryMethod_Test<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_TxnReady<WithStreamedUnaryMethod_InitWlDone<WithStreamedUnaryMethod_GetRow<WithStreamedUnaryMethod_ReturnRow<WithStreamedUnaryMethod_SetWlSimDone<WithStreamedUnaryMethod_GetWlSimDone<WithStreamedUnaryMethod_GetNextTs<WithStreamedUnaryMethod_AddTs<WithStreamedUnaryMethod_ThreadDone<WithStreamedUnaryMethod_SetTsReady<WithStreamedUnaryMethod_Test<Service > > > > > > > > > > > StreamedService;
};

}  // namespace dbx1000


#endif  // GRPC_api_2eproto__INCLUDED
