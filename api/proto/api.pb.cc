// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_api_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Mess_RowItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Mess_TxnRowMan;
}  // namespace protobuf_api_2eproto
namespace dbx1000 {
class TxnReadyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxnReadyRequest>
      _instance;
} _TxnReadyRequest_default_instance_;
class TxnReadyReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxnReadyReply>
      _instance;
} _TxnReadyReply_default_instance_;
class InitWlDoneRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitWlDoneRequest>
      _instance;
} _InitWlDoneRequest_default_instance_;
class InitWlDoneReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitWlDoneReply>
      _instance;
} _InitWlDoneReply_default_instance_;
class Mess_RowItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mess_RowItem>
      _instance;
} _Mess_RowItem_default_instance_;
class Mess_TxnRowManDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mess_TxnRowMan>
      _instance;
} _Mess_TxnRowMan_default_instance_;
class GetRowRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRowRequest>
      _instance;
} _GetRowRequest_default_instance_;
class GetRowReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRowReply>
      _instance;
} _GetRowReply_default_instance_;
class ReturnRowRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReturnRowRequest>
      _instance;
} _ReturnRowRequest_default_instance_;
class ReturnRowReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReturnRowReply>
      _instance;
} _ReturnRowReply_default_instance_;
class SetWlSimDoneRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetWlSimDoneRequest>
      _instance;
} _SetWlSimDoneRequest_default_instance_;
class SetWlSimDoneReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetWlSimDoneReply>
      _instance;
} _SetWlSimDoneReply_default_instance_;
class GetWlSimDoneRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetWlSimDoneRequest>
      _instance;
} _GetWlSimDoneRequest_default_instance_;
class GetWlSimDoneReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetWlSimDoneReply>
      _instance;
} _GetWlSimDoneReply_default_instance_;
class SetTsReadyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetTsReadyRequest>
      _instance;
} _SetTsReadyRequest_default_instance_;
class SetTsReadyReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetTsReadyReply>
      _instance;
} _SetTsReadyReply_default_instance_;
class GetNextTsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNextTsRequest>
      _instance;
} _GetNextTsRequest_default_instance_;
class GetNextTsReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetNextTsReply>
      _instance;
} _GetNextTsReply_default_instance_;
class AddTsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddTsRequest>
      _instance;
} _AddTsRequest_default_instance_;
class AddTsReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddTsReply>
      _instance;
} _AddTsReply_default_instance_;
class GetAndAddTsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetAndAddTsRequest>
      _instance;
} _GetAndAddTsRequest_default_instance_;
class GetAndAddTsReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetAndAddTsReply>
      _instance;
} _GetAndAddTsReply_default_instance_;
class TestRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestRequest>
      _instance;
} _TestRequest_default_instance_;
class TestReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestReply>
      _instance;
} _TestReply_default_instance_;
class ThreadDoneRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ThreadDoneRequest>
      _instance;
} _ThreadDoneRequest_default_instance_;
class ThreadDoneReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ThreadDoneReply>
      _instance;
} _ThreadDoneReply_default_instance_;
class GetRowSizeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRowSizeRequest>
      _instance;
} _GetRowSizeRequest_default_instance_;
class GetRowSizeReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRowSizeReply>
      _instance;
} _GetRowSizeReply_default_instance_;
}  // namespace dbx1000
namespace protobuf_api_2eproto {
static void InitDefaultsTxnReadyRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_TxnReadyRequest_default_instance_;
    new (ptr) ::dbx1000::TxnReadyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::TxnReadyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TxnReadyRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTxnReadyRequest}, {}};

static void InitDefaultsTxnReadyReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_TxnReadyReply_default_instance_;
    new (ptr) ::dbx1000::TxnReadyReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::TxnReadyReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TxnReadyReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTxnReadyReply}, {}};

static void InitDefaultsInitWlDoneRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_InitWlDoneRequest_default_instance_;
    new (ptr) ::dbx1000::InitWlDoneRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::InitWlDoneRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InitWlDoneRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInitWlDoneRequest}, {}};

static void InitDefaultsInitWlDoneReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_InitWlDoneReply_default_instance_;
    new (ptr) ::dbx1000::InitWlDoneReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::InitWlDoneReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InitWlDoneReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInitWlDoneReply}, {}};

static void InitDefaultsMess_RowItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_Mess_RowItem_default_instance_;
    new (ptr) ::dbx1000::Mess_RowItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::Mess_RowItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mess_RowItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMess_RowItem}, {}};

static void InitDefaultsMess_TxnRowMan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_Mess_TxnRowMan_default_instance_;
    new (ptr) ::dbx1000::Mess_TxnRowMan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::Mess_TxnRowMan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Mess_TxnRowMan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMess_TxnRowMan}, {
      &protobuf_api_2eproto::scc_info_Mess_RowItem.base,}};

static void InitDefaultsGetRowRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GetRowRequest_default_instance_;
    new (ptr) ::dbx1000::GetRowRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GetRowRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetRowRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetRowRequest}, {
      &protobuf_api_2eproto::scc_info_Mess_TxnRowMan.base,}};

static void InitDefaultsGetRowReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GetRowReply_default_instance_;
    new (ptr) ::dbx1000::GetRowReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GetRowReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetRowReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetRowReply}, {}};

static void InitDefaultsReturnRowRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_ReturnRowRequest_default_instance_;
    new (ptr) ::dbx1000::ReturnRowRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::ReturnRowRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReturnRowRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReturnRowRequest}, {
      &protobuf_api_2eproto::scc_info_Mess_TxnRowMan.base,}};

static void InitDefaultsReturnRowReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_ReturnRowReply_default_instance_;
    new (ptr) ::dbx1000::ReturnRowReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::ReturnRowReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReturnRowReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReturnRowReply}, {}};

static void InitDefaultsSetWlSimDoneRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_SetWlSimDoneRequest_default_instance_;
    new (ptr) ::dbx1000::SetWlSimDoneRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::SetWlSimDoneRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetWlSimDoneRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetWlSimDoneRequest}, {}};

static void InitDefaultsSetWlSimDoneReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_SetWlSimDoneReply_default_instance_;
    new (ptr) ::dbx1000::SetWlSimDoneReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::SetWlSimDoneReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetWlSimDoneReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetWlSimDoneReply}, {}};

static void InitDefaultsGetWlSimDoneRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GetWlSimDoneRequest_default_instance_;
    new (ptr) ::dbx1000::GetWlSimDoneRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GetWlSimDoneRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetWlSimDoneRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetWlSimDoneRequest}, {}};

static void InitDefaultsGetWlSimDoneReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GetWlSimDoneReply_default_instance_;
    new (ptr) ::dbx1000::GetWlSimDoneReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GetWlSimDoneReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetWlSimDoneReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetWlSimDoneReply}, {}};

static void InitDefaultsSetTsReadyRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_SetTsReadyRequest_default_instance_;
    new (ptr) ::dbx1000::SetTsReadyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::SetTsReadyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetTsReadyRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetTsReadyRequest}, {
      &protobuf_api_2eproto::scc_info_Mess_RowItem.base,}};

static void InitDefaultsSetTsReadyReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_SetTsReadyReply_default_instance_;
    new (ptr) ::dbx1000::SetTsReadyReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::SetTsReadyReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetTsReadyReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetTsReadyReply}, {}};

static void InitDefaultsGetNextTsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GetNextTsRequest_default_instance_;
    new (ptr) ::dbx1000::GetNextTsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GetNextTsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetNextTsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetNextTsRequest}, {}};

static void InitDefaultsGetNextTsReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GetNextTsReply_default_instance_;
    new (ptr) ::dbx1000::GetNextTsReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GetNextTsReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetNextTsReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetNextTsReply}, {}};

static void InitDefaultsAddTsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_AddTsRequest_default_instance_;
    new (ptr) ::dbx1000::AddTsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::AddTsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddTsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddTsRequest}, {}};

static void InitDefaultsAddTsReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_AddTsReply_default_instance_;
    new (ptr) ::dbx1000::AddTsReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::AddTsReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddTsReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddTsReply}, {}};

static void InitDefaultsGetAndAddTsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GetAndAddTsRequest_default_instance_;
    new (ptr) ::dbx1000::GetAndAddTsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GetAndAddTsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetAndAddTsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetAndAddTsRequest}, {}};

static void InitDefaultsGetAndAddTsReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GetAndAddTsReply_default_instance_;
    new (ptr) ::dbx1000::GetAndAddTsReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GetAndAddTsReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetAndAddTsReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetAndAddTsReply}, {}};

static void InitDefaultsTestRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_TestRequest_default_instance_;
    new (ptr) ::dbx1000::TestRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::TestRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestRequest}, {}};

static void InitDefaultsTestReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_TestReply_default_instance_;
    new (ptr) ::dbx1000::TestReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::TestReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TestReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestReply}, {}};

static void InitDefaultsThreadDoneRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_ThreadDoneRequest_default_instance_;
    new (ptr) ::dbx1000::ThreadDoneRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::ThreadDoneRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ThreadDoneRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsThreadDoneRequest}, {}};

static void InitDefaultsThreadDoneReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_ThreadDoneReply_default_instance_;
    new (ptr) ::dbx1000::ThreadDoneReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::ThreadDoneReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ThreadDoneReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsThreadDoneReply}, {}};

static void InitDefaultsGetRowSizeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GetRowSizeRequest_default_instance_;
    new (ptr) ::dbx1000::GetRowSizeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GetRowSizeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetRowSizeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetRowSizeRequest}, {}};

static void InitDefaultsGetRowSizeReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_GetRowSizeReply_default_instance_;
    new (ptr) ::dbx1000::GetRowSizeReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::GetRowSizeReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetRowSizeReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetRowSizeReply}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TxnReadyRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TxnReadyReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InitWlDoneRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InitWlDoneReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mess_RowItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mess_TxnRowMan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRowRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRowReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReturnRowRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReturnRowReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetWlSimDoneRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetWlSimDoneReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetWlSimDoneRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetWlSimDoneReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetTsReadyRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetTsReadyReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetNextTsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetNextTsReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddTsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddTsReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetAndAddTsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetAndAddTsReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ThreadDoneRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ThreadDoneReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRowSizeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRowSizeReply.base);
}

::google::protobuf::Metadata file_level_metadata[28];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::TxnReadyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::TxnReadyRequest, thread_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::TxnReadyRequest, thread_host_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::TxnReadyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::InitWlDoneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::InitWlDoneReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::InitWlDoneReply, is_done_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::Mess_RowItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::Mess_RowItem, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::Mess_RowItem, row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::Mess_RowItem, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::Mess_TxnRowMan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::Mess_TxnRowMan, thread_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::Mess_TxnRowMan, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::Mess_TxnRowMan, ts_ready_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::Mess_TxnRowMan, cur_row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::Mess_TxnRowMan, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetRowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetRowRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetRowRequest, ts_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetRowRequest, txnman_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetRowReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetRowReply, rc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetRowReply, row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetRowReply, run_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReturnRowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReturnRowRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReturnRowRequest, ts_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReturnRowRequest, txnman_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReturnRowReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReturnRowReply, run_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::SetWlSimDoneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::SetWlSimDoneReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetWlSimDoneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetWlSimDoneReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetWlSimDoneReply, sim_done_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::SetTsReadyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::SetTsReadyRequest, thread_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::SetTsReadyRequest, cur_row_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::SetTsReadyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetNextTsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetNextTsRequest, thread_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetNextTsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetNextTsReply, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetNextTsReply, run_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::AddTsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::AddTsRequest, thread_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::AddTsRequest, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::AddTsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::AddTsReply, run_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetAndAddTsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetAndAddTsRequest, thread_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetAndAddTsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetAndAddTsReply, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetAndAddTsReply, run_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::TestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::TestReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ThreadDoneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ThreadDoneRequest, thread_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ThreadDoneReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetRowSizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetRowSizeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::GetRowSizeReply, row_size_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dbx1000::TxnReadyRequest)},
  { 7, -1, sizeof(::dbx1000::TxnReadyReply)},
  { 12, -1, sizeof(::dbx1000::InitWlDoneRequest)},
  { 17, -1, sizeof(::dbx1000::InitWlDoneReply)},
  { 23, -1, sizeof(::dbx1000::Mess_RowItem)},
  { 31, -1, sizeof(::dbx1000::Mess_TxnRowMan)},
  { 41, -1, sizeof(::dbx1000::GetRowRequest)},
  { 49, -1, sizeof(::dbx1000::GetRowReply)},
  { 57, -1, sizeof(::dbx1000::ReturnRowRequest)},
  { 65, -1, sizeof(::dbx1000::ReturnRowReply)},
  { 71, -1, sizeof(::dbx1000::SetWlSimDoneRequest)},
  { 76, -1, sizeof(::dbx1000::SetWlSimDoneReply)},
  { 81, -1, sizeof(::dbx1000::GetWlSimDoneRequest)},
  { 86, -1, sizeof(::dbx1000::GetWlSimDoneReply)},
  { 92, -1, sizeof(::dbx1000::SetTsReadyRequest)},
  { 99, -1, sizeof(::dbx1000::SetTsReadyReply)},
  { 104, -1, sizeof(::dbx1000::GetNextTsRequest)},
  { 110, -1, sizeof(::dbx1000::GetNextTsReply)},
  { 117, -1, sizeof(::dbx1000::AddTsRequest)},
  { 124, -1, sizeof(::dbx1000::AddTsReply)},
  { 130, -1, sizeof(::dbx1000::GetAndAddTsRequest)},
  { 136, -1, sizeof(::dbx1000::GetAndAddTsReply)},
  { 143, -1, sizeof(::dbx1000::TestRequest)},
  { 148, -1, sizeof(::dbx1000::TestReply)},
  { 153, -1, sizeof(::dbx1000::ThreadDoneRequest)},
  { 159, -1, sizeof(::dbx1000::ThreadDoneReply)},
  { 164, -1, sizeof(::dbx1000::GetRowSizeRequest)},
  { 169, -1, sizeof(::dbx1000::GetRowSizeReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_TxnReadyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_TxnReadyReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_InitWlDoneRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_InitWlDoneReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_Mess_RowItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_Mess_TxnRowMan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_GetRowRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_GetRowReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_ReturnRowRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_ReturnRowReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_SetWlSimDoneRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_SetWlSimDoneReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_GetWlSimDoneRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_GetWlSimDoneReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_SetTsReadyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_SetTsReadyReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_GetNextTsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_GetNextTsReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_AddTsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_AddTsReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_GetAndAddTsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_GetAndAddTsReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_TestRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_TestReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_ThreadDoneRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_ThreadDoneReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_GetRowSizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_GetRowSizeReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "api.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 28);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tapi.proto\022\007dbx1000\"9\n\017TxnReadyRequest\022"
      "\021\n\tthread_id\030\001 \001(\004\022\023\n\013thread_host\030\002 \001(\t\""
      "\017\n\rTxnReadyReply\"\023\n\021InitWlDoneRequest\"\"\n"
      "\017InitWlDoneReply\022\017\n\007is_done\030\001 \001(\010\"6\n\014Mes"
      "s_RowItem\022\013\n\003key\030\001 \001(\004\022\013\n\003row\030\002 \001(\014\022\014\n\004s"
      "ize\030\003 \001(\004\"\200\001\n\016Mess_TxnRowMan\022\021\n\tthread_i"
      "d\030\001 \001(\004\022\016\n\006txn_id\030\002 \001(\004\022\020\n\010ts_ready\030\003 \001("
      "\010\022&\n\007cur_row\030\004 \001(\0132\025.dbx1000.Mess_RowIte"
      "m\022\021\n\ttimestamp\030\005 \001(\004\"V\n\rGetRowRequest\022\013\n"
      "\003key\030\001 \001(\004\022\017\n\007ts_type\030\002 \001(\005\022\'\n\006txnman\030\003 "
      "\001(\0132\027.dbx1000.Mess_TxnRowMan\"8\n\013GetRowRe"
      "ply\022\n\n\002rc\030\001 \001(\005\022\013\n\003row\030\002 \001(\014\022\020\n\010run_time"
      "\030\003 \001(\004\"Y\n\020ReturnRowRequest\022\013\n\003key\030\001 \001(\004\022"
      "\017\n\007ts_type\030\002 \001(\005\022\'\n\006txnman\030\003 \001(\0132\027.dbx10"
      "00.Mess_TxnRowMan\"\"\n\016ReturnRowReply\022\020\n\010r"
      "un_time\030\001 \001(\004\"\025\n\023SetWlSimDoneRequest\"\023\n\021"
      "SetWlSimDoneReply\"\025\n\023GetWlSimDoneRequest"
      "\"%\n\021GetWlSimDoneReply\022\020\n\010sim_done\030\001 \001(\010\""
      "N\n\021SetTsReadyRequest\022\021\n\tthread_id\030\001 \001(\004\022"
      "&\n\007cur_row\030\002 \001(\0132\025.dbx1000.Mess_RowItem\""
      "\021\n\017SetTsReadyReply\"%\n\020GetNextTsRequest\022\021"
      "\n\tthread_id\030\001 \001(\004\"5\n\016GetNextTsReply\022\021\n\tt"
      "imestamp\030\001 \001(\004\022\020\n\010run_time\030\002 \001(\004\"4\n\014AddT"
      "sRequest\022\021\n\tthread_id\030\001 \001(\004\022\021\n\ttimestamp"
      "\030\002 \001(\004\"\036\n\nAddTsReply\022\020\n\010run_time\030\001 \001(\004\"\'"
      "\n\022GetAndAddTsRequest\022\021\n\tthread_id\030\001 \001(\004\""
      "7\n\020GetAndAddTsReply\022\021\n\ttimestamp\030\001 \001(\004\022\020"
      "\n\010run_time\030\002 \001(\004\"\r\n\013TestRequest\"\013\n\tTestR"
      "eply\"&\n\021ThreadDoneRequest\022\021\n\tthread_id\030\001"
      " \001(\004\"\021\n\017ThreadDoneReply\"\023\n\021GetRowSizeReq"
      "uest\"#\n\017GetRowSizeReply\022\020\n\010row_size\030\001 \001("
      "\0042\364\006\n\016DBx1000Service\022>\n\010TxnReady\022\030.dbx10"
      "00.TxnReadyRequest\032\026.dbx1000.TxnReadyRep"
      "ly\"\000\022D\n\nInitWlDone\022\032.dbx1000.InitWlDoneR"
      "equest\032\030.dbx1000.InitWlDoneReply\"\000\022D\n\nGe"
      "tRowSize\022\032.dbx1000.GetRowSizeRequest\032\030.d"
      "bx1000.GetRowSizeReply\"\000\0228\n\006GetRow\022\026.dbx"
      "1000.GetRowRequest\032\024.dbx1000.GetRowReply"
      "\"\000\022A\n\tReturnRow\022\031.dbx1000.ReturnRowReque"
      "st\032\027.dbx1000.ReturnRowReply\"\000\022J\n\014SetWlSi"
      "mDone\022\034.dbx1000.SetWlSimDoneRequest\032\032.db"
      "x1000.SetWlSimDoneReply\"\000\022J\n\014GetWlSimDon"
      "e\022\034.dbx1000.GetWlSimDoneRequest\032\032.dbx100"
      "0.GetWlSimDoneReply\"\000\022A\n\tGetNextTs\022\031.dbx"
      "1000.GetNextTsRequest\032\027.dbx1000.GetNextT"
      "sReply\"\000\0225\n\005AddTs\022\025.dbx1000.AddTsRequest"
      "\032\023.dbx1000.AddTsReply\"\000\022G\n\013GetAndAddTs\022\033"
      ".dbx1000.GetAndAddTsRequest\032\031.dbx1000.Ge"
      "tAndAddTsReply\"\000\022D\n\nThreadDone\022\032.dbx1000"
      ".ThreadDoneRequest\032\030.dbx1000.ThreadDoneR"
      "eply\"\000\022D\n\nSetTsReady\022\032.dbx1000.SetTsRead"
      "yRequest\032\030.dbx1000.SetTsReadyReply\"\000\0222\n\004"
      "Test\022\024.dbx1000.TestRequest\032\022.dbx1000.Tes"
      "tReply\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2136);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2eproto
namespace dbx1000 {

// ===================================================================

void TxnReadyRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnReadyRequest::kThreadIdFieldNumber;
const int TxnReadyRequest::kThreadHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnReadyRequest::TxnReadyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_TxnReadyRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.TxnReadyRequest)
}
TxnReadyRequest::TxnReadyRequest(const TxnReadyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thread_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.thread_host().size() > 0) {
    thread_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thread_host_);
  }
  thread_id_ = from.thread_id_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.TxnReadyRequest)
}

void TxnReadyRequest::SharedCtor() {
  thread_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thread_id_ = GOOGLE_ULONGLONG(0);
}

TxnReadyRequest::~TxnReadyRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.TxnReadyRequest)
  SharedDtor();
}

void TxnReadyRequest::SharedDtor() {
  thread_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TxnReadyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TxnReadyRequest::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxnReadyRequest& TxnReadyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_TxnReadyRequest.base);
  return *internal_default_instance();
}


void TxnReadyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.TxnReadyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thread_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thread_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool TxnReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.TxnReadyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 thread_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string thread_host = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thread_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->thread_host().data(), static_cast<int>(this->thread_host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dbx1000.TxnReadyRequest.thread_host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.TxnReadyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.TxnReadyRequest)
  return false;
#undef DO_
}

void TxnReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.TxnReadyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->thread_id(), output);
  }

  // string thread_host = 2;
  if (this->thread_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thread_host().data(), static_cast<int>(this->thread_host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dbx1000.TxnReadyRequest.thread_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->thread_host(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.TxnReadyRequest)
}

::google::protobuf::uint8* TxnReadyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.TxnReadyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->thread_id(), target);
  }

  // string thread_host = 2;
  if (this->thread_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thread_host().data(), static_cast<int>(this->thread_host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dbx1000.TxnReadyRequest.thread_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->thread_host(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.TxnReadyRequest)
  return target;
}

size_t TxnReadyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.TxnReadyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string thread_host = 2;
  if (this->thread_host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thread_host());
  }

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->thread_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxnReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.TxnReadyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TxnReadyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxnReadyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.TxnReadyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.TxnReadyRequest)
    MergeFrom(*source);
  }
}

void TxnReadyRequest::MergeFrom(const TxnReadyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.TxnReadyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.thread_host().size() > 0) {

    thread_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thread_host_);
  }
  if (from.thread_id() != 0) {
    set_thread_id(from.thread_id());
  }
}

void TxnReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.TxnReadyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnReadyRequest::CopyFrom(const TxnReadyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.TxnReadyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnReadyRequest::IsInitialized() const {
  return true;
}

void TxnReadyRequest::Swap(TxnReadyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnReadyRequest::InternalSwap(TxnReadyRequest* other) {
  using std::swap;
  thread_host_.Swap(&other->thread_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(thread_id_, other->thread_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TxnReadyRequest::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TxnReadyReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnReadyReply::TxnReadyReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_TxnReadyReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.TxnReadyReply)
}
TxnReadyReply::TxnReadyReply(const TxnReadyReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.TxnReadyReply)
}

void TxnReadyReply::SharedCtor() {
}

TxnReadyReply::~TxnReadyReply() {
  // @@protoc_insertion_point(destructor:dbx1000.TxnReadyReply)
  SharedDtor();
}

void TxnReadyReply::SharedDtor() {
}

void TxnReadyReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TxnReadyReply::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxnReadyReply& TxnReadyReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_TxnReadyReply.base);
  return *internal_default_instance();
}


void TxnReadyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.TxnReadyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TxnReadyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.TxnReadyReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.TxnReadyReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.TxnReadyReply)
  return false;
#undef DO_
}

void TxnReadyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.TxnReadyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.TxnReadyReply)
}

::google::protobuf::uint8* TxnReadyReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.TxnReadyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.TxnReadyReply)
  return target;
}

size_t TxnReadyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.TxnReadyReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxnReadyReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.TxnReadyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TxnReadyReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxnReadyReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.TxnReadyReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.TxnReadyReply)
    MergeFrom(*source);
  }
}

void TxnReadyReply::MergeFrom(const TxnReadyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.TxnReadyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TxnReadyReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.TxnReadyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnReadyReply::CopyFrom(const TxnReadyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.TxnReadyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnReadyReply::IsInitialized() const {
  return true;
}

void TxnReadyReply::Swap(TxnReadyReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnReadyReply::InternalSwap(TxnReadyReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TxnReadyReply::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InitWlDoneRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitWlDoneRequest::InitWlDoneRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_InitWlDoneRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.InitWlDoneRequest)
}
InitWlDoneRequest::InitWlDoneRequest(const InitWlDoneRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.InitWlDoneRequest)
}

void InitWlDoneRequest::SharedCtor() {
}

InitWlDoneRequest::~InitWlDoneRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.InitWlDoneRequest)
  SharedDtor();
}

void InitWlDoneRequest::SharedDtor() {
}

void InitWlDoneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InitWlDoneRequest::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitWlDoneRequest& InitWlDoneRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_InitWlDoneRequest.base);
  return *internal_default_instance();
}


void InitWlDoneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.InitWlDoneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool InitWlDoneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.InitWlDoneRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.InitWlDoneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.InitWlDoneRequest)
  return false;
#undef DO_
}

void InitWlDoneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.InitWlDoneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.InitWlDoneRequest)
}

::google::protobuf::uint8* InitWlDoneRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.InitWlDoneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.InitWlDoneRequest)
  return target;
}

size_t InitWlDoneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.InitWlDoneRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitWlDoneRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.InitWlDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InitWlDoneRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitWlDoneRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.InitWlDoneRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.InitWlDoneRequest)
    MergeFrom(*source);
  }
}

void InitWlDoneRequest::MergeFrom(const InitWlDoneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.InitWlDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InitWlDoneRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.InitWlDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitWlDoneRequest::CopyFrom(const InitWlDoneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.InitWlDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitWlDoneRequest::IsInitialized() const {
  return true;
}

void InitWlDoneRequest::Swap(InitWlDoneRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitWlDoneRequest::InternalSwap(InitWlDoneRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InitWlDoneRequest::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InitWlDoneReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitWlDoneReply::kIsDoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitWlDoneReply::InitWlDoneReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_InitWlDoneReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.InitWlDoneReply)
}
InitWlDoneReply::InitWlDoneReply(const InitWlDoneReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_done_ = from.is_done_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.InitWlDoneReply)
}

void InitWlDoneReply::SharedCtor() {
  is_done_ = false;
}

InitWlDoneReply::~InitWlDoneReply() {
  // @@protoc_insertion_point(destructor:dbx1000.InitWlDoneReply)
  SharedDtor();
}

void InitWlDoneReply::SharedDtor() {
}

void InitWlDoneReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InitWlDoneReply::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitWlDoneReply& InitWlDoneReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_InitWlDoneReply.base);
  return *internal_default_instance();
}


void InitWlDoneReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.InitWlDoneReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_done_ = false;
  _internal_metadata_.Clear();
}

bool InitWlDoneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.InitWlDoneReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_done = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.InitWlDoneReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.InitWlDoneReply)
  return false;
#undef DO_
}

void InitWlDoneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.InitWlDoneReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_done = 1;
  if (this->is_done() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_done(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.InitWlDoneReply)
}

::google::protobuf::uint8* InitWlDoneReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.InitWlDoneReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_done = 1;
  if (this->is_done() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_done(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.InitWlDoneReply)
  return target;
}

size_t InitWlDoneReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.InitWlDoneReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_done = 1;
  if (this->is_done() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitWlDoneReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.InitWlDoneReply)
  GOOGLE_DCHECK_NE(&from, this);
  const InitWlDoneReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitWlDoneReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.InitWlDoneReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.InitWlDoneReply)
    MergeFrom(*source);
  }
}

void InitWlDoneReply::MergeFrom(const InitWlDoneReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.InitWlDoneReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_done() != 0) {
    set_is_done(from.is_done());
  }
}

void InitWlDoneReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.InitWlDoneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitWlDoneReply::CopyFrom(const InitWlDoneReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.InitWlDoneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitWlDoneReply::IsInitialized() const {
  return true;
}

void InitWlDoneReply::Swap(InitWlDoneReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitWlDoneReply::InternalSwap(InitWlDoneReply* other) {
  using std::swap;
  swap(is_done_, other->is_done_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InitWlDoneReply::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Mess_RowItem::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mess_RowItem::kKeyFieldNumber;
const int Mess_RowItem::kRowFieldNumber;
const int Mess_RowItem::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mess_RowItem::Mess_RowItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_Mess_RowItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.Mess_RowItem)
}
Mess_RowItem::Mess_RowItem(const Mess_RowItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.row().size() > 0) {
    row_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&key_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.Mess_RowItem)
}

void Mess_RowItem::SharedCtor() {
  row_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&key_)) + sizeof(size_));
}

Mess_RowItem::~Mess_RowItem() {
  // @@protoc_insertion_point(destructor:dbx1000.Mess_RowItem)
  SharedDtor();
}

void Mess_RowItem::SharedDtor() {
  row_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mess_RowItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Mess_RowItem::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mess_RowItem& Mess_RowItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_Mess_RowItem.base);
  return *internal_default_instance();
}


void Mess_RowItem::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.Mess_RowItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&key_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool Mess_RowItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.Mess_RowItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes row = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.Mess_RowItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.Mess_RowItem)
  return false;
#undef DO_
}

void Mess_RowItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.Mess_RowItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // bytes row = 2;
  if (this->row().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row(), output);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.Mess_RowItem)
}

::google::protobuf::uint8* Mess_RowItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.Mess_RowItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // bytes row = 2;
  if (this->row().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row(), target);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.Mess_RowItem)
  return target;
}

size_t Mess_RowItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.Mess_RowItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes row = 2;
  if (this->row().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row());
  }

  // uint64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->key());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mess_RowItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.Mess_RowItem)
  GOOGLE_DCHECK_NE(&from, this);
  const Mess_RowItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mess_RowItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.Mess_RowItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.Mess_RowItem)
    MergeFrom(*source);
  }
}

void Mess_RowItem::MergeFrom(const Mess_RowItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.Mess_RowItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row().size() > 0) {

    row_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void Mess_RowItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.Mess_RowItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mess_RowItem::CopyFrom(const Mess_RowItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.Mess_RowItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mess_RowItem::IsInitialized() const {
  return true;
}

void Mess_RowItem::Swap(Mess_RowItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mess_RowItem::InternalSwap(Mess_RowItem* other) {
  using std::swap;
  row_.Swap(&other->row_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_, other->key_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mess_RowItem::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Mess_TxnRowMan::InitAsDefaultInstance() {
  ::dbx1000::_Mess_TxnRowMan_default_instance_._instance.get_mutable()->cur_row_ = const_cast< ::dbx1000::Mess_RowItem*>(
      ::dbx1000::Mess_RowItem::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mess_TxnRowMan::kThreadIdFieldNumber;
const int Mess_TxnRowMan::kTxnIdFieldNumber;
const int Mess_TxnRowMan::kTsReadyFieldNumber;
const int Mess_TxnRowMan::kCurRowFieldNumber;
const int Mess_TxnRowMan::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mess_TxnRowMan::Mess_TxnRowMan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_Mess_TxnRowMan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.Mess_TxnRowMan)
}
Mess_TxnRowMan::Mess_TxnRowMan(const Mess_TxnRowMan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cur_row()) {
    cur_row_ = new ::dbx1000::Mess_RowItem(*from.cur_row_);
  } else {
    cur_row_ = NULL;
  }
  ::memcpy(&thread_id_, &from.thread_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_ready_) -
    reinterpret_cast<char*>(&thread_id_)) + sizeof(ts_ready_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.Mess_TxnRowMan)
}

void Mess_TxnRowMan::SharedCtor() {
  ::memset(&cur_row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_ready_) -
      reinterpret_cast<char*>(&cur_row_)) + sizeof(ts_ready_));
}

Mess_TxnRowMan::~Mess_TxnRowMan() {
  // @@protoc_insertion_point(destructor:dbx1000.Mess_TxnRowMan)
  SharedDtor();
}

void Mess_TxnRowMan::SharedDtor() {
  if (this != internal_default_instance()) delete cur_row_;
}

void Mess_TxnRowMan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Mess_TxnRowMan::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mess_TxnRowMan& Mess_TxnRowMan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_Mess_TxnRowMan.base);
  return *internal_default_instance();
}


void Mess_TxnRowMan::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.Mess_TxnRowMan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cur_row_ != NULL) {
    delete cur_row_;
  }
  cur_row_ = NULL;
  ::memset(&thread_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_ready_) -
      reinterpret_cast<char*>(&thread_id_)) + sizeof(ts_ready_));
  _internal_metadata_.Clear();
}

bool Mess_TxnRowMan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.Mess_TxnRowMan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 thread_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 txn_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ts_ready = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ts_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dbx1000.Mess_RowItem cur_row = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cur_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.Mess_TxnRowMan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.Mess_TxnRowMan)
  return false;
#undef DO_
}

void Mess_TxnRowMan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.Mess_TxnRowMan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->thread_id(), output);
  }

  // uint64 txn_id = 2;
  if (this->txn_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->txn_id(), output);
  }

  // bool ts_ready = 3;
  if (this->ts_ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ts_ready(), output);
  }

  // .dbx1000.Mess_RowItem cur_row = 4;
  if (this->has_cur_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_cur_row(), output);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.Mess_TxnRowMan)
}

::google::protobuf::uint8* Mess_TxnRowMan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.Mess_TxnRowMan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->thread_id(), target);
  }

  // uint64 txn_id = 2;
  if (this->txn_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->txn_id(), target);
  }

  // bool ts_ready = 3;
  if (this->ts_ready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ts_ready(), target);
  }

  // .dbx1000.Mess_RowItem cur_row = 4;
  if (this->has_cur_row()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_cur_row(), deterministic, target);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.Mess_TxnRowMan)
  return target;
}

size_t Mess_TxnRowMan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.Mess_TxnRowMan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dbx1000.Mess_RowItem cur_row = 4;
  if (this->has_cur_row()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cur_row_);
  }

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->thread_id());
  }

  // uint64 txn_id = 2;
  if (this->txn_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->txn_id());
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // bool ts_ready = 3;
  if (this->ts_ready() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mess_TxnRowMan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.Mess_TxnRowMan)
  GOOGLE_DCHECK_NE(&from, this);
  const Mess_TxnRowMan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mess_TxnRowMan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.Mess_TxnRowMan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.Mess_TxnRowMan)
    MergeFrom(*source);
  }
}

void Mess_TxnRowMan::MergeFrom(const Mess_TxnRowMan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.Mess_TxnRowMan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cur_row()) {
    mutable_cur_row()->::dbx1000::Mess_RowItem::MergeFrom(from.cur_row());
  }
  if (from.thread_id() != 0) {
    set_thread_id(from.thread_id());
  }
  if (from.txn_id() != 0) {
    set_txn_id(from.txn_id());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.ts_ready() != 0) {
    set_ts_ready(from.ts_ready());
  }
}

void Mess_TxnRowMan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.Mess_TxnRowMan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mess_TxnRowMan::CopyFrom(const Mess_TxnRowMan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.Mess_TxnRowMan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mess_TxnRowMan::IsInitialized() const {
  return true;
}

void Mess_TxnRowMan::Swap(Mess_TxnRowMan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mess_TxnRowMan::InternalSwap(Mess_TxnRowMan* other) {
  using std::swap;
  swap(cur_row_, other->cur_row_);
  swap(thread_id_, other->thread_id_);
  swap(txn_id_, other->txn_id_);
  swap(timestamp_, other->timestamp_);
  swap(ts_ready_, other->ts_ready_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mess_TxnRowMan::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRowRequest::InitAsDefaultInstance() {
  ::dbx1000::_GetRowRequest_default_instance_._instance.get_mutable()->txnman_ = const_cast< ::dbx1000::Mess_TxnRowMan*>(
      ::dbx1000::Mess_TxnRowMan::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRowRequest::kKeyFieldNumber;
const int GetRowRequest::kTsTypeFieldNumber;
const int GetRowRequest::kTxnmanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRowRequest::GetRowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_GetRowRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.GetRowRequest)
}
GetRowRequest::GetRowRequest(const GetRowRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_txnman()) {
    txnman_ = new ::dbx1000::Mess_TxnRowMan(*from.txnman_);
  } else {
    txnman_ = NULL;
  }
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_type_) -
    reinterpret_cast<char*>(&key_)) + sizeof(ts_type_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.GetRowRequest)
}

void GetRowRequest::SharedCtor() {
  ::memset(&txnman_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_type_) -
      reinterpret_cast<char*>(&txnman_)) + sizeof(ts_type_));
}

GetRowRequest::~GetRowRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.GetRowRequest)
  SharedDtor();
}

void GetRowRequest::SharedDtor() {
  if (this != internal_default_instance()) delete txnman_;
}

void GetRowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetRowRequest::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRowRequest& GetRowRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_GetRowRequest.base);
  return *internal_default_instance();
}


void GetRowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GetRowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && txnman_ != NULL) {
    delete txnman_;
  }
  txnman_ = NULL;
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_type_) -
      reinterpret_cast<char*>(&key_)) + sizeof(ts_type_));
  _internal_metadata_.Clear();
}

bool GetRowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.GetRowRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ts_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dbx1000.Mess_TxnRowMan txnman = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txnman()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.GetRowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.GetRowRequest)
  return false;
#undef DO_
}

void GetRowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.GetRowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // int32 ts_type = 2;
  if (this->ts_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ts_type(), output);
  }

  // .dbx1000.Mess_TxnRowMan txnman = 3;
  if (this->has_txnman()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_txnman(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.GetRowRequest)
}

::google::protobuf::uint8* GetRowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GetRowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // int32 ts_type = 2;
  if (this->ts_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ts_type(), target);
  }

  // .dbx1000.Mess_TxnRowMan txnman = 3;
  if (this->has_txnman()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_txnman(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GetRowRequest)
  return target;
}

size_t GetRowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GetRowRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dbx1000.Mess_TxnRowMan txnman = 3;
  if (this->has_txnman()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txnman_);
  }

  // uint64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->key());
  }

  // int32 ts_type = 2;
  if (this->ts_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ts_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GetRowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRowRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GetRowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GetRowRequest)
    MergeFrom(*source);
  }
}

void GetRowRequest::MergeFrom(const GetRowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GetRowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_txnman()) {
    mutable_txnman()->::dbx1000::Mess_TxnRowMan::MergeFrom(from.txnman());
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.ts_type() != 0) {
    set_ts_type(from.ts_type());
  }
}

void GetRowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GetRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRowRequest::CopyFrom(const GetRowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GetRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRowRequest::IsInitialized() const {
  return true;
}

void GetRowRequest::Swap(GetRowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRowRequest::InternalSwap(GetRowRequest* other) {
  using std::swap;
  swap(txnman_, other->txnman_);
  swap(key_, other->key_);
  swap(ts_type_, other->ts_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetRowRequest::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRowReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRowReply::kRcFieldNumber;
const int GetRowReply::kRowFieldNumber;
const int GetRowReply::kRunTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRowReply::GetRowReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_GetRowReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.GetRowReply)
}
GetRowReply::GetRowReply(const GetRowReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.row().size() > 0) {
    row_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  ::memcpy(&run_time_, &from.run_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&rc_) -
    reinterpret_cast<char*>(&run_time_)) + sizeof(rc_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.GetRowReply)
}

void GetRowReply::SharedCtor() {
  row_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&run_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_) -
      reinterpret_cast<char*>(&run_time_)) + sizeof(rc_));
}

GetRowReply::~GetRowReply() {
  // @@protoc_insertion_point(destructor:dbx1000.GetRowReply)
  SharedDtor();
}

void GetRowReply::SharedDtor() {
  row_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetRowReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetRowReply::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRowReply& GetRowReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_GetRowReply.base);
  return *internal_default_instance();
}


void GetRowReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GetRowReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&run_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_) -
      reinterpret_cast<char*>(&run_time_)) + sizeof(rc_));
  _internal_metadata_.Clear();
}

bool GetRowReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.GetRowReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes row = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 run_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &run_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.GetRowReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.GetRowReply)
  return false;
#undef DO_
}

void GetRowReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.GetRowReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rc = 1;
  if (this->rc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rc(), output);
  }

  // bytes row = 2;
  if (this->row().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row(), output);
  }

  // uint64 run_time = 3;
  if (this->run_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->run_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.GetRowReply)
}

::google::protobuf::uint8* GetRowReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GetRowReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rc = 1;
  if (this->rc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rc(), target);
  }

  // bytes row = 2;
  if (this->row().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row(), target);
  }

  // uint64 run_time = 3;
  if (this->run_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->run_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GetRowReply)
  return target;
}

size_t GetRowReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GetRowReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes row = 2;
  if (this->row().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row());
  }

  // uint64 run_time = 3;
  if (this->run_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->run_time());
  }

  // int32 rc = 1;
  if (this->rc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRowReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GetRowReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRowReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRowReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GetRowReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GetRowReply)
    MergeFrom(*source);
  }
}

void GetRowReply::MergeFrom(const GetRowReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GetRowReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row().size() > 0) {

    row_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_);
  }
  if (from.run_time() != 0) {
    set_run_time(from.run_time());
  }
  if (from.rc() != 0) {
    set_rc(from.rc());
  }
}

void GetRowReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GetRowReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRowReply::CopyFrom(const GetRowReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GetRowReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRowReply::IsInitialized() const {
  return true;
}

void GetRowReply::Swap(GetRowReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRowReply::InternalSwap(GetRowReply* other) {
  using std::swap;
  row_.Swap(&other->row_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(run_time_, other->run_time_);
  swap(rc_, other->rc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetRowReply::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReturnRowRequest::InitAsDefaultInstance() {
  ::dbx1000::_ReturnRowRequest_default_instance_._instance.get_mutable()->txnman_ = const_cast< ::dbx1000::Mess_TxnRowMan*>(
      ::dbx1000::Mess_TxnRowMan::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReturnRowRequest::kKeyFieldNumber;
const int ReturnRowRequest::kTsTypeFieldNumber;
const int ReturnRowRequest::kTxnmanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReturnRowRequest::ReturnRowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_ReturnRowRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.ReturnRowRequest)
}
ReturnRowRequest::ReturnRowRequest(const ReturnRowRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_txnman()) {
    txnman_ = new ::dbx1000::Mess_TxnRowMan(*from.txnman_);
  } else {
    txnman_ = NULL;
  }
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_type_) -
    reinterpret_cast<char*>(&key_)) + sizeof(ts_type_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.ReturnRowRequest)
}

void ReturnRowRequest::SharedCtor() {
  ::memset(&txnman_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_type_) -
      reinterpret_cast<char*>(&txnman_)) + sizeof(ts_type_));
}

ReturnRowRequest::~ReturnRowRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.ReturnRowRequest)
  SharedDtor();
}

void ReturnRowRequest::SharedDtor() {
  if (this != internal_default_instance()) delete txnman_;
}

void ReturnRowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReturnRowRequest::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReturnRowRequest& ReturnRowRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_ReturnRowRequest.base);
  return *internal_default_instance();
}


void ReturnRowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.ReturnRowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && txnman_ != NULL) {
    delete txnman_;
  }
  txnman_ = NULL;
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_type_) -
      reinterpret_cast<char*>(&key_)) + sizeof(ts_type_));
  _internal_metadata_.Clear();
}

bool ReturnRowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.ReturnRowRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ts_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dbx1000.Mess_TxnRowMan txnman = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txnman()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.ReturnRowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.ReturnRowRequest)
  return false;
#undef DO_
}

void ReturnRowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.ReturnRowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // int32 ts_type = 2;
  if (this->ts_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ts_type(), output);
  }

  // .dbx1000.Mess_TxnRowMan txnman = 3;
  if (this->has_txnman()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_txnman(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.ReturnRowRequest)
}

::google::protobuf::uint8* ReturnRowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.ReturnRowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // int32 ts_type = 2;
  if (this->ts_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ts_type(), target);
  }

  // .dbx1000.Mess_TxnRowMan txnman = 3;
  if (this->has_txnman()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_txnman(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.ReturnRowRequest)
  return target;
}

size_t ReturnRowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.ReturnRowRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dbx1000.Mess_TxnRowMan txnman = 3;
  if (this->has_txnman()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txnman_);
  }

  // uint64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->key());
  }

  // int32 ts_type = 2;
  if (this->ts_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ts_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReturnRowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.ReturnRowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReturnRowRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReturnRowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.ReturnRowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.ReturnRowRequest)
    MergeFrom(*source);
  }
}

void ReturnRowRequest::MergeFrom(const ReturnRowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.ReturnRowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_txnman()) {
    mutable_txnman()->::dbx1000::Mess_TxnRowMan::MergeFrom(from.txnman());
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.ts_type() != 0) {
    set_ts_type(from.ts_type());
  }
}

void ReturnRowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.ReturnRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnRowRequest::CopyFrom(const ReturnRowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.ReturnRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnRowRequest::IsInitialized() const {
  return true;
}

void ReturnRowRequest::Swap(ReturnRowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReturnRowRequest::InternalSwap(ReturnRowRequest* other) {
  using std::swap;
  swap(txnman_, other->txnman_);
  swap(key_, other->key_);
  swap(ts_type_, other->ts_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReturnRowRequest::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReturnRowReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReturnRowReply::kRunTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReturnRowReply::ReturnRowReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_ReturnRowReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.ReturnRowReply)
}
ReturnRowReply::ReturnRowReply(const ReturnRowReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  run_time_ = from.run_time_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.ReturnRowReply)
}

void ReturnRowReply::SharedCtor() {
  run_time_ = GOOGLE_ULONGLONG(0);
}

ReturnRowReply::~ReturnRowReply() {
  // @@protoc_insertion_point(destructor:dbx1000.ReturnRowReply)
  SharedDtor();
}

void ReturnRowReply::SharedDtor() {
}

void ReturnRowReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReturnRowReply::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReturnRowReply& ReturnRowReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_ReturnRowReply.base);
  return *internal_default_instance();
}


void ReturnRowReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.ReturnRowReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_time_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ReturnRowReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.ReturnRowReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 run_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &run_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.ReturnRowReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.ReturnRowReply)
  return false;
#undef DO_
}

void ReturnRowReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.ReturnRowReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 run_time = 1;
  if (this->run_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->run_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.ReturnRowReply)
}

::google::protobuf::uint8* ReturnRowReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.ReturnRowReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 run_time = 1;
  if (this->run_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->run_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.ReturnRowReply)
  return target;
}

size_t ReturnRowReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.ReturnRowReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 run_time = 1;
  if (this->run_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->run_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReturnRowReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.ReturnRowReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ReturnRowReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReturnRowReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.ReturnRowReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.ReturnRowReply)
    MergeFrom(*source);
  }
}

void ReturnRowReply::MergeFrom(const ReturnRowReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.ReturnRowReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.run_time() != 0) {
    set_run_time(from.run_time());
  }
}

void ReturnRowReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.ReturnRowReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnRowReply::CopyFrom(const ReturnRowReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.ReturnRowReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnRowReply::IsInitialized() const {
  return true;
}

void ReturnRowReply::Swap(ReturnRowReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReturnRowReply::InternalSwap(ReturnRowReply* other) {
  using std::swap;
  swap(run_time_, other->run_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReturnRowReply::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetWlSimDoneRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetWlSimDoneRequest::SetWlSimDoneRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_SetWlSimDoneRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.SetWlSimDoneRequest)
}
SetWlSimDoneRequest::SetWlSimDoneRequest(const SetWlSimDoneRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.SetWlSimDoneRequest)
}

void SetWlSimDoneRequest::SharedCtor() {
}

SetWlSimDoneRequest::~SetWlSimDoneRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.SetWlSimDoneRequest)
  SharedDtor();
}

void SetWlSimDoneRequest::SharedDtor() {
}

void SetWlSimDoneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetWlSimDoneRequest::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetWlSimDoneRequest& SetWlSimDoneRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_SetWlSimDoneRequest.base);
  return *internal_default_instance();
}


void SetWlSimDoneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.SetWlSimDoneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SetWlSimDoneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.SetWlSimDoneRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.SetWlSimDoneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.SetWlSimDoneRequest)
  return false;
#undef DO_
}

void SetWlSimDoneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.SetWlSimDoneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.SetWlSimDoneRequest)
}

::google::protobuf::uint8* SetWlSimDoneRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.SetWlSimDoneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.SetWlSimDoneRequest)
  return target;
}

size_t SetWlSimDoneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.SetWlSimDoneRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetWlSimDoneRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.SetWlSimDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetWlSimDoneRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetWlSimDoneRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.SetWlSimDoneRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.SetWlSimDoneRequest)
    MergeFrom(*source);
  }
}

void SetWlSimDoneRequest::MergeFrom(const SetWlSimDoneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.SetWlSimDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetWlSimDoneRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.SetWlSimDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetWlSimDoneRequest::CopyFrom(const SetWlSimDoneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.SetWlSimDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetWlSimDoneRequest::IsInitialized() const {
  return true;
}

void SetWlSimDoneRequest::Swap(SetWlSimDoneRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetWlSimDoneRequest::InternalSwap(SetWlSimDoneRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetWlSimDoneRequest::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetWlSimDoneReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetWlSimDoneReply::SetWlSimDoneReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_SetWlSimDoneReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.SetWlSimDoneReply)
}
SetWlSimDoneReply::SetWlSimDoneReply(const SetWlSimDoneReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.SetWlSimDoneReply)
}

void SetWlSimDoneReply::SharedCtor() {
}

SetWlSimDoneReply::~SetWlSimDoneReply() {
  // @@protoc_insertion_point(destructor:dbx1000.SetWlSimDoneReply)
  SharedDtor();
}

void SetWlSimDoneReply::SharedDtor() {
}

void SetWlSimDoneReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetWlSimDoneReply::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetWlSimDoneReply& SetWlSimDoneReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_SetWlSimDoneReply.base);
  return *internal_default_instance();
}


void SetWlSimDoneReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.SetWlSimDoneReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SetWlSimDoneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.SetWlSimDoneReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.SetWlSimDoneReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.SetWlSimDoneReply)
  return false;
#undef DO_
}

void SetWlSimDoneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.SetWlSimDoneReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.SetWlSimDoneReply)
}

::google::protobuf::uint8* SetWlSimDoneReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.SetWlSimDoneReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.SetWlSimDoneReply)
  return target;
}

size_t SetWlSimDoneReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.SetWlSimDoneReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetWlSimDoneReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.SetWlSimDoneReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SetWlSimDoneReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetWlSimDoneReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.SetWlSimDoneReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.SetWlSimDoneReply)
    MergeFrom(*source);
  }
}

void SetWlSimDoneReply::MergeFrom(const SetWlSimDoneReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.SetWlSimDoneReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetWlSimDoneReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.SetWlSimDoneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetWlSimDoneReply::CopyFrom(const SetWlSimDoneReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.SetWlSimDoneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetWlSimDoneReply::IsInitialized() const {
  return true;
}

void SetWlSimDoneReply::Swap(SetWlSimDoneReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetWlSimDoneReply::InternalSwap(SetWlSimDoneReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetWlSimDoneReply::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetWlSimDoneRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWlSimDoneRequest::GetWlSimDoneRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_GetWlSimDoneRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.GetWlSimDoneRequest)
}
GetWlSimDoneRequest::GetWlSimDoneRequest(const GetWlSimDoneRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.GetWlSimDoneRequest)
}

void GetWlSimDoneRequest::SharedCtor() {
}

GetWlSimDoneRequest::~GetWlSimDoneRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.GetWlSimDoneRequest)
  SharedDtor();
}

void GetWlSimDoneRequest::SharedDtor() {
}

void GetWlSimDoneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetWlSimDoneRequest::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetWlSimDoneRequest& GetWlSimDoneRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_GetWlSimDoneRequest.base);
  return *internal_default_instance();
}


void GetWlSimDoneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GetWlSimDoneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetWlSimDoneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.GetWlSimDoneRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.GetWlSimDoneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.GetWlSimDoneRequest)
  return false;
#undef DO_
}

void GetWlSimDoneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.GetWlSimDoneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.GetWlSimDoneRequest)
}

::google::protobuf::uint8* GetWlSimDoneRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GetWlSimDoneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GetWlSimDoneRequest)
  return target;
}

size_t GetWlSimDoneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GetWlSimDoneRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWlSimDoneRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GetWlSimDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWlSimDoneRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWlSimDoneRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GetWlSimDoneRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GetWlSimDoneRequest)
    MergeFrom(*source);
  }
}

void GetWlSimDoneRequest::MergeFrom(const GetWlSimDoneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GetWlSimDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetWlSimDoneRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GetWlSimDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWlSimDoneRequest::CopyFrom(const GetWlSimDoneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GetWlSimDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWlSimDoneRequest::IsInitialized() const {
  return true;
}

void GetWlSimDoneRequest::Swap(GetWlSimDoneRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWlSimDoneRequest::InternalSwap(GetWlSimDoneRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetWlSimDoneRequest::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetWlSimDoneReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWlSimDoneReply::kSimDoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWlSimDoneReply::GetWlSimDoneReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_GetWlSimDoneReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.GetWlSimDoneReply)
}
GetWlSimDoneReply::GetWlSimDoneReply(const GetWlSimDoneReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sim_done_ = from.sim_done_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.GetWlSimDoneReply)
}

void GetWlSimDoneReply::SharedCtor() {
  sim_done_ = false;
}

GetWlSimDoneReply::~GetWlSimDoneReply() {
  // @@protoc_insertion_point(destructor:dbx1000.GetWlSimDoneReply)
  SharedDtor();
}

void GetWlSimDoneReply::SharedDtor() {
}

void GetWlSimDoneReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetWlSimDoneReply::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetWlSimDoneReply& GetWlSimDoneReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_GetWlSimDoneReply.base);
  return *internal_default_instance();
}


void GetWlSimDoneReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GetWlSimDoneReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sim_done_ = false;
  _internal_metadata_.Clear();
}

bool GetWlSimDoneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.GetWlSimDoneReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool sim_done = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sim_done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.GetWlSimDoneReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.GetWlSimDoneReply)
  return false;
#undef DO_
}

void GetWlSimDoneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.GetWlSimDoneReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool sim_done = 1;
  if (this->sim_done() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->sim_done(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.GetWlSimDoneReply)
}

::google::protobuf::uint8* GetWlSimDoneReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GetWlSimDoneReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool sim_done = 1;
  if (this->sim_done() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->sim_done(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GetWlSimDoneReply)
  return target;
}

size_t GetWlSimDoneReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GetWlSimDoneReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool sim_done = 1;
  if (this->sim_done() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWlSimDoneReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GetWlSimDoneReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWlSimDoneReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWlSimDoneReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GetWlSimDoneReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GetWlSimDoneReply)
    MergeFrom(*source);
  }
}

void GetWlSimDoneReply::MergeFrom(const GetWlSimDoneReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GetWlSimDoneReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sim_done() != 0) {
    set_sim_done(from.sim_done());
  }
}

void GetWlSimDoneReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GetWlSimDoneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWlSimDoneReply::CopyFrom(const GetWlSimDoneReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GetWlSimDoneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWlSimDoneReply::IsInitialized() const {
  return true;
}

void GetWlSimDoneReply::Swap(GetWlSimDoneReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWlSimDoneReply::InternalSwap(GetWlSimDoneReply* other) {
  using std::swap;
  swap(sim_done_, other->sim_done_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetWlSimDoneReply::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetTsReadyRequest::InitAsDefaultInstance() {
  ::dbx1000::_SetTsReadyRequest_default_instance_._instance.get_mutable()->cur_row_ = const_cast< ::dbx1000::Mess_RowItem*>(
      ::dbx1000::Mess_RowItem::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetTsReadyRequest::kThreadIdFieldNumber;
const int SetTsReadyRequest::kCurRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTsReadyRequest::SetTsReadyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_SetTsReadyRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.SetTsReadyRequest)
}
SetTsReadyRequest::SetTsReadyRequest(const SetTsReadyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cur_row()) {
    cur_row_ = new ::dbx1000::Mess_RowItem(*from.cur_row_);
  } else {
    cur_row_ = NULL;
  }
  thread_id_ = from.thread_id_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.SetTsReadyRequest)
}

void SetTsReadyRequest::SharedCtor() {
  ::memset(&cur_row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_id_) -
      reinterpret_cast<char*>(&cur_row_)) + sizeof(thread_id_));
}

SetTsReadyRequest::~SetTsReadyRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.SetTsReadyRequest)
  SharedDtor();
}

void SetTsReadyRequest::SharedDtor() {
  if (this != internal_default_instance()) delete cur_row_;
}

void SetTsReadyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetTsReadyRequest::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetTsReadyRequest& SetTsReadyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_SetTsReadyRequest.base);
  return *internal_default_instance();
}


void SetTsReadyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.SetTsReadyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cur_row_ != NULL) {
    delete cur_row_;
  }
  cur_row_ = NULL;
  thread_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool SetTsReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.SetTsReadyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 thread_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dbx1000.Mess_RowItem cur_row = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cur_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.SetTsReadyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.SetTsReadyRequest)
  return false;
#undef DO_
}

void SetTsReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.SetTsReadyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->thread_id(), output);
  }

  // .dbx1000.Mess_RowItem cur_row = 2;
  if (this->has_cur_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_cur_row(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.SetTsReadyRequest)
}

::google::protobuf::uint8* SetTsReadyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.SetTsReadyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->thread_id(), target);
  }

  // .dbx1000.Mess_RowItem cur_row = 2;
  if (this->has_cur_row()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_cur_row(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.SetTsReadyRequest)
  return target;
}

size_t SetTsReadyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.SetTsReadyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .dbx1000.Mess_RowItem cur_row = 2;
  if (this->has_cur_row()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cur_row_);
  }

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->thread_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTsReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.SetTsReadyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTsReadyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetTsReadyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.SetTsReadyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.SetTsReadyRequest)
    MergeFrom(*source);
  }
}

void SetTsReadyRequest::MergeFrom(const SetTsReadyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.SetTsReadyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cur_row()) {
    mutable_cur_row()->::dbx1000::Mess_RowItem::MergeFrom(from.cur_row());
  }
  if (from.thread_id() != 0) {
    set_thread_id(from.thread_id());
  }
}

void SetTsReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.SetTsReadyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTsReadyRequest::CopyFrom(const SetTsReadyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.SetTsReadyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTsReadyRequest::IsInitialized() const {
  return true;
}

void SetTsReadyRequest::Swap(SetTsReadyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTsReadyRequest::InternalSwap(SetTsReadyRequest* other) {
  using std::swap;
  swap(cur_row_, other->cur_row_);
  swap(thread_id_, other->thread_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetTsReadyRequest::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetTsReadyReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTsReadyReply::SetTsReadyReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_SetTsReadyReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.SetTsReadyReply)
}
SetTsReadyReply::SetTsReadyReply(const SetTsReadyReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.SetTsReadyReply)
}

void SetTsReadyReply::SharedCtor() {
}

SetTsReadyReply::~SetTsReadyReply() {
  // @@protoc_insertion_point(destructor:dbx1000.SetTsReadyReply)
  SharedDtor();
}

void SetTsReadyReply::SharedDtor() {
}

void SetTsReadyReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetTsReadyReply::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetTsReadyReply& SetTsReadyReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_SetTsReadyReply.base);
  return *internal_default_instance();
}


void SetTsReadyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.SetTsReadyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SetTsReadyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.SetTsReadyReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.SetTsReadyReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.SetTsReadyReply)
  return false;
#undef DO_
}

void SetTsReadyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.SetTsReadyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.SetTsReadyReply)
}

::google::protobuf::uint8* SetTsReadyReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.SetTsReadyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.SetTsReadyReply)
  return target;
}

size_t SetTsReadyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.SetTsReadyReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTsReadyReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.SetTsReadyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTsReadyReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetTsReadyReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.SetTsReadyReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.SetTsReadyReply)
    MergeFrom(*source);
  }
}

void SetTsReadyReply::MergeFrom(const SetTsReadyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.SetTsReadyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetTsReadyReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.SetTsReadyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTsReadyReply::CopyFrom(const SetTsReadyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.SetTsReadyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTsReadyReply::IsInitialized() const {
  return true;
}

void SetTsReadyReply::Swap(SetTsReadyReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTsReadyReply::InternalSwap(SetTsReadyReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetTsReadyReply::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetNextTsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNextTsRequest::kThreadIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNextTsRequest::GetNextTsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_GetNextTsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.GetNextTsRequest)
}
GetNextTsRequest::GetNextTsRequest(const GetNextTsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thread_id_ = from.thread_id_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.GetNextTsRequest)
}

void GetNextTsRequest::SharedCtor() {
  thread_id_ = GOOGLE_ULONGLONG(0);
}

GetNextTsRequest::~GetNextTsRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.GetNextTsRequest)
  SharedDtor();
}

void GetNextTsRequest::SharedDtor() {
}

void GetNextTsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetNextTsRequest::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNextTsRequest& GetNextTsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_GetNextTsRequest.base);
  return *internal_default_instance();
}


void GetNextTsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GetNextTsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thread_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetNextTsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.GetNextTsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 thread_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.GetNextTsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.GetNextTsRequest)
  return false;
#undef DO_
}

void GetNextTsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.GetNextTsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->thread_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.GetNextTsRequest)
}

::google::protobuf::uint8* GetNextTsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GetNextTsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->thread_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GetNextTsRequest)
  return target;
}

size_t GetNextTsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GetNextTsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->thread_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNextTsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GetNextTsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNextTsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNextTsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GetNextTsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GetNextTsRequest)
    MergeFrom(*source);
  }
}

void GetNextTsRequest::MergeFrom(const GetNextTsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GetNextTsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.thread_id() != 0) {
    set_thread_id(from.thread_id());
  }
}

void GetNextTsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GetNextTsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNextTsRequest::CopyFrom(const GetNextTsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GetNextTsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNextTsRequest::IsInitialized() const {
  return true;
}

void GetNextTsRequest::Swap(GetNextTsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNextTsRequest::InternalSwap(GetNextTsRequest* other) {
  using std::swap;
  swap(thread_id_, other->thread_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetNextTsRequest::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetNextTsReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNextTsReply::kTimestampFieldNumber;
const int GetNextTsReply::kRunTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNextTsReply::GetNextTsReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_GetNextTsReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.GetNextTsReply)
}
GetNextTsReply::GetNextTsReply(const GetNextTsReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&run_time_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(run_time_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.GetNextTsReply)
}

void GetNextTsReply::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&run_time_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(run_time_));
}

GetNextTsReply::~GetNextTsReply() {
  // @@protoc_insertion_point(destructor:dbx1000.GetNextTsReply)
  SharedDtor();
}

void GetNextTsReply::SharedDtor() {
}

void GetNextTsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetNextTsReply::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNextTsReply& GetNextTsReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_GetNextTsReply.base);
  return *internal_default_instance();
}


void GetNextTsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GetNextTsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&run_time_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(run_time_));
  _internal_metadata_.Clear();
}

bool GetNextTsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.GetNextTsReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 run_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &run_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.GetNextTsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.GetNextTsReply)
  return false;
#undef DO_
}

void GetNextTsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.GetNextTsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // uint64 run_time = 2;
  if (this->run_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->run_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.GetNextTsReply)
}

::google::protobuf::uint8* GetNextTsReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GetNextTsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // uint64 run_time = 2;
  if (this->run_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->run_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GetNextTsReply)
  return target;
}

size_t GetNextTsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GetNextTsReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint64 run_time = 2;
  if (this->run_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->run_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNextTsReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GetNextTsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNextTsReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNextTsReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GetNextTsReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GetNextTsReply)
    MergeFrom(*source);
  }
}

void GetNextTsReply::MergeFrom(const GetNextTsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GetNextTsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.run_time() != 0) {
    set_run_time(from.run_time());
  }
}

void GetNextTsReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GetNextTsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNextTsReply::CopyFrom(const GetNextTsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GetNextTsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNextTsReply::IsInitialized() const {
  return true;
}

void GetNextTsReply::Swap(GetNextTsReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNextTsReply::InternalSwap(GetNextTsReply* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(run_time_, other->run_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetNextTsReply::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddTsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddTsRequest::kThreadIdFieldNumber;
const int AddTsRequest::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTsRequest::AddTsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_AddTsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.AddTsRequest)
}
AddTsRequest::AddTsRequest(const AddTsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&thread_id_, &from.thread_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&thread_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.AddTsRequest)
}

void AddTsRequest::SharedCtor() {
  ::memset(&thread_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&thread_id_)) + sizeof(timestamp_));
}

AddTsRequest::~AddTsRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.AddTsRequest)
  SharedDtor();
}

void AddTsRequest::SharedDtor() {
}

void AddTsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddTsRequest::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddTsRequest& AddTsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_AddTsRequest.base);
  return *internal_default_instance();
}


void AddTsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.AddTsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&thread_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&thread_id_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

bool AddTsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.AddTsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 thread_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.AddTsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.AddTsRequest)
  return false;
#undef DO_
}

void AddTsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.AddTsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->thread_id(), output);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.AddTsRequest)
}

::google::protobuf::uint8* AddTsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.AddTsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->thread_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.AddTsRequest)
  return target;
}

size_t AddTsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.AddTsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->thread_id());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.AddTsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddTsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.AddTsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.AddTsRequest)
    MergeFrom(*source);
  }
}

void AddTsRequest::MergeFrom(const AddTsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.AddTsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.thread_id() != 0) {
    set_thread_id(from.thread_id());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void AddTsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.AddTsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTsRequest::CopyFrom(const AddTsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.AddTsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTsRequest::IsInitialized() const {
  return true;
}

void AddTsRequest::Swap(AddTsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTsRequest::InternalSwap(AddTsRequest* other) {
  using std::swap;
  swap(thread_id_, other->thread_id_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddTsRequest::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddTsReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddTsReply::kRunTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTsReply::AddTsReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_AddTsReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.AddTsReply)
}
AddTsReply::AddTsReply(const AddTsReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  run_time_ = from.run_time_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.AddTsReply)
}

void AddTsReply::SharedCtor() {
  run_time_ = GOOGLE_ULONGLONG(0);
}

AddTsReply::~AddTsReply() {
  // @@protoc_insertion_point(destructor:dbx1000.AddTsReply)
  SharedDtor();
}

void AddTsReply::SharedDtor() {
}

void AddTsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddTsReply::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddTsReply& AddTsReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_AddTsReply.base);
  return *internal_default_instance();
}


void AddTsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.AddTsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_time_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool AddTsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.AddTsReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 run_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &run_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.AddTsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.AddTsReply)
  return false;
#undef DO_
}

void AddTsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.AddTsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 run_time = 1;
  if (this->run_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->run_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.AddTsReply)
}

::google::protobuf::uint8* AddTsReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.AddTsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 run_time = 1;
  if (this->run_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->run_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.AddTsReply)
  return target;
}

size_t AddTsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.AddTsReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 run_time = 1;
  if (this->run_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->run_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTsReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.AddTsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTsReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddTsReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.AddTsReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.AddTsReply)
    MergeFrom(*source);
  }
}

void AddTsReply::MergeFrom(const AddTsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.AddTsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.run_time() != 0) {
    set_run_time(from.run_time());
  }
}

void AddTsReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.AddTsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTsReply::CopyFrom(const AddTsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.AddTsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTsReply::IsInitialized() const {
  return true;
}

void AddTsReply::Swap(AddTsReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTsReply::InternalSwap(AddTsReply* other) {
  using std::swap;
  swap(run_time_, other->run_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddTsReply::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetAndAddTsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAndAddTsRequest::kThreadIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAndAddTsRequest::GetAndAddTsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_GetAndAddTsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.GetAndAddTsRequest)
}
GetAndAddTsRequest::GetAndAddTsRequest(const GetAndAddTsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thread_id_ = from.thread_id_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.GetAndAddTsRequest)
}

void GetAndAddTsRequest::SharedCtor() {
  thread_id_ = GOOGLE_ULONGLONG(0);
}

GetAndAddTsRequest::~GetAndAddTsRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.GetAndAddTsRequest)
  SharedDtor();
}

void GetAndAddTsRequest::SharedDtor() {
}

void GetAndAddTsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetAndAddTsRequest::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAndAddTsRequest& GetAndAddTsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_GetAndAddTsRequest.base);
  return *internal_default_instance();
}


void GetAndAddTsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GetAndAddTsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thread_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetAndAddTsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.GetAndAddTsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 thread_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.GetAndAddTsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.GetAndAddTsRequest)
  return false;
#undef DO_
}

void GetAndAddTsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.GetAndAddTsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->thread_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.GetAndAddTsRequest)
}

::google::protobuf::uint8* GetAndAddTsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GetAndAddTsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->thread_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GetAndAddTsRequest)
  return target;
}

size_t GetAndAddTsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GetAndAddTsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->thread_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAndAddTsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GetAndAddTsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAndAddTsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAndAddTsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GetAndAddTsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GetAndAddTsRequest)
    MergeFrom(*source);
  }
}

void GetAndAddTsRequest::MergeFrom(const GetAndAddTsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GetAndAddTsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.thread_id() != 0) {
    set_thread_id(from.thread_id());
  }
}

void GetAndAddTsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GetAndAddTsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAndAddTsRequest::CopyFrom(const GetAndAddTsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GetAndAddTsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAndAddTsRequest::IsInitialized() const {
  return true;
}

void GetAndAddTsRequest::Swap(GetAndAddTsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAndAddTsRequest::InternalSwap(GetAndAddTsRequest* other) {
  using std::swap;
  swap(thread_id_, other->thread_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetAndAddTsRequest::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetAndAddTsReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAndAddTsReply::kTimestampFieldNumber;
const int GetAndAddTsReply::kRunTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAndAddTsReply::GetAndAddTsReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_GetAndAddTsReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.GetAndAddTsReply)
}
GetAndAddTsReply::GetAndAddTsReply(const GetAndAddTsReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&run_time_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(run_time_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.GetAndAddTsReply)
}

void GetAndAddTsReply::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&run_time_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(run_time_));
}

GetAndAddTsReply::~GetAndAddTsReply() {
  // @@protoc_insertion_point(destructor:dbx1000.GetAndAddTsReply)
  SharedDtor();
}

void GetAndAddTsReply::SharedDtor() {
}

void GetAndAddTsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetAndAddTsReply::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAndAddTsReply& GetAndAddTsReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_GetAndAddTsReply.base);
  return *internal_default_instance();
}


void GetAndAddTsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GetAndAddTsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&run_time_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(run_time_));
  _internal_metadata_.Clear();
}

bool GetAndAddTsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.GetAndAddTsReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 run_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &run_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.GetAndAddTsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.GetAndAddTsReply)
  return false;
#undef DO_
}

void GetAndAddTsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.GetAndAddTsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // uint64 run_time = 2;
  if (this->run_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->run_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.GetAndAddTsReply)
}

::google::protobuf::uint8* GetAndAddTsReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GetAndAddTsReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // uint64 run_time = 2;
  if (this->run_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->run_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GetAndAddTsReply)
  return target;
}

size_t GetAndAddTsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GetAndAddTsReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint64 run_time = 2;
  if (this->run_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->run_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAndAddTsReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GetAndAddTsReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAndAddTsReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAndAddTsReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GetAndAddTsReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GetAndAddTsReply)
    MergeFrom(*source);
  }
}

void GetAndAddTsReply::MergeFrom(const GetAndAddTsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GetAndAddTsReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.run_time() != 0) {
    set_run_time(from.run_time());
  }
}

void GetAndAddTsReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GetAndAddTsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAndAddTsReply::CopyFrom(const GetAndAddTsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GetAndAddTsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAndAddTsReply::IsInitialized() const {
  return true;
}

void GetAndAddTsReply::Swap(GetAndAddTsReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAndAddTsReply::InternalSwap(GetAndAddTsReply* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(run_time_, other->run_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetAndAddTsReply::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestRequest::TestRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_TestRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.TestRequest)
}
TestRequest::TestRequest(const TestRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.TestRequest)
}

void TestRequest::SharedCtor() {
}

TestRequest::~TestRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.TestRequest)
  SharedDtor();
}

void TestRequest::SharedDtor() {
}

void TestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestRequest::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestRequest& TestRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_TestRequest.base);
  return *internal_default_instance();
}


void TestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.TestRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.TestRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.TestRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.TestRequest)
  return false;
#undef DO_
}

void TestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.TestRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.TestRequest)
}

::google::protobuf::uint8* TestRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.TestRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.TestRequest)
  return target;
}

size_t TestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.TestRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.TestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.TestRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.TestRequest)
    MergeFrom(*source);
  }
}

void TestRequest::MergeFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.TestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequest::CopyFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequest::IsInitialized() const {
  return true;
}

void TestRequest::Swap(TestRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestRequest::InternalSwap(TestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestRequest::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestReply::TestReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_TestReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.TestReply)
}
TestReply::TestReply(const TestReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.TestReply)
}

void TestReply::SharedCtor() {
}

TestReply::~TestReply() {
  // @@protoc_insertion_point(destructor:dbx1000.TestReply)
  SharedDtor();
}

void TestReply::SharedDtor() {
}

void TestReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestReply::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestReply& TestReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_TestReply.base);
  return *internal_default_instance();
}


void TestReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.TestReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TestReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.TestReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.TestReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.TestReply)
  return false;
#undef DO_
}

void TestReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.TestReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.TestReply)
}

::google::protobuf::uint8* TestReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.TestReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.TestReply)
  return target;
}

size_t TestReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.TestReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.TestReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TestReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.TestReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.TestReply)
    MergeFrom(*source);
  }
}

void TestReply::MergeFrom(const TestReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.TestReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TestReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.TestReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestReply::CopyFrom(const TestReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.TestReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReply::IsInitialized() const {
  return true;
}

void TestReply::Swap(TestReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestReply::InternalSwap(TestReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestReply::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ThreadDoneRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThreadDoneRequest::kThreadIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThreadDoneRequest::ThreadDoneRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_ThreadDoneRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.ThreadDoneRequest)
}
ThreadDoneRequest::ThreadDoneRequest(const ThreadDoneRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thread_id_ = from.thread_id_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.ThreadDoneRequest)
}

void ThreadDoneRequest::SharedCtor() {
  thread_id_ = GOOGLE_ULONGLONG(0);
}

ThreadDoneRequest::~ThreadDoneRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.ThreadDoneRequest)
  SharedDtor();
}

void ThreadDoneRequest::SharedDtor() {
}

void ThreadDoneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ThreadDoneRequest::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThreadDoneRequest& ThreadDoneRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_ThreadDoneRequest.base);
  return *internal_default_instance();
}


void ThreadDoneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.ThreadDoneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thread_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ThreadDoneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.ThreadDoneRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 thread_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.ThreadDoneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.ThreadDoneRequest)
  return false;
#undef DO_
}

void ThreadDoneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.ThreadDoneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->thread_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.ThreadDoneRequest)
}

::google::protobuf::uint8* ThreadDoneRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.ThreadDoneRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->thread_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.ThreadDoneRequest)
  return target;
}

size_t ThreadDoneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.ThreadDoneRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 thread_id = 1;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->thread_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThreadDoneRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.ThreadDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ThreadDoneRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThreadDoneRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.ThreadDoneRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.ThreadDoneRequest)
    MergeFrom(*source);
  }
}

void ThreadDoneRequest::MergeFrom(const ThreadDoneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.ThreadDoneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.thread_id() != 0) {
    set_thread_id(from.thread_id());
  }
}

void ThreadDoneRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.ThreadDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadDoneRequest::CopyFrom(const ThreadDoneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.ThreadDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadDoneRequest::IsInitialized() const {
  return true;
}

void ThreadDoneRequest::Swap(ThreadDoneRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThreadDoneRequest::InternalSwap(ThreadDoneRequest* other) {
  using std::swap;
  swap(thread_id_, other->thread_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ThreadDoneRequest::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ThreadDoneReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThreadDoneReply::ThreadDoneReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_ThreadDoneReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.ThreadDoneReply)
}
ThreadDoneReply::ThreadDoneReply(const ThreadDoneReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.ThreadDoneReply)
}

void ThreadDoneReply::SharedCtor() {
}

ThreadDoneReply::~ThreadDoneReply() {
  // @@protoc_insertion_point(destructor:dbx1000.ThreadDoneReply)
  SharedDtor();
}

void ThreadDoneReply::SharedDtor() {
}

void ThreadDoneReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ThreadDoneReply::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThreadDoneReply& ThreadDoneReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_ThreadDoneReply.base);
  return *internal_default_instance();
}


void ThreadDoneReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.ThreadDoneReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ThreadDoneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.ThreadDoneReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.ThreadDoneReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.ThreadDoneReply)
  return false;
#undef DO_
}

void ThreadDoneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.ThreadDoneReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.ThreadDoneReply)
}

::google::protobuf::uint8* ThreadDoneReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.ThreadDoneReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.ThreadDoneReply)
  return target;
}

size_t ThreadDoneReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.ThreadDoneReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThreadDoneReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.ThreadDoneReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ThreadDoneReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThreadDoneReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.ThreadDoneReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.ThreadDoneReply)
    MergeFrom(*source);
  }
}

void ThreadDoneReply::MergeFrom(const ThreadDoneReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.ThreadDoneReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ThreadDoneReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.ThreadDoneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadDoneReply::CopyFrom(const ThreadDoneReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.ThreadDoneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadDoneReply::IsInitialized() const {
  return true;
}

void ThreadDoneReply::Swap(ThreadDoneReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThreadDoneReply::InternalSwap(ThreadDoneReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ThreadDoneReply::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRowSizeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRowSizeRequest::GetRowSizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_GetRowSizeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.GetRowSizeRequest)
}
GetRowSizeRequest::GetRowSizeRequest(const GetRowSizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.GetRowSizeRequest)
}

void GetRowSizeRequest::SharedCtor() {
}

GetRowSizeRequest::~GetRowSizeRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.GetRowSizeRequest)
  SharedDtor();
}

void GetRowSizeRequest::SharedDtor() {
}

void GetRowSizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetRowSizeRequest::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRowSizeRequest& GetRowSizeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_GetRowSizeRequest.base);
  return *internal_default_instance();
}


void GetRowSizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GetRowSizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetRowSizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.GetRowSizeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.GetRowSizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.GetRowSizeRequest)
  return false;
#undef DO_
}

void GetRowSizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.GetRowSizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.GetRowSizeRequest)
}

::google::protobuf::uint8* GetRowSizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GetRowSizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GetRowSizeRequest)
  return target;
}

size_t GetRowSizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GetRowSizeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRowSizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GetRowSizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRowSizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRowSizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GetRowSizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GetRowSizeRequest)
    MergeFrom(*source);
  }
}

void GetRowSizeRequest::MergeFrom(const GetRowSizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GetRowSizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetRowSizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GetRowSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRowSizeRequest::CopyFrom(const GetRowSizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GetRowSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRowSizeRequest::IsInitialized() const {
  return true;
}

void GetRowSizeRequest::Swap(GetRowSizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRowSizeRequest::InternalSwap(GetRowSizeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetRowSizeRequest::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRowSizeReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRowSizeReply::kRowSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRowSizeReply::GetRowSizeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2eproto::scc_info_GetRowSizeReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.GetRowSizeReply)
}
GetRowSizeReply::GetRowSizeReply(const GetRowSizeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_size_ = from.row_size_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.GetRowSizeReply)
}

void GetRowSizeReply::SharedCtor() {
  row_size_ = GOOGLE_ULONGLONG(0);
}

GetRowSizeReply::~GetRowSizeReply() {
  // @@protoc_insertion_point(destructor:dbx1000.GetRowSizeReply)
  SharedDtor();
}

void GetRowSizeReply::SharedDtor() {
}

void GetRowSizeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetRowSizeReply::descriptor() {
  ::protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRowSizeReply& GetRowSizeReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2eproto::scc_info_GetRowSizeReply.base);
  return *internal_default_instance();
}


void GetRowSizeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.GetRowSizeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_size_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetRowSizeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.GetRowSizeReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 row_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &row_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.GetRowSizeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.GetRowSizeReply)
  return false;
#undef DO_
}

void GetRowSizeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.GetRowSizeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 row_size = 1;
  if (this->row_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->row_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.GetRowSizeReply)
}

::google::protobuf::uint8* GetRowSizeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.GetRowSizeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 row_size = 1;
  if (this->row_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->row_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.GetRowSizeReply)
  return target;
}

size_t GetRowSizeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.GetRowSizeReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 row_size = 1;
  if (this->row_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->row_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRowSizeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.GetRowSizeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRowSizeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRowSizeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.GetRowSizeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.GetRowSizeReply)
    MergeFrom(*source);
  }
}

void GetRowSizeReply::MergeFrom(const GetRowSizeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.GetRowSizeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row_size() != 0) {
    set_row_size(from.row_size());
  }
}

void GetRowSizeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.GetRowSizeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRowSizeReply::CopyFrom(const GetRowSizeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.GetRowSizeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRowSizeReply::IsInitialized() const {
  return true;
}

void GetRowSizeReply::Swap(GetRowSizeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRowSizeReply::InternalSwap(GetRowSizeReply* other) {
  using std::swap;
  swap(row_size_, other->row_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetRowSizeReply::GetMetadata() const {
  protobuf_api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dbx1000
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::TxnReadyRequest* Arena::CreateMaybeMessage< ::dbx1000::TxnReadyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::TxnReadyRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::TxnReadyReply* Arena::CreateMaybeMessage< ::dbx1000::TxnReadyReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::TxnReadyReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::InitWlDoneRequest* Arena::CreateMaybeMessage< ::dbx1000::InitWlDoneRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::InitWlDoneRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::InitWlDoneReply* Arena::CreateMaybeMessage< ::dbx1000::InitWlDoneReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::InitWlDoneReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::Mess_RowItem* Arena::CreateMaybeMessage< ::dbx1000::Mess_RowItem >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::Mess_RowItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::Mess_TxnRowMan* Arena::CreateMaybeMessage< ::dbx1000::Mess_TxnRowMan >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::Mess_TxnRowMan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::GetRowRequest* Arena::CreateMaybeMessage< ::dbx1000::GetRowRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::GetRowRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::GetRowReply* Arena::CreateMaybeMessage< ::dbx1000::GetRowReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::GetRowReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::ReturnRowRequest* Arena::CreateMaybeMessage< ::dbx1000::ReturnRowRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::ReturnRowRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::ReturnRowReply* Arena::CreateMaybeMessage< ::dbx1000::ReturnRowReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::ReturnRowReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::SetWlSimDoneRequest* Arena::CreateMaybeMessage< ::dbx1000::SetWlSimDoneRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::SetWlSimDoneRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::SetWlSimDoneReply* Arena::CreateMaybeMessage< ::dbx1000::SetWlSimDoneReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::SetWlSimDoneReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::GetWlSimDoneRequest* Arena::CreateMaybeMessage< ::dbx1000::GetWlSimDoneRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::GetWlSimDoneRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::GetWlSimDoneReply* Arena::CreateMaybeMessage< ::dbx1000::GetWlSimDoneReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::GetWlSimDoneReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::SetTsReadyRequest* Arena::CreateMaybeMessage< ::dbx1000::SetTsReadyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::SetTsReadyRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::SetTsReadyReply* Arena::CreateMaybeMessage< ::dbx1000::SetTsReadyReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::SetTsReadyReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::GetNextTsRequest* Arena::CreateMaybeMessage< ::dbx1000::GetNextTsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::GetNextTsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::GetNextTsReply* Arena::CreateMaybeMessage< ::dbx1000::GetNextTsReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::GetNextTsReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::AddTsRequest* Arena::CreateMaybeMessage< ::dbx1000::AddTsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::AddTsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::AddTsReply* Arena::CreateMaybeMessage< ::dbx1000::AddTsReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::AddTsReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::GetAndAddTsRequest* Arena::CreateMaybeMessage< ::dbx1000::GetAndAddTsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::GetAndAddTsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::GetAndAddTsReply* Arena::CreateMaybeMessage< ::dbx1000::GetAndAddTsReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::GetAndAddTsReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::TestRequest* Arena::CreateMaybeMessage< ::dbx1000::TestRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::TestRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::TestReply* Arena::CreateMaybeMessage< ::dbx1000::TestReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::TestReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::ThreadDoneRequest* Arena::CreateMaybeMessage< ::dbx1000::ThreadDoneRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::ThreadDoneRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::ThreadDoneReply* Arena::CreateMaybeMessage< ::dbx1000::ThreadDoneReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::ThreadDoneReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::GetRowSizeRequest* Arena::CreateMaybeMessage< ::dbx1000::GetRowSizeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::GetRowSizeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::GetRowSizeReply* Arena::CreateMaybeMessage< ::dbx1000::GetRowSizeReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::GetRowSizeReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
