// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_INCLUDED_api_2eproto
#define PROTOBUF_INCLUDED_api_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto 

namespace protobuf_api_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[26];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2eproto
namespace dbx1000 {
class AddTsReply;
class AddTsReplyDefaultTypeInternal;
extern AddTsReplyDefaultTypeInternal _AddTsReply_default_instance_;
class AddTsRequest;
class AddTsRequestDefaultTypeInternal;
extern AddTsRequestDefaultTypeInternal _AddTsRequest_default_instance_;
class GetNextTsReply;
class GetNextTsReplyDefaultTypeInternal;
extern GetNextTsReplyDefaultTypeInternal _GetNextTsReply_default_instance_;
class GetNextTsRequest;
class GetNextTsRequestDefaultTypeInternal;
extern GetNextTsRequestDefaultTypeInternal _GetNextTsRequest_default_instance_;
class GetRowReply;
class GetRowReplyDefaultTypeInternal;
extern GetRowReplyDefaultTypeInternal _GetRowReply_default_instance_;
class GetRowRequest;
class GetRowRequestDefaultTypeInternal;
extern GetRowRequestDefaultTypeInternal _GetRowRequest_default_instance_;
class GetRowSizeReply;
class GetRowSizeReplyDefaultTypeInternal;
extern GetRowSizeReplyDefaultTypeInternal _GetRowSizeReply_default_instance_;
class GetRowSizeRequest;
class GetRowSizeRequestDefaultTypeInternal;
extern GetRowSizeRequestDefaultTypeInternal _GetRowSizeRequest_default_instance_;
class GetWlSimDoneReply;
class GetWlSimDoneReplyDefaultTypeInternal;
extern GetWlSimDoneReplyDefaultTypeInternal _GetWlSimDoneReply_default_instance_;
class GetWlSimDoneRequest;
class GetWlSimDoneRequestDefaultTypeInternal;
extern GetWlSimDoneRequestDefaultTypeInternal _GetWlSimDoneRequest_default_instance_;
class InitWlDoneReply;
class InitWlDoneReplyDefaultTypeInternal;
extern InitWlDoneReplyDefaultTypeInternal _InitWlDoneReply_default_instance_;
class InitWlDoneRequest;
class InitWlDoneRequestDefaultTypeInternal;
extern InitWlDoneRequestDefaultTypeInternal _InitWlDoneRequest_default_instance_;
class Mess_RowItem;
class Mess_RowItemDefaultTypeInternal;
extern Mess_RowItemDefaultTypeInternal _Mess_RowItem_default_instance_;
class Mess_TxnRowMan;
class Mess_TxnRowManDefaultTypeInternal;
extern Mess_TxnRowManDefaultTypeInternal _Mess_TxnRowMan_default_instance_;
class ReturnRowReply;
class ReturnRowReplyDefaultTypeInternal;
extern ReturnRowReplyDefaultTypeInternal _ReturnRowReply_default_instance_;
class ReturnRowRequest;
class ReturnRowRequestDefaultTypeInternal;
extern ReturnRowRequestDefaultTypeInternal _ReturnRowRequest_default_instance_;
class SetTsReadyReply;
class SetTsReadyReplyDefaultTypeInternal;
extern SetTsReadyReplyDefaultTypeInternal _SetTsReadyReply_default_instance_;
class SetTsReadyRequest;
class SetTsReadyRequestDefaultTypeInternal;
extern SetTsReadyRequestDefaultTypeInternal _SetTsReadyRequest_default_instance_;
class SetWlSimDoneReply;
class SetWlSimDoneReplyDefaultTypeInternal;
extern SetWlSimDoneReplyDefaultTypeInternal _SetWlSimDoneReply_default_instance_;
class SetWlSimDoneRequest;
class SetWlSimDoneRequestDefaultTypeInternal;
extern SetWlSimDoneRequestDefaultTypeInternal _SetWlSimDoneRequest_default_instance_;
class TestReply;
class TestReplyDefaultTypeInternal;
extern TestReplyDefaultTypeInternal _TestReply_default_instance_;
class TestRequest;
class TestRequestDefaultTypeInternal;
extern TestRequestDefaultTypeInternal _TestRequest_default_instance_;
class ThreadDoneReply;
class ThreadDoneReplyDefaultTypeInternal;
extern ThreadDoneReplyDefaultTypeInternal _ThreadDoneReply_default_instance_;
class ThreadDoneRequest;
class ThreadDoneRequestDefaultTypeInternal;
extern ThreadDoneRequestDefaultTypeInternal _ThreadDoneRequest_default_instance_;
class TxnReadyReply;
class TxnReadyReplyDefaultTypeInternal;
extern TxnReadyReplyDefaultTypeInternal _TxnReadyReply_default_instance_;
class TxnReadyRequest;
class TxnReadyRequestDefaultTypeInternal;
extern TxnReadyRequestDefaultTypeInternal _TxnReadyRequest_default_instance_;
}  // namespace dbx1000
namespace google {
namespace protobuf {
template<> ::dbx1000::AddTsReply* Arena::CreateMaybeMessage<::dbx1000::AddTsReply>(Arena*);
template<> ::dbx1000::AddTsRequest* Arena::CreateMaybeMessage<::dbx1000::AddTsRequest>(Arena*);
template<> ::dbx1000::GetNextTsReply* Arena::CreateMaybeMessage<::dbx1000::GetNextTsReply>(Arena*);
template<> ::dbx1000::GetNextTsRequest* Arena::CreateMaybeMessage<::dbx1000::GetNextTsRequest>(Arena*);
template<> ::dbx1000::GetRowReply* Arena::CreateMaybeMessage<::dbx1000::GetRowReply>(Arena*);
template<> ::dbx1000::GetRowRequest* Arena::CreateMaybeMessage<::dbx1000::GetRowRequest>(Arena*);
template<> ::dbx1000::GetRowSizeReply* Arena::CreateMaybeMessage<::dbx1000::GetRowSizeReply>(Arena*);
template<> ::dbx1000::GetRowSizeRequest* Arena::CreateMaybeMessage<::dbx1000::GetRowSizeRequest>(Arena*);
template<> ::dbx1000::GetWlSimDoneReply* Arena::CreateMaybeMessage<::dbx1000::GetWlSimDoneReply>(Arena*);
template<> ::dbx1000::GetWlSimDoneRequest* Arena::CreateMaybeMessage<::dbx1000::GetWlSimDoneRequest>(Arena*);
template<> ::dbx1000::InitWlDoneReply* Arena::CreateMaybeMessage<::dbx1000::InitWlDoneReply>(Arena*);
template<> ::dbx1000::InitWlDoneRequest* Arena::CreateMaybeMessage<::dbx1000::InitWlDoneRequest>(Arena*);
template<> ::dbx1000::Mess_RowItem* Arena::CreateMaybeMessage<::dbx1000::Mess_RowItem>(Arena*);
template<> ::dbx1000::Mess_TxnRowMan* Arena::CreateMaybeMessage<::dbx1000::Mess_TxnRowMan>(Arena*);
template<> ::dbx1000::ReturnRowReply* Arena::CreateMaybeMessage<::dbx1000::ReturnRowReply>(Arena*);
template<> ::dbx1000::ReturnRowRequest* Arena::CreateMaybeMessage<::dbx1000::ReturnRowRequest>(Arena*);
template<> ::dbx1000::SetTsReadyReply* Arena::CreateMaybeMessage<::dbx1000::SetTsReadyReply>(Arena*);
template<> ::dbx1000::SetTsReadyRequest* Arena::CreateMaybeMessage<::dbx1000::SetTsReadyRequest>(Arena*);
template<> ::dbx1000::SetWlSimDoneReply* Arena::CreateMaybeMessage<::dbx1000::SetWlSimDoneReply>(Arena*);
template<> ::dbx1000::SetWlSimDoneRequest* Arena::CreateMaybeMessage<::dbx1000::SetWlSimDoneRequest>(Arena*);
template<> ::dbx1000::TestReply* Arena::CreateMaybeMessage<::dbx1000::TestReply>(Arena*);
template<> ::dbx1000::TestRequest* Arena::CreateMaybeMessage<::dbx1000::TestRequest>(Arena*);
template<> ::dbx1000::ThreadDoneReply* Arena::CreateMaybeMessage<::dbx1000::ThreadDoneReply>(Arena*);
template<> ::dbx1000::ThreadDoneRequest* Arena::CreateMaybeMessage<::dbx1000::ThreadDoneRequest>(Arena*);
template<> ::dbx1000::TxnReadyReply* Arena::CreateMaybeMessage<::dbx1000::TxnReadyReply>(Arena*);
template<> ::dbx1000::TxnReadyRequest* Arena::CreateMaybeMessage<::dbx1000::TxnReadyRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dbx1000 {

// ===================================================================

class TxnReadyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.TxnReadyRequest) */ {
 public:
  TxnReadyRequest();
  virtual ~TxnReadyRequest();

  TxnReadyRequest(const TxnReadyRequest& from);

  inline TxnReadyRequest& operator=(const TxnReadyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxnReadyRequest(TxnReadyRequest&& from) noexcept
    : TxnReadyRequest() {
    *this = ::std::move(from);
  }

  inline TxnReadyRequest& operator=(TxnReadyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TxnReadyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxnReadyRequest* internal_default_instance() {
    return reinterpret_cast<const TxnReadyRequest*>(
               &_TxnReadyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TxnReadyRequest* other);
  friend void swap(TxnReadyRequest& a, TxnReadyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxnReadyRequest* New() const final {
    return CreateMaybeMessage<TxnReadyRequest>(NULL);
  }

  TxnReadyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxnReadyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxnReadyRequest& from);
  void MergeFrom(const TxnReadyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxnReadyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 thread_id = 1;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 1;
  ::google::protobuf::uint64 thread_id() const;
  void set_thread_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.TxnReadyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 thread_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TxnReadyReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.TxnReadyReply) */ {
 public:
  TxnReadyReply();
  virtual ~TxnReadyReply();

  TxnReadyReply(const TxnReadyReply& from);

  inline TxnReadyReply& operator=(const TxnReadyReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxnReadyReply(TxnReadyReply&& from) noexcept
    : TxnReadyReply() {
    *this = ::std::move(from);
  }

  inline TxnReadyReply& operator=(TxnReadyReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TxnReadyReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxnReadyReply* internal_default_instance() {
    return reinterpret_cast<const TxnReadyReply*>(
               &_TxnReadyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TxnReadyReply* other);
  friend void swap(TxnReadyReply& a, TxnReadyReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxnReadyReply* New() const final {
    return CreateMaybeMessage<TxnReadyReply>(NULL);
  }

  TxnReadyReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TxnReadyReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TxnReadyReply& from);
  void MergeFrom(const TxnReadyReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxnReadyReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.TxnReadyReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InitWlDoneRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.InitWlDoneRequest) */ {
 public:
  InitWlDoneRequest();
  virtual ~InitWlDoneRequest();

  InitWlDoneRequest(const InitWlDoneRequest& from);

  inline InitWlDoneRequest& operator=(const InitWlDoneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitWlDoneRequest(InitWlDoneRequest&& from) noexcept
    : InitWlDoneRequest() {
    *this = ::std::move(from);
  }

  inline InitWlDoneRequest& operator=(InitWlDoneRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InitWlDoneRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitWlDoneRequest* internal_default_instance() {
    return reinterpret_cast<const InitWlDoneRequest*>(
               &_InitWlDoneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(InitWlDoneRequest* other);
  friend void swap(InitWlDoneRequest& a, InitWlDoneRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitWlDoneRequest* New() const final {
    return CreateMaybeMessage<InitWlDoneRequest>(NULL);
  }

  InitWlDoneRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitWlDoneRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InitWlDoneRequest& from);
  void MergeFrom(const InitWlDoneRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitWlDoneRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.InitWlDoneRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InitWlDoneReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.InitWlDoneReply) */ {
 public:
  InitWlDoneReply();
  virtual ~InitWlDoneReply();

  InitWlDoneReply(const InitWlDoneReply& from);

  inline InitWlDoneReply& operator=(const InitWlDoneReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitWlDoneReply(InitWlDoneReply&& from) noexcept
    : InitWlDoneReply() {
    *this = ::std::move(from);
  }

  inline InitWlDoneReply& operator=(InitWlDoneReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InitWlDoneReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitWlDoneReply* internal_default_instance() {
    return reinterpret_cast<const InitWlDoneReply*>(
               &_InitWlDoneReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(InitWlDoneReply* other);
  friend void swap(InitWlDoneReply& a, InitWlDoneReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitWlDoneReply* New() const final {
    return CreateMaybeMessage<InitWlDoneReply>(NULL);
  }

  InitWlDoneReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitWlDoneReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InitWlDoneReply& from);
  void MergeFrom(const InitWlDoneReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitWlDoneReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_done = 1;
  void clear_is_done();
  static const int kIsDoneFieldNumber = 1;
  bool is_done() const;
  void set_is_done(bool value);

  // @@protoc_insertion_point(class_scope:dbx1000.InitWlDoneReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_done_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mess_RowItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.Mess_RowItem) */ {
 public:
  Mess_RowItem();
  virtual ~Mess_RowItem();

  Mess_RowItem(const Mess_RowItem& from);

  inline Mess_RowItem& operator=(const Mess_RowItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mess_RowItem(Mess_RowItem&& from) noexcept
    : Mess_RowItem() {
    *this = ::std::move(from);
  }

  inline Mess_RowItem& operator=(Mess_RowItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mess_RowItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mess_RowItem* internal_default_instance() {
    return reinterpret_cast<const Mess_RowItem*>(
               &_Mess_RowItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Mess_RowItem* other);
  friend void swap(Mess_RowItem& a, Mess_RowItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mess_RowItem* New() const final {
    return CreateMaybeMessage<Mess_RowItem>(NULL);
  }

  Mess_RowItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mess_RowItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mess_RowItem& from);
  void MergeFrom(const Mess_RowItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mess_RowItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes row = 2;
  void clear_row();
  static const int kRowFieldNumber = 2;
  const ::std::string& row() const;
  void set_row(const ::std::string& value);
  #if LANG_CXX11
  void set_row(::std::string&& value);
  #endif
  void set_row(const char* value);
  void set_row(const void* value, size_t size);
  ::std::string* mutable_row();
  ::std::string* release_row();
  void set_allocated_row(::std::string* row);

  // uint64 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::uint64 key() const;
  void set_key(::google::protobuf::uint64 value);

  // uint64 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.Mess_RowItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr row_;
  ::google::protobuf::uint64 key_;
  ::google::protobuf::uint64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mess_TxnRowMan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.Mess_TxnRowMan) */ {
 public:
  Mess_TxnRowMan();
  virtual ~Mess_TxnRowMan();

  Mess_TxnRowMan(const Mess_TxnRowMan& from);

  inline Mess_TxnRowMan& operator=(const Mess_TxnRowMan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mess_TxnRowMan(Mess_TxnRowMan&& from) noexcept
    : Mess_TxnRowMan() {
    *this = ::std::move(from);
  }

  inline Mess_TxnRowMan& operator=(Mess_TxnRowMan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mess_TxnRowMan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mess_TxnRowMan* internal_default_instance() {
    return reinterpret_cast<const Mess_TxnRowMan*>(
               &_Mess_TxnRowMan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Mess_TxnRowMan* other);
  friend void swap(Mess_TxnRowMan& a, Mess_TxnRowMan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mess_TxnRowMan* New() const final {
    return CreateMaybeMessage<Mess_TxnRowMan>(NULL);
  }

  Mess_TxnRowMan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mess_TxnRowMan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mess_TxnRowMan& from);
  void MergeFrom(const Mess_TxnRowMan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mess_TxnRowMan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dbx1000.Mess_RowItem cur_row = 4;
  bool has_cur_row() const;
  void clear_cur_row();
  static const int kCurRowFieldNumber = 4;
  private:
  const ::dbx1000::Mess_RowItem& _internal_cur_row() const;
  public:
  const ::dbx1000::Mess_RowItem& cur_row() const;
  ::dbx1000::Mess_RowItem* release_cur_row();
  ::dbx1000::Mess_RowItem* mutable_cur_row();
  void set_allocated_cur_row(::dbx1000::Mess_RowItem* cur_row);

  // uint64 thread_id = 1;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 1;
  ::google::protobuf::uint64 thread_id() const;
  void set_thread_id(::google::protobuf::uint64 value);

  // uint64 txn_id = 2;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 2;
  ::google::protobuf::uint64 txn_id() const;
  void set_txn_id(::google::protobuf::uint64 value);

  // uint64 timestamp = 5;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // bool ts_ready = 3;
  void clear_ts_ready();
  static const int kTsReadyFieldNumber = 3;
  bool ts_ready() const;
  void set_ts_ready(bool value);

  // @@protoc_insertion_point(class_scope:dbx1000.Mess_TxnRowMan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dbx1000::Mess_RowItem* cur_row_;
  ::google::protobuf::uint64 thread_id_;
  ::google::protobuf::uint64 txn_id_;
  ::google::protobuf::uint64 timestamp_;
  bool ts_ready_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.GetRowRequest) */ {
 public:
  GetRowRequest();
  virtual ~GetRowRequest();

  GetRowRequest(const GetRowRequest& from);

  inline GetRowRequest& operator=(const GetRowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRowRequest(GetRowRequest&& from) noexcept
    : GetRowRequest() {
    *this = ::std::move(from);
  }

  inline GetRowRequest& operator=(GetRowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRowRequest* internal_default_instance() {
    return reinterpret_cast<const GetRowRequest*>(
               &_GetRowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetRowRequest* other);
  friend void swap(GetRowRequest& a, GetRowRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRowRequest* New() const final {
    return CreateMaybeMessage<GetRowRequest>(NULL);
  }

  GetRowRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRowRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRowRequest& from);
  void MergeFrom(const GetRowRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dbx1000.Mess_TxnRowMan txnman = 3;
  bool has_txnman() const;
  void clear_txnman();
  static const int kTxnmanFieldNumber = 3;
  private:
  const ::dbx1000::Mess_TxnRowMan& _internal_txnman() const;
  public:
  const ::dbx1000::Mess_TxnRowMan& txnman() const;
  ::dbx1000::Mess_TxnRowMan* release_txnman();
  ::dbx1000::Mess_TxnRowMan* mutable_txnman();
  void set_allocated_txnman(::dbx1000::Mess_TxnRowMan* txnman);

  // uint64 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::uint64 key() const;
  void set_key(::google::protobuf::uint64 value);

  // int32 ts_type = 2;
  void clear_ts_type();
  static const int kTsTypeFieldNumber = 2;
  ::google::protobuf::int32 ts_type() const;
  void set_ts_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dbx1000.GetRowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dbx1000::Mess_TxnRowMan* txnman_;
  ::google::protobuf::uint64 key_;
  ::google::protobuf::int32 ts_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRowReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.GetRowReply) */ {
 public:
  GetRowReply();
  virtual ~GetRowReply();

  GetRowReply(const GetRowReply& from);

  inline GetRowReply& operator=(const GetRowReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRowReply(GetRowReply&& from) noexcept
    : GetRowReply() {
    *this = ::std::move(from);
  }

  inline GetRowReply& operator=(GetRowReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRowReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRowReply* internal_default_instance() {
    return reinterpret_cast<const GetRowReply*>(
               &_GetRowReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetRowReply* other);
  friend void swap(GetRowReply& a, GetRowReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRowReply* New() const final {
    return CreateMaybeMessage<GetRowReply>(NULL);
  }

  GetRowReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRowReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRowReply& from);
  void MergeFrom(const GetRowReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRowReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes row = 2;
  void clear_row();
  static const int kRowFieldNumber = 2;
  const ::std::string& row() const;
  void set_row(const ::std::string& value);
  #if LANG_CXX11
  void set_row(::std::string&& value);
  #endif
  void set_row(const char* value);
  void set_row(const void* value, size_t size);
  ::std::string* mutable_row();
  ::std::string* release_row();
  void set_allocated_row(::std::string* row);

  // uint64 run_time = 3;
  void clear_run_time();
  static const int kRunTimeFieldNumber = 3;
  ::google::protobuf::uint64 run_time() const;
  void set_run_time(::google::protobuf::uint64 value);

  // int32 rc = 1;
  void clear_rc();
  static const int kRcFieldNumber = 1;
  ::google::protobuf::int32 rc() const;
  void set_rc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dbx1000.GetRowReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr row_;
  ::google::protobuf::uint64 run_time_;
  ::google::protobuf::int32 rc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReturnRowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.ReturnRowRequest) */ {
 public:
  ReturnRowRequest();
  virtual ~ReturnRowRequest();

  ReturnRowRequest(const ReturnRowRequest& from);

  inline ReturnRowRequest& operator=(const ReturnRowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReturnRowRequest(ReturnRowRequest&& from) noexcept
    : ReturnRowRequest() {
    *this = ::std::move(from);
  }

  inline ReturnRowRequest& operator=(ReturnRowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReturnRowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReturnRowRequest* internal_default_instance() {
    return reinterpret_cast<const ReturnRowRequest*>(
               &_ReturnRowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ReturnRowRequest* other);
  friend void swap(ReturnRowRequest& a, ReturnRowRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReturnRowRequest* New() const final {
    return CreateMaybeMessage<ReturnRowRequest>(NULL);
  }

  ReturnRowRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReturnRowRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReturnRowRequest& from);
  void MergeFrom(const ReturnRowRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnRowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dbx1000.Mess_TxnRowMan txnman = 3;
  bool has_txnman() const;
  void clear_txnman();
  static const int kTxnmanFieldNumber = 3;
  private:
  const ::dbx1000::Mess_TxnRowMan& _internal_txnman() const;
  public:
  const ::dbx1000::Mess_TxnRowMan& txnman() const;
  ::dbx1000::Mess_TxnRowMan* release_txnman();
  ::dbx1000::Mess_TxnRowMan* mutable_txnman();
  void set_allocated_txnman(::dbx1000::Mess_TxnRowMan* txnman);

  // uint64 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::uint64 key() const;
  void set_key(::google::protobuf::uint64 value);

  // int32 ts_type = 2;
  void clear_ts_type();
  static const int kTsTypeFieldNumber = 2;
  ::google::protobuf::int32 ts_type() const;
  void set_ts_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dbx1000.ReturnRowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dbx1000::Mess_TxnRowMan* txnman_;
  ::google::protobuf::uint64 key_;
  ::google::protobuf::int32 ts_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReturnRowReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.ReturnRowReply) */ {
 public:
  ReturnRowReply();
  virtual ~ReturnRowReply();

  ReturnRowReply(const ReturnRowReply& from);

  inline ReturnRowReply& operator=(const ReturnRowReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReturnRowReply(ReturnRowReply&& from) noexcept
    : ReturnRowReply() {
    *this = ::std::move(from);
  }

  inline ReturnRowReply& operator=(ReturnRowReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReturnRowReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReturnRowReply* internal_default_instance() {
    return reinterpret_cast<const ReturnRowReply*>(
               &_ReturnRowReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ReturnRowReply* other);
  friend void swap(ReturnRowReply& a, ReturnRowReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReturnRowReply* New() const final {
    return CreateMaybeMessage<ReturnRowReply>(NULL);
  }

  ReturnRowReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReturnRowReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReturnRowReply& from);
  void MergeFrom(const ReturnRowReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnRowReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 run_time = 1;
  void clear_run_time();
  static const int kRunTimeFieldNumber = 1;
  ::google::protobuf::uint64 run_time() const;
  void set_run_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.ReturnRowReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 run_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetWlSimDoneRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.SetWlSimDoneRequest) */ {
 public:
  SetWlSimDoneRequest();
  virtual ~SetWlSimDoneRequest();

  SetWlSimDoneRequest(const SetWlSimDoneRequest& from);

  inline SetWlSimDoneRequest& operator=(const SetWlSimDoneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetWlSimDoneRequest(SetWlSimDoneRequest&& from) noexcept
    : SetWlSimDoneRequest() {
    *this = ::std::move(from);
  }

  inline SetWlSimDoneRequest& operator=(SetWlSimDoneRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetWlSimDoneRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetWlSimDoneRequest* internal_default_instance() {
    return reinterpret_cast<const SetWlSimDoneRequest*>(
               &_SetWlSimDoneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SetWlSimDoneRequest* other);
  friend void swap(SetWlSimDoneRequest& a, SetWlSimDoneRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetWlSimDoneRequest* New() const final {
    return CreateMaybeMessage<SetWlSimDoneRequest>(NULL);
  }

  SetWlSimDoneRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetWlSimDoneRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetWlSimDoneRequest& from);
  void MergeFrom(const SetWlSimDoneRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetWlSimDoneRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.SetWlSimDoneRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetWlSimDoneReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.SetWlSimDoneReply) */ {
 public:
  SetWlSimDoneReply();
  virtual ~SetWlSimDoneReply();

  SetWlSimDoneReply(const SetWlSimDoneReply& from);

  inline SetWlSimDoneReply& operator=(const SetWlSimDoneReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetWlSimDoneReply(SetWlSimDoneReply&& from) noexcept
    : SetWlSimDoneReply() {
    *this = ::std::move(from);
  }

  inline SetWlSimDoneReply& operator=(SetWlSimDoneReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetWlSimDoneReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetWlSimDoneReply* internal_default_instance() {
    return reinterpret_cast<const SetWlSimDoneReply*>(
               &_SetWlSimDoneReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SetWlSimDoneReply* other);
  friend void swap(SetWlSimDoneReply& a, SetWlSimDoneReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetWlSimDoneReply* New() const final {
    return CreateMaybeMessage<SetWlSimDoneReply>(NULL);
  }

  SetWlSimDoneReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetWlSimDoneReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetWlSimDoneReply& from);
  void MergeFrom(const SetWlSimDoneReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetWlSimDoneReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.SetWlSimDoneReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetWlSimDoneRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.GetWlSimDoneRequest) */ {
 public:
  GetWlSimDoneRequest();
  virtual ~GetWlSimDoneRequest();

  GetWlSimDoneRequest(const GetWlSimDoneRequest& from);

  inline GetWlSimDoneRequest& operator=(const GetWlSimDoneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetWlSimDoneRequest(GetWlSimDoneRequest&& from) noexcept
    : GetWlSimDoneRequest() {
    *this = ::std::move(from);
  }

  inline GetWlSimDoneRequest& operator=(GetWlSimDoneRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetWlSimDoneRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetWlSimDoneRequest* internal_default_instance() {
    return reinterpret_cast<const GetWlSimDoneRequest*>(
               &_GetWlSimDoneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GetWlSimDoneRequest* other);
  friend void swap(GetWlSimDoneRequest& a, GetWlSimDoneRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetWlSimDoneRequest* New() const final {
    return CreateMaybeMessage<GetWlSimDoneRequest>(NULL);
  }

  GetWlSimDoneRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetWlSimDoneRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetWlSimDoneRequest& from);
  void MergeFrom(const GetWlSimDoneRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWlSimDoneRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.GetWlSimDoneRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetWlSimDoneReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.GetWlSimDoneReply) */ {
 public:
  GetWlSimDoneReply();
  virtual ~GetWlSimDoneReply();

  GetWlSimDoneReply(const GetWlSimDoneReply& from);

  inline GetWlSimDoneReply& operator=(const GetWlSimDoneReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetWlSimDoneReply(GetWlSimDoneReply&& from) noexcept
    : GetWlSimDoneReply() {
    *this = ::std::move(from);
  }

  inline GetWlSimDoneReply& operator=(GetWlSimDoneReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetWlSimDoneReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetWlSimDoneReply* internal_default_instance() {
    return reinterpret_cast<const GetWlSimDoneReply*>(
               &_GetWlSimDoneReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GetWlSimDoneReply* other);
  friend void swap(GetWlSimDoneReply& a, GetWlSimDoneReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetWlSimDoneReply* New() const final {
    return CreateMaybeMessage<GetWlSimDoneReply>(NULL);
  }

  GetWlSimDoneReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetWlSimDoneReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetWlSimDoneReply& from);
  void MergeFrom(const GetWlSimDoneReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWlSimDoneReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool sim_done = 1;
  void clear_sim_done();
  static const int kSimDoneFieldNumber = 1;
  bool sim_done() const;
  void set_sim_done(bool value);

  // @@protoc_insertion_point(class_scope:dbx1000.GetWlSimDoneReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool sim_done_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetTsReadyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.SetTsReadyRequest) */ {
 public:
  SetTsReadyRequest();
  virtual ~SetTsReadyRequest();

  SetTsReadyRequest(const SetTsReadyRequest& from);

  inline SetTsReadyRequest& operator=(const SetTsReadyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetTsReadyRequest(SetTsReadyRequest&& from) noexcept
    : SetTsReadyRequest() {
    *this = ::std::move(from);
  }

  inline SetTsReadyRequest& operator=(SetTsReadyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetTsReadyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTsReadyRequest* internal_default_instance() {
    return reinterpret_cast<const SetTsReadyRequest*>(
               &_SetTsReadyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(SetTsReadyRequest* other);
  friend void swap(SetTsReadyRequest& a, SetTsReadyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetTsReadyRequest* New() const final {
    return CreateMaybeMessage<SetTsReadyRequest>(NULL);
  }

  SetTsReadyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetTsReadyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetTsReadyRequest& from);
  void MergeFrom(const SetTsReadyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTsReadyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .dbx1000.Mess_RowItem cur_row = 2;
  bool has_cur_row() const;
  void clear_cur_row();
  static const int kCurRowFieldNumber = 2;
  private:
  const ::dbx1000::Mess_RowItem& _internal_cur_row() const;
  public:
  const ::dbx1000::Mess_RowItem& cur_row() const;
  ::dbx1000::Mess_RowItem* release_cur_row();
  ::dbx1000::Mess_RowItem* mutable_cur_row();
  void set_allocated_cur_row(::dbx1000::Mess_RowItem* cur_row);

  // uint64 thread_id = 1;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 1;
  ::google::protobuf::uint64 thread_id() const;
  void set_thread_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.SetTsReadyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::dbx1000::Mess_RowItem* cur_row_;
  ::google::protobuf::uint64 thread_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetTsReadyReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.SetTsReadyReply) */ {
 public:
  SetTsReadyReply();
  virtual ~SetTsReadyReply();

  SetTsReadyReply(const SetTsReadyReply& from);

  inline SetTsReadyReply& operator=(const SetTsReadyReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetTsReadyReply(SetTsReadyReply&& from) noexcept
    : SetTsReadyReply() {
    *this = ::std::move(from);
  }

  inline SetTsReadyReply& operator=(SetTsReadyReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetTsReadyReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTsReadyReply* internal_default_instance() {
    return reinterpret_cast<const SetTsReadyReply*>(
               &_SetTsReadyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SetTsReadyReply* other);
  friend void swap(SetTsReadyReply& a, SetTsReadyReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetTsReadyReply* New() const final {
    return CreateMaybeMessage<SetTsReadyReply>(NULL);
  }

  SetTsReadyReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetTsReadyReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetTsReadyReply& from);
  void MergeFrom(const SetTsReadyReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTsReadyReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.SetTsReadyReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNextTsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.GetNextTsRequest) */ {
 public:
  GetNextTsRequest();
  virtual ~GetNextTsRequest();

  GetNextTsRequest(const GetNextTsRequest& from);

  inline GetNextTsRequest& operator=(const GetNextTsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNextTsRequest(GetNextTsRequest&& from) noexcept
    : GetNextTsRequest() {
    *this = ::std::move(from);
  }

  inline GetNextTsRequest& operator=(GetNextTsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNextTsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNextTsRequest* internal_default_instance() {
    return reinterpret_cast<const GetNextTsRequest*>(
               &_GetNextTsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(GetNextTsRequest* other);
  friend void swap(GetNextTsRequest& a, GetNextTsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNextTsRequest* New() const final {
    return CreateMaybeMessage<GetNextTsRequest>(NULL);
  }

  GetNextTsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNextTsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNextTsRequest& from);
  void MergeFrom(const GetNextTsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNextTsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 thread_id = 1;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 1;
  ::google::protobuf::uint64 thread_id() const;
  void set_thread_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.GetNextTsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 thread_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNextTsReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.GetNextTsReply) */ {
 public:
  GetNextTsReply();
  virtual ~GetNextTsReply();

  GetNextTsReply(const GetNextTsReply& from);

  inline GetNextTsReply& operator=(const GetNextTsReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNextTsReply(GetNextTsReply&& from) noexcept
    : GetNextTsReply() {
    *this = ::std::move(from);
  }

  inline GetNextTsReply& operator=(GetNextTsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNextTsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNextTsReply* internal_default_instance() {
    return reinterpret_cast<const GetNextTsReply*>(
               &_GetNextTsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(GetNextTsReply* other);
  friend void swap(GetNextTsReply& a, GetNextTsReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNextTsReply* New() const final {
    return CreateMaybeMessage<GetNextTsReply>(NULL);
  }

  GetNextTsReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNextTsReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNextTsReply& from);
  void MergeFrom(const GetNextTsReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNextTsReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint64 run_time = 2;
  void clear_run_time();
  static const int kRunTimeFieldNumber = 2;
  ::google::protobuf::uint64 run_time() const;
  void set_run_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.GetNextTsReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint64 run_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddTsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.AddTsRequest) */ {
 public:
  AddTsRequest();
  virtual ~AddTsRequest();

  AddTsRequest(const AddTsRequest& from);

  inline AddTsRequest& operator=(const AddTsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddTsRequest(AddTsRequest&& from) noexcept
    : AddTsRequest() {
    *this = ::std::move(from);
  }

  inline AddTsRequest& operator=(AddTsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddTsRequest* internal_default_instance() {
    return reinterpret_cast<const AddTsRequest*>(
               &_AddTsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(AddTsRequest* other);
  friend void swap(AddTsRequest& a, AddTsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddTsRequest* New() const final {
    return CreateMaybeMessage<AddTsRequest>(NULL);
  }

  AddTsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddTsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddTsRequest& from);
  void MergeFrom(const AddTsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 thread_id = 1;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 1;
  ::google::protobuf::uint64 thread_id() const;
  void set_thread_id(::google::protobuf::uint64 value);

  // uint64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.AddTsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 thread_id_;
  ::google::protobuf::uint64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddTsReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.AddTsReply) */ {
 public:
  AddTsReply();
  virtual ~AddTsReply();

  AddTsReply(const AddTsReply& from);

  inline AddTsReply& operator=(const AddTsReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddTsReply(AddTsReply&& from) noexcept
    : AddTsReply() {
    *this = ::std::move(from);
  }

  inline AddTsReply& operator=(AddTsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddTsReply* internal_default_instance() {
    return reinterpret_cast<const AddTsReply*>(
               &_AddTsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(AddTsReply* other);
  friend void swap(AddTsReply& a, AddTsReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddTsReply* New() const final {
    return CreateMaybeMessage<AddTsReply>(NULL);
  }

  AddTsReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddTsReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddTsReply& from);
  void MergeFrom(const AddTsReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTsReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.AddTsReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.TestRequest) */ {
 public:
  TestRequest();
  virtual ~TestRequest();

  TestRequest(const TestRequest& from);

  inline TestRequest& operator=(const TestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestRequest(TestRequest&& from) noexcept
    : TestRequest() {
    *this = ::std::move(from);
  }

  inline TestRequest& operator=(TestRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestRequest* internal_default_instance() {
    return reinterpret_cast<const TestRequest*>(
               &_TestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(TestRequest* other);
  friend void swap(TestRequest& a, TestRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestRequest* New() const final {
    return CreateMaybeMessage<TestRequest>(NULL);
  }

  TestRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestRequest& from);
  void MergeFrom(const TestRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.TestRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.TestReply) */ {
 public:
  TestReply();
  virtual ~TestReply();

  TestReply(const TestReply& from);

  inline TestReply& operator=(const TestReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestReply(TestReply&& from) noexcept
    : TestReply() {
    *this = ::std::move(from);
  }

  inline TestReply& operator=(TestReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TestReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestReply* internal_default_instance() {
    return reinterpret_cast<const TestReply*>(
               &_TestReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(TestReply* other);
  friend void swap(TestReply& a, TestReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestReply* New() const final {
    return CreateMaybeMessage<TestReply>(NULL);
  }

  TestReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestReply& from);
  void MergeFrom(const TestReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.TestReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ThreadDoneRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.ThreadDoneRequest) */ {
 public:
  ThreadDoneRequest();
  virtual ~ThreadDoneRequest();

  ThreadDoneRequest(const ThreadDoneRequest& from);

  inline ThreadDoneRequest& operator=(const ThreadDoneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThreadDoneRequest(ThreadDoneRequest&& from) noexcept
    : ThreadDoneRequest() {
    *this = ::std::move(from);
  }

  inline ThreadDoneRequest& operator=(ThreadDoneRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ThreadDoneRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThreadDoneRequest* internal_default_instance() {
    return reinterpret_cast<const ThreadDoneRequest*>(
               &_ThreadDoneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(ThreadDoneRequest* other);
  friend void swap(ThreadDoneRequest& a, ThreadDoneRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThreadDoneRequest* New() const final {
    return CreateMaybeMessage<ThreadDoneRequest>(NULL);
  }

  ThreadDoneRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ThreadDoneRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ThreadDoneRequest& from);
  void MergeFrom(const ThreadDoneRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadDoneRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 thread_id = 1;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 1;
  ::google::protobuf::uint64 thread_id() const;
  void set_thread_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.ThreadDoneRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 thread_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ThreadDoneReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.ThreadDoneReply) */ {
 public:
  ThreadDoneReply();
  virtual ~ThreadDoneReply();

  ThreadDoneReply(const ThreadDoneReply& from);

  inline ThreadDoneReply& operator=(const ThreadDoneReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThreadDoneReply(ThreadDoneReply&& from) noexcept
    : ThreadDoneReply() {
    *this = ::std::move(from);
  }

  inline ThreadDoneReply& operator=(ThreadDoneReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ThreadDoneReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThreadDoneReply* internal_default_instance() {
    return reinterpret_cast<const ThreadDoneReply*>(
               &_ThreadDoneReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ThreadDoneReply* other);
  friend void swap(ThreadDoneReply& a, ThreadDoneReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThreadDoneReply* New() const final {
    return CreateMaybeMessage<ThreadDoneReply>(NULL);
  }

  ThreadDoneReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ThreadDoneReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ThreadDoneReply& from);
  void MergeFrom(const ThreadDoneReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadDoneReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.ThreadDoneReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRowSizeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.GetRowSizeRequest) */ {
 public:
  GetRowSizeRequest();
  virtual ~GetRowSizeRequest();

  GetRowSizeRequest(const GetRowSizeRequest& from);

  inline GetRowSizeRequest& operator=(const GetRowSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRowSizeRequest(GetRowSizeRequest&& from) noexcept
    : GetRowSizeRequest() {
    *this = ::std::move(from);
  }

  inline GetRowSizeRequest& operator=(GetRowSizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRowSizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRowSizeRequest* internal_default_instance() {
    return reinterpret_cast<const GetRowSizeRequest*>(
               &_GetRowSizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(GetRowSizeRequest* other);
  friend void swap(GetRowSizeRequest& a, GetRowSizeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRowSizeRequest* New() const final {
    return CreateMaybeMessage<GetRowSizeRequest>(NULL);
  }

  GetRowSizeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRowSizeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRowSizeRequest& from);
  void MergeFrom(const GetRowSizeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRowSizeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.GetRowSizeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRowSizeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.GetRowSizeReply) */ {
 public:
  GetRowSizeReply();
  virtual ~GetRowSizeReply();

  GetRowSizeReply(const GetRowSizeReply& from);

  inline GetRowSizeReply& operator=(const GetRowSizeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRowSizeReply(GetRowSizeReply&& from) noexcept
    : GetRowSizeReply() {
    *this = ::std::move(from);
  }

  inline GetRowSizeReply& operator=(GetRowSizeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRowSizeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRowSizeReply* internal_default_instance() {
    return reinterpret_cast<const GetRowSizeReply*>(
               &_GetRowSizeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(GetRowSizeReply* other);
  friend void swap(GetRowSizeReply& a, GetRowSizeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRowSizeReply* New() const final {
    return CreateMaybeMessage<GetRowSizeReply>(NULL);
  }

  GetRowSizeReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRowSizeReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRowSizeReply& from);
  void MergeFrom(const GetRowSizeReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRowSizeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 row_size = 1;
  void clear_row_size();
  static const int kRowSizeFieldNumber = 1;
  ::google::protobuf::uint64 row_size() const;
  void set_row_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.GetRowSizeReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 row_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxnReadyRequest

// uint64 thread_id = 1;
inline void TxnReadyRequest::clear_thread_id() {
  thread_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TxnReadyRequest::thread_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.TxnReadyRequest.thread_id)
  return thread_id_;
}
inline void TxnReadyRequest::set_thread_id(::google::protobuf::uint64 value) {
  
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.TxnReadyRequest.thread_id)
}

// -------------------------------------------------------------------

// TxnReadyReply

// -------------------------------------------------------------------

// InitWlDoneRequest

// -------------------------------------------------------------------

// InitWlDoneReply

// bool is_done = 1;
inline void InitWlDoneReply::clear_is_done() {
  is_done_ = false;
}
inline bool InitWlDoneReply::is_done() const {
  // @@protoc_insertion_point(field_get:dbx1000.InitWlDoneReply.is_done)
  return is_done_;
}
inline void InitWlDoneReply::set_is_done(bool value) {
  
  is_done_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.InitWlDoneReply.is_done)
}

// -------------------------------------------------------------------

// Mess_RowItem

// uint64 key = 1;
inline void Mess_RowItem::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Mess_RowItem::key() const {
  // @@protoc_insertion_point(field_get:dbx1000.Mess_RowItem.key)
  return key_;
}
inline void Mess_RowItem::set_key(::google::protobuf::uint64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.Mess_RowItem.key)
}

// bytes row = 2;
inline void Mess_RowItem::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mess_RowItem::row() const {
  // @@protoc_insertion_point(field_get:dbx1000.Mess_RowItem.row)
  return row_.GetNoArena();
}
inline void Mess_RowItem::set_row(const ::std::string& value) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.Mess_RowItem.row)
}
#if LANG_CXX11
inline void Mess_RowItem::set_row(::std::string&& value) {
  
  row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.Mess_RowItem.row)
}
#endif
inline void Mess_RowItem::set_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.Mess_RowItem.row)
}
inline void Mess_RowItem::set_row(const void* value, size_t size) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.Mess_RowItem.row)
}
inline ::std::string* Mess_RowItem::mutable_row() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.Mess_RowItem.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mess_RowItem::release_row() {
  // @@protoc_insertion_point(field_release:dbx1000.Mess_RowItem.row)
  
  return row_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mess_RowItem::set_allocated_row(::std::string* row) {
  if (row != NULL) {
    
  } else {
    
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.Mess_RowItem.row)
}

// uint64 size = 3;
inline void Mess_RowItem::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Mess_RowItem::size() const {
  // @@protoc_insertion_point(field_get:dbx1000.Mess_RowItem.size)
  return size_;
}
inline void Mess_RowItem::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.Mess_RowItem.size)
}

// -------------------------------------------------------------------

// Mess_TxnRowMan

// uint64 thread_id = 1;
inline void Mess_TxnRowMan::clear_thread_id() {
  thread_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Mess_TxnRowMan::thread_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.Mess_TxnRowMan.thread_id)
  return thread_id_;
}
inline void Mess_TxnRowMan::set_thread_id(::google::protobuf::uint64 value) {
  
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.Mess_TxnRowMan.thread_id)
}

// uint64 txn_id = 2;
inline void Mess_TxnRowMan::clear_txn_id() {
  txn_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Mess_TxnRowMan::txn_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.Mess_TxnRowMan.txn_id)
  return txn_id_;
}
inline void Mess_TxnRowMan::set_txn_id(::google::protobuf::uint64 value) {
  
  txn_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.Mess_TxnRowMan.txn_id)
}

// bool ts_ready = 3;
inline void Mess_TxnRowMan::clear_ts_ready() {
  ts_ready_ = false;
}
inline bool Mess_TxnRowMan::ts_ready() const {
  // @@protoc_insertion_point(field_get:dbx1000.Mess_TxnRowMan.ts_ready)
  return ts_ready_;
}
inline void Mess_TxnRowMan::set_ts_ready(bool value) {
  
  ts_ready_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.Mess_TxnRowMan.ts_ready)
}

// .dbx1000.Mess_RowItem cur_row = 4;
inline bool Mess_TxnRowMan::has_cur_row() const {
  return this != internal_default_instance() && cur_row_ != NULL;
}
inline void Mess_TxnRowMan::clear_cur_row() {
  if (GetArenaNoVirtual() == NULL && cur_row_ != NULL) {
    delete cur_row_;
  }
  cur_row_ = NULL;
}
inline const ::dbx1000::Mess_RowItem& Mess_TxnRowMan::_internal_cur_row() const {
  return *cur_row_;
}
inline const ::dbx1000::Mess_RowItem& Mess_TxnRowMan::cur_row() const {
  const ::dbx1000::Mess_RowItem* p = cur_row_;
  // @@protoc_insertion_point(field_get:dbx1000.Mess_TxnRowMan.cur_row)
  return p != NULL ? *p : *reinterpret_cast<const ::dbx1000::Mess_RowItem*>(
      &::dbx1000::_Mess_RowItem_default_instance_);
}
inline ::dbx1000::Mess_RowItem* Mess_TxnRowMan::release_cur_row() {
  // @@protoc_insertion_point(field_release:dbx1000.Mess_TxnRowMan.cur_row)
  
  ::dbx1000::Mess_RowItem* temp = cur_row_;
  cur_row_ = NULL;
  return temp;
}
inline ::dbx1000::Mess_RowItem* Mess_TxnRowMan::mutable_cur_row() {
  
  if (cur_row_ == NULL) {
    auto* p = CreateMaybeMessage<::dbx1000::Mess_RowItem>(GetArenaNoVirtual());
    cur_row_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dbx1000.Mess_TxnRowMan.cur_row)
  return cur_row_;
}
inline void Mess_TxnRowMan::set_allocated_cur_row(::dbx1000::Mess_RowItem* cur_row) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cur_row_;
  }
  if (cur_row) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cur_row = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cur_row, submessage_arena);
    }
    
  } else {
    
  }
  cur_row_ = cur_row;
  // @@protoc_insertion_point(field_set_allocated:dbx1000.Mess_TxnRowMan.cur_row)
}

// uint64 timestamp = 5;
inline void Mess_TxnRowMan::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Mess_TxnRowMan::timestamp() const {
  // @@protoc_insertion_point(field_get:dbx1000.Mess_TxnRowMan.timestamp)
  return timestamp_;
}
inline void Mess_TxnRowMan::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.Mess_TxnRowMan.timestamp)
}

// -------------------------------------------------------------------

// GetRowRequest

// uint64 key = 1;
inline void GetRowRequest::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetRowRequest::key() const {
  // @@protoc_insertion_point(field_get:dbx1000.GetRowRequest.key)
  return key_;
}
inline void GetRowRequest::set_key(::google::protobuf::uint64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.GetRowRequest.key)
}

// int32 ts_type = 2;
inline void GetRowRequest::clear_ts_type() {
  ts_type_ = 0;
}
inline ::google::protobuf::int32 GetRowRequest::ts_type() const {
  // @@protoc_insertion_point(field_get:dbx1000.GetRowRequest.ts_type)
  return ts_type_;
}
inline void GetRowRequest::set_ts_type(::google::protobuf::int32 value) {
  
  ts_type_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.GetRowRequest.ts_type)
}

// .dbx1000.Mess_TxnRowMan txnman = 3;
inline bool GetRowRequest::has_txnman() const {
  return this != internal_default_instance() && txnman_ != NULL;
}
inline void GetRowRequest::clear_txnman() {
  if (GetArenaNoVirtual() == NULL && txnman_ != NULL) {
    delete txnman_;
  }
  txnman_ = NULL;
}
inline const ::dbx1000::Mess_TxnRowMan& GetRowRequest::_internal_txnman() const {
  return *txnman_;
}
inline const ::dbx1000::Mess_TxnRowMan& GetRowRequest::txnman() const {
  const ::dbx1000::Mess_TxnRowMan* p = txnman_;
  // @@protoc_insertion_point(field_get:dbx1000.GetRowRequest.txnman)
  return p != NULL ? *p : *reinterpret_cast<const ::dbx1000::Mess_TxnRowMan*>(
      &::dbx1000::_Mess_TxnRowMan_default_instance_);
}
inline ::dbx1000::Mess_TxnRowMan* GetRowRequest::release_txnman() {
  // @@protoc_insertion_point(field_release:dbx1000.GetRowRequest.txnman)
  
  ::dbx1000::Mess_TxnRowMan* temp = txnman_;
  txnman_ = NULL;
  return temp;
}
inline ::dbx1000::Mess_TxnRowMan* GetRowRequest::mutable_txnman() {
  
  if (txnman_ == NULL) {
    auto* p = CreateMaybeMessage<::dbx1000::Mess_TxnRowMan>(GetArenaNoVirtual());
    txnman_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dbx1000.GetRowRequest.txnman)
  return txnman_;
}
inline void GetRowRequest::set_allocated_txnman(::dbx1000::Mess_TxnRowMan* txnman) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete txnman_;
  }
  if (txnman) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txnman = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txnman, submessage_arena);
    }
    
  } else {
    
  }
  txnman_ = txnman;
  // @@protoc_insertion_point(field_set_allocated:dbx1000.GetRowRequest.txnman)
}

// -------------------------------------------------------------------

// GetRowReply

// int32 rc = 1;
inline void GetRowReply::clear_rc() {
  rc_ = 0;
}
inline ::google::protobuf::int32 GetRowReply::rc() const {
  // @@protoc_insertion_point(field_get:dbx1000.GetRowReply.rc)
  return rc_;
}
inline void GetRowReply::set_rc(::google::protobuf::int32 value) {
  
  rc_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.GetRowReply.rc)
}

// bytes row = 2;
inline void GetRowReply::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRowReply::row() const {
  // @@protoc_insertion_point(field_get:dbx1000.GetRowReply.row)
  return row_.GetNoArena();
}
inline void GetRowReply::set_row(const ::std::string& value) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.GetRowReply.row)
}
#if LANG_CXX11
inline void GetRowReply::set_row(::std::string&& value) {
  
  row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.GetRowReply.row)
}
#endif
inline void GetRowReply::set_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.GetRowReply.row)
}
inline void GetRowReply::set_row(const void* value, size_t size) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.GetRowReply.row)
}
inline ::std::string* GetRowReply::mutable_row() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.GetRowReply.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRowReply::release_row() {
  // @@protoc_insertion_point(field_release:dbx1000.GetRowReply.row)
  
  return row_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRowReply::set_allocated_row(::std::string* row) {
  if (row != NULL) {
    
  } else {
    
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.GetRowReply.row)
}

// uint64 run_time = 3;
inline void GetRowReply::clear_run_time() {
  run_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetRowReply::run_time() const {
  // @@protoc_insertion_point(field_get:dbx1000.GetRowReply.run_time)
  return run_time_;
}
inline void GetRowReply::set_run_time(::google::protobuf::uint64 value) {
  
  run_time_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.GetRowReply.run_time)
}

// -------------------------------------------------------------------

// ReturnRowRequest

// uint64 key = 1;
inline void ReturnRowRequest::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReturnRowRequest::key() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReturnRowRequest.key)
  return key_;
}
inline void ReturnRowRequest::set_key(::google::protobuf::uint64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.ReturnRowRequest.key)
}

// int32 ts_type = 2;
inline void ReturnRowRequest::clear_ts_type() {
  ts_type_ = 0;
}
inline ::google::protobuf::int32 ReturnRowRequest::ts_type() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReturnRowRequest.ts_type)
  return ts_type_;
}
inline void ReturnRowRequest::set_ts_type(::google::protobuf::int32 value) {
  
  ts_type_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.ReturnRowRequest.ts_type)
}

// .dbx1000.Mess_TxnRowMan txnman = 3;
inline bool ReturnRowRequest::has_txnman() const {
  return this != internal_default_instance() && txnman_ != NULL;
}
inline void ReturnRowRequest::clear_txnman() {
  if (GetArenaNoVirtual() == NULL && txnman_ != NULL) {
    delete txnman_;
  }
  txnman_ = NULL;
}
inline const ::dbx1000::Mess_TxnRowMan& ReturnRowRequest::_internal_txnman() const {
  return *txnman_;
}
inline const ::dbx1000::Mess_TxnRowMan& ReturnRowRequest::txnman() const {
  const ::dbx1000::Mess_TxnRowMan* p = txnman_;
  // @@protoc_insertion_point(field_get:dbx1000.ReturnRowRequest.txnman)
  return p != NULL ? *p : *reinterpret_cast<const ::dbx1000::Mess_TxnRowMan*>(
      &::dbx1000::_Mess_TxnRowMan_default_instance_);
}
inline ::dbx1000::Mess_TxnRowMan* ReturnRowRequest::release_txnman() {
  // @@protoc_insertion_point(field_release:dbx1000.ReturnRowRequest.txnman)
  
  ::dbx1000::Mess_TxnRowMan* temp = txnman_;
  txnman_ = NULL;
  return temp;
}
inline ::dbx1000::Mess_TxnRowMan* ReturnRowRequest::mutable_txnman() {
  
  if (txnman_ == NULL) {
    auto* p = CreateMaybeMessage<::dbx1000::Mess_TxnRowMan>(GetArenaNoVirtual());
    txnman_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dbx1000.ReturnRowRequest.txnman)
  return txnman_;
}
inline void ReturnRowRequest::set_allocated_txnman(::dbx1000::Mess_TxnRowMan* txnman) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete txnman_;
  }
  if (txnman) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txnman = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txnman, submessage_arena);
    }
    
  } else {
    
  }
  txnman_ = txnman;
  // @@protoc_insertion_point(field_set_allocated:dbx1000.ReturnRowRequest.txnman)
}

// -------------------------------------------------------------------

// ReturnRowReply

// uint64 run_time = 1;
inline void ReturnRowReply::clear_run_time() {
  run_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReturnRowReply::run_time() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReturnRowReply.run_time)
  return run_time_;
}
inline void ReturnRowReply::set_run_time(::google::protobuf::uint64 value) {
  
  run_time_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.ReturnRowReply.run_time)
}

// -------------------------------------------------------------------

// SetWlSimDoneRequest

// -------------------------------------------------------------------

// SetWlSimDoneReply

// -------------------------------------------------------------------

// GetWlSimDoneRequest

// -------------------------------------------------------------------

// GetWlSimDoneReply

// bool sim_done = 1;
inline void GetWlSimDoneReply::clear_sim_done() {
  sim_done_ = false;
}
inline bool GetWlSimDoneReply::sim_done() const {
  // @@protoc_insertion_point(field_get:dbx1000.GetWlSimDoneReply.sim_done)
  return sim_done_;
}
inline void GetWlSimDoneReply::set_sim_done(bool value) {
  
  sim_done_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.GetWlSimDoneReply.sim_done)
}

// -------------------------------------------------------------------

// SetTsReadyRequest

// uint64 thread_id = 1;
inline void SetTsReadyRequest::clear_thread_id() {
  thread_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SetTsReadyRequest::thread_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.SetTsReadyRequest.thread_id)
  return thread_id_;
}
inline void SetTsReadyRequest::set_thread_id(::google::protobuf::uint64 value) {
  
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.SetTsReadyRequest.thread_id)
}

// .dbx1000.Mess_RowItem cur_row = 2;
inline bool SetTsReadyRequest::has_cur_row() const {
  return this != internal_default_instance() && cur_row_ != NULL;
}
inline void SetTsReadyRequest::clear_cur_row() {
  if (GetArenaNoVirtual() == NULL && cur_row_ != NULL) {
    delete cur_row_;
  }
  cur_row_ = NULL;
}
inline const ::dbx1000::Mess_RowItem& SetTsReadyRequest::_internal_cur_row() const {
  return *cur_row_;
}
inline const ::dbx1000::Mess_RowItem& SetTsReadyRequest::cur_row() const {
  const ::dbx1000::Mess_RowItem* p = cur_row_;
  // @@protoc_insertion_point(field_get:dbx1000.SetTsReadyRequest.cur_row)
  return p != NULL ? *p : *reinterpret_cast<const ::dbx1000::Mess_RowItem*>(
      &::dbx1000::_Mess_RowItem_default_instance_);
}
inline ::dbx1000::Mess_RowItem* SetTsReadyRequest::release_cur_row() {
  // @@protoc_insertion_point(field_release:dbx1000.SetTsReadyRequest.cur_row)
  
  ::dbx1000::Mess_RowItem* temp = cur_row_;
  cur_row_ = NULL;
  return temp;
}
inline ::dbx1000::Mess_RowItem* SetTsReadyRequest::mutable_cur_row() {
  
  if (cur_row_ == NULL) {
    auto* p = CreateMaybeMessage<::dbx1000::Mess_RowItem>(GetArenaNoVirtual());
    cur_row_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dbx1000.SetTsReadyRequest.cur_row)
  return cur_row_;
}
inline void SetTsReadyRequest::set_allocated_cur_row(::dbx1000::Mess_RowItem* cur_row) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cur_row_;
  }
  if (cur_row) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cur_row = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cur_row, submessage_arena);
    }
    
  } else {
    
  }
  cur_row_ = cur_row;
  // @@protoc_insertion_point(field_set_allocated:dbx1000.SetTsReadyRequest.cur_row)
}

// -------------------------------------------------------------------

// SetTsReadyReply

// -------------------------------------------------------------------

// GetNextTsRequest

// uint64 thread_id = 1;
inline void GetNextTsRequest::clear_thread_id() {
  thread_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetNextTsRequest::thread_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.GetNextTsRequest.thread_id)
  return thread_id_;
}
inline void GetNextTsRequest::set_thread_id(::google::protobuf::uint64 value) {
  
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.GetNextTsRequest.thread_id)
}

// -------------------------------------------------------------------

// GetNextTsReply

// uint64 timestamp = 1;
inline void GetNextTsReply::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetNextTsReply::timestamp() const {
  // @@protoc_insertion_point(field_get:dbx1000.GetNextTsReply.timestamp)
  return timestamp_;
}
inline void GetNextTsReply::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.GetNextTsReply.timestamp)
}

// uint64 run_time = 2;
inline void GetNextTsReply::clear_run_time() {
  run_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetNextTsReply::run_time() const {
  // @@protoc_insertion_point(field_get:dbx1000.GetNextTsReply.run_time)
  return run_time_;
}
inline void GetNextTsReply::set_run_time(::google::protobuf::uint64 value) {
  
  run_time_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.GetNextTsReply.run_time)
}

// -------------------------------------------------------------------

// AddTsRequest

// uint64 thread_id = 1;
inline void AddTsRequest::clear_thread_id() {
  thread_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddTsRequest::thread_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.AddTsRequest.thread_id)
  return thread_id_;
}
inline void AddTsRequest::set_thread_id(::google::protobuf::uint64 value) {
  
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.AddTsRequest.thread_id)
}

// uint64 timestamp = 2;
inline void AddTsRequest::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddTsRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:dbx1000.AddTsRequest.timestamp)
  return timestamp_;
}
inline void AddTsRequest::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.AddTsRequest.timestamp)
}

// -------------------------------------------------------------------

// AddTsReply

// -------------------------------------------------------------------

// TestRequest

// -------------------------------------------------------------------

// TestReply

// -------------------------------------------------------------------

// ThreadDoneRequest

// uint64 thread_id = 1;
inline void ThreadDoneRequest::clear_thread_id() {
  thread_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ThreadDoneRequest::thread_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.ThreadDoneRequest.thread_id)
  return thread_id_;
}
inline void ThreadDoneRequest::set_thread_id(::google::protobuf::uint64 value) {
  
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.ThreadDoneRequest.thread_id)
}

// -------------------------------------------------------------------

// ThreadDoneReply

// -------------------------------------------------------------------

// GetRowSizeRequest

// -------------------------------------------------------------------

// GetRowSizeReply

// uint64 row_size = 1;
inline void GetRowSizeReply::clear_row_size() {
  row_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetRowSizeReply::row_size() const {
  // @@protoc_insertion_point(field_get:dbx1000.GetRowSizeReply.row_size)
  return row_size_;
}
inline void GetRowSizeReply::set_row_size(::google::protobuf::uint64 value) {
  
  row_size_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.GetRowSizeReply.row_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbx1000

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2eproto
