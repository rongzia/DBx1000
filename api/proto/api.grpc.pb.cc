// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api.proto

#include "api.pb.h"
#include "api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dbx1000 {

static const char* DBx1000Service_method_names[] = {
  "/dbx1000.DBx1000Service/TxnReady",
  "/dbx1000.DBx1000Service/InitWlDone",
  "/dbx1000.DBx1000Service/GetRowSize",
  "/dbx1000.DBx1000Service/GetRow",
  "/dbx1000.DBx1000Service/ReturnRow",
  "/dbx1000.DBx1000Service/SetWlSimDone",
  "/dbx1000.DBx1000Service/GetWlSimDone",
  "/dbx1000.DBx1000Service/GetNextTs",
  "/dbx1000.DBx1000Service/AddTs",
  "/dbx1000.DBx1000Service/GetAndAddTs",
  "/dbx1000.DBx1000Service/ThreadDone",
  "/dbx1000.DBx1000Service/SetTsReady",
  "/dbx1000.DBx1000Service/Test",
};

std::unique_ptr< DBx1000Service::Stub> DBx1000Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DBx1000Service::Stub> stub(new DBx1000Service::Stub(channel));
  return stub;
}

DBx1000Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_TxnReady_(DBx1000Service_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InitWlDone_(DBx1000Service_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRowSize_(DBx1000Service_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRow_(DBx1000Service_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReturnRow_(DBx1000Service_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetWlSimDone_(DBx1000Service_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWlSimDone_(DBx1000Service_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNextTs_(DBx1000Service_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddTs_(DBx1000Service_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAndAddTs_(DBx1000Service_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ThreadDone_(DBx1000Service_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTsReady_(DBx1000Service_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Test_(DBx1000Service_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DBx1000Service::Stub::TxnReady(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest& request, ::dbx1000::TxnReadyReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TxnReady_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::TxnReady(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TxnReady_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::TxnReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::TxnReadyReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TxnReady_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::TxnReady(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TxnReady_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::TxnReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::TxnReadyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TxnReady_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::TxnReadyReply>* DBx1000Service::Stub::AsyncTxnReadyRaw(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::TxnReadyReply>::Create(channel_.get(), cq, rpcmethod_TxnReady_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::TxnReadyReply>* DBx1000Service::Stub::PrepareAsyncTxnReadyRaw(::grpc::ClientContext* context, const ::dbx1000::TxnReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::TxnReadyReply>::Create(channel_.get(), cq, rpcmethod_TxnReady_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::InitWlDone(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest& request, ::dbx1000::InitWlDoneReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InitWlDone_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::InitWlDone(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InitWlDone_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::InitWlDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InitWlDoneReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InitWlDone_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::InitWlDone(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InitWlDone_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::InitWlDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InitWlDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InitWlDone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::InitWlDoneReply>* DBx1000Service::Stub::AsyncInitWlDoneRaw(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::InitWlDoneReply>::Create(channel_.get(), cq, rpcmethod_InitWlDone_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::InitWlDoneReply>* DBx1000Service::Stub::PrepareAsyncInitWlDoneRaw(::grpc::ClientContext* context, const ::dbx1000::InitWlDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::InitWlDoneReply>::Create(channel_.get(), cq, rpcmethod_InitWlDone_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::GetRowSize(::grpc::ClientContext* context, const ::dbx1000::GetRowSizeRequest& request, ::dbx1000::GetRowSizeReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRowSize_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::GetRowSize(::grpc::ClientContext* context, const ::dbx1000::GetRowSizeRequest* request, ::dbx1000::GetRowSizeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRowSize_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetRowSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetRowSizeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRowSize_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetRowSize(::grpc::ClientContext* context, const ::dbx1000::GetRowSizeRequest* request, ::dbx1000::GetRowSizeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRowSize_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::GetRowSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetRowSizeReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRowSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetRowSizeReply>* DBx1000Service::Stub::AsyncGetRowSizeRaw(::grpc::ClientContext* context, const ::dbx1000::GetRowSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetRowSizeReply>::Create(channel_.get(), cq, rpcmethod_GetRowSize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetRowSizeReply>* DBx1000Service::Stub::PrepareAsyncGetRowSizeRaw(::grpc::ClientContext* context, const ::dbx1000::GetRowSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetRowSizeReply>::Create(channel_.get(), cq, rpcmethod_GetRowSize_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::GetRow(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest& request, ::dbx1000::GetRowReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRow_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::GetRow(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRow_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetRow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetRowReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRow_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetRow(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRow_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::GetRow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetRowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetRowReply>* DBx1000Service::Stub::AsyncGetRowRaw(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetRowReply>::Create(channel_.get(), cq, rpcmethod_GetRow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetRowReply>* DBx1000Service::Stub::PrepareAsyncGetRowRaw(::grpc::ClientContext* context, const ::dbx1000::GetRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetRowReply>::Create(channel_.get(), cq, rpcmethod_GetRow_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::ReturnRow(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest& request, ::dbx1000::ReturnRowReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReturnRow_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::ReturnRow(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReturnRow_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::ReturnRow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReturnRowReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReturnRow_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::ReturnRow(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReturnRow_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::ReturnRow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReturnRowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReturnRow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::ReturnRowReply>* DBx1000Service::Stub::AsyncReturnRowRaw(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::ReturnRowReply>::Create(channel_.get(), cq, rpcmethod_ReturnRow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::ReturnRowReply>* DBx1000Service::Stub::PrepareAsyncReturnRowRaw(::grpc::ClientContext* context, const ::dbx1000::ReturnRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::ReturnRowReply>::Create(channel_.get(), cq, rpcmethod_ReturnRow_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::SetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest& request, ::dbx1000::SetWlSimDoneReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetWlSimDone_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::SetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetWlSimDone_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::SetWlSimDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::SetWlSimDoneReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetWlSimDone_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::SetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetWlSimDone_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::SetWlSimDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::SetWlSimDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetWlSimDone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::SetWlSimDoneReply>* DBx1000Service::Stub::AsyncSetWlSimDoneRaw(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::SetWlSimDoneReply>::Create(channel_.get(), cq, rpcmethod_SetWlSimDone_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::SetWlSimDoneReply>* DBx1000Service::Stub::PrepareAsyncSetWlSimDoneRaw(::grpc::ClientContext* context, const ::dbx1000::SetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::SetWlSimDoneReply>::Create(channel_.get(), cq, rpcmethod_SetWlSimDone_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::GetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest& request, ::dbx1000::GetWlSimDoneReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWlSimDone_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::GetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWlSimDone_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetWlSimDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetWlSimDoneReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWlSimDone_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetWlSimDone(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWlSimDone_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::GetWlSimDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetWlSimDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWlSimDone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetWlSimDoneReply>* DBx1000Service::Stub::AsyncGetWlSimDoneRaw(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetWlSimDoneReply>::Create(channel_.get(), cq, rpcmethod_GetWlSimDone_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetWlSimDoneReply>* DBx1000Service::Stub::PrepareAsyncGetWlSimDoneRaw(::grpc::ClientContext* context, const ::dbx1000::GetWlSimDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetWlSimDoneReply>::Create(channel_.get(), cq, rpcmethod_GetWlSimDone_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::dbx1000::GetNextTsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNextTs_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNextTs_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNextTs_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNextTs_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNextTs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>* DBx1000Service::Stub::AsyncGetNextTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetNextTsReply>::Create(channel_.get(), cq, rpcmethod_GetNextTs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>* DBx1000Service::Stub::PrepareAsyncGetNextTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetNextTsReply>::Create(channel_.get(), cq, rpcmethod_GetNextTs_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::AddTs(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest& request, ::dbx1000::AddTsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddTs_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::AddTs(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddTs_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::AddTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::AddTsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddTs_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::AddTs(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddTs_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::AddTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::AddTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddTs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::AddTsReply>* DBx1000Service::Stub::AsyncAddTsRaw(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::AddTsReply>::Create(channel_.get(), cq, rpcmethod_AddTs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::AddTsReply>* DBx1000Service::Stub::PrepareAsyncAddTsRaw(::grpc::ClientContext* context, const ::dbx1000::AddTsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::AddTsReply>::Create(channel_.get(), cq, rpcmethod_AddTs_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::GetAndAddTs(::grpc::ClientContext* context, const ::dbx1000::GetAndAddTsRequest& request, ::dbx1000::GetAndAddTsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAndAddTs_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::GetAndAddTs(::grpc::ClientContext* context, const ::dbx1000::GetAndAddTsRequest* request, ::dbx1000::GetAndAddTsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAndAddTs_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetAndAddTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetAndAddTsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAndAddTs_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetAndAddTs(::grpc::ClientContext* context, const ::dbx1000::GetAndAddTsRequest* request, ::dbx1000::GetAndAddTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAndAddTs_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::GetAndAddTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetAndAddTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAndAddTs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetAndAddTsReply>* DBx1000Service::Stub::AsyncGetAndAddTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetAndAddTsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetAndAddTsReply>::Create(channel_.get(), cq, rpcmethod_GetAndAddTs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetAndAddTsReply>* DBx1000Service::Stub::PrepareAsyncGetAndAddTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetAndAddTsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetAndAddTsReply>::Create(channel_.get(), cq, rpcmethod_GetAndAddTs_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::ThreadDone(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest& request, ::dbx1000::ThreadDoneReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ThreadDone_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::ThreadDone(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ThreadDone_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::ThreadDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ThreadDoneReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ThreadDone_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::ThreadDone(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ThreadDone_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::ThreadDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ThreadDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ThreadDone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::ThreadDoneReply>* DBx1000Service::Stub::AsyncThreadDoneRaw(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::ThreadDoneReply>::Create(channel_.get(), cq, rpcmethod_ThreadDone_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::ThreadDoneReply>* DBx1000Service::Stub::PrepareAsyncThreadDoneRaw(::grpc::ClientContext* context, const ::dbx1000::ThreadDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::ThreadDoneReply>::Create(channel_.get(), cq, rpcmethod_ThreadDone_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::SetTsReady(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest& request, ::dbx1000::SetTsReadyReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTsReady_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::SetTsReady(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTsReady_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::SetTsReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::SetTsReadyReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTsReady_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::SetTsReady(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTsReady_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::SetTsReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::SetTsReadyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTsReady_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::SetTsReadyReply>* DBx1000Service::Stub::AsyncSetTsReadyRaw(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::SetTsReadyReply>::Create(channel_.get(), cq, rpcmethod_SetTsReady_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::SetTsReadyReply>* DBx1000Service::Stub::PrepareAsyncSetTsReadyRaw(::grpc::ClientContext* context, const ::dbx1000::SetTsReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::SetTsReadyReply>::Create(channel_.get(), cq, rpcmethod_SetTsReady_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::Test(::grpc::ClientContext* context, const ::dbx1000::TestRequest& request, ::dbx1000::TestReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Test_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::Test(::grpc::ClientContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Test_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::Test(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::TestReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Test_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::Test(::grpc::ClientContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Test_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::Test(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::TestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Test_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::TestReply>* DBx1000Service::Stub::AsyncTestRaw(::grpc::ClientContext* context, const ::dbx1000::TestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::TestReply>::Create(channel_.get(), cq, rpcmethod_Test_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::TestReply>* DBx1000Service::Stub::PrepareAsyncTestRaw(::grpc::ClientContext* context, const ::dbx1000::TestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::TestReply>::Create(channel_.get(), cq, rpcmethod_Test_, context, request, false);
}

DBx1000Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::TxnReadyRequest, ::dbx1000::TxnReadyReply>(
          std::mem_fn(&DBx1000Service::Service::TxnReady), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::InitWlDoneRequest, ::dbx1000::InitWlDoneReply>(
          std::mem_fn(&DBx1000Service::Service::InitWlDone), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::GetRowSizeRequest, ::dbx1000::GetRowSizeReply>(
          std::mem_fn(&DBx1000Service::Service::GetRowSize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::GetRowRequest, ::dbx1000::GetRowReply>(
          std::mem_fn(&DBx1000Service::Service::GetRow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::ReturnRowRequest, ::dbx1000::ReturnRowReply>(
          std::mem_fn(&DBx1000Service::Service::ReturnRow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::SetWlSimDoneRequest, ::dbx1000::SetWlSimDoneReply>(
          std::mem_fn(&DBx1000Service::Service::SetWlSimDone), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::GetWlSimDoneRequest, ::dbx1000::GetWlSimDoneReply>(
          std::mem_fn(&DBx1000Service::Service::GetWlSimDone), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::GetNextTsRequest, ::dbx1000::GetNextTsReply>(
          std::mem_fn(&DBx1000Service::Service::GetNextTs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::AddTsRequest, ::dbx1000::AddTsReply>(
          std::mem_fn(&DBx1000Service::Service::AddTs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::GetAndAddTsRequest, ::dbx1000::GetAndAddTsReply>(
          std::mem_fn(&DBx1000Service::Service::GetAndAddTs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::ThreadDoneRequest, ::dbx1000::ThreadDoneReply>(
          std::mem_fn(&DBx1000Service::Service::ThreadDone), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::SetTsReadyRequest, ::dbx1000::SetTsReadyReply>(
          std::mem_fn(&DBx1000Service::Service::SetTsReady), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::TestRequest, ::dbx1000::TestReply>(
          std::mem_fn(&DBx1000Service::Service::Test), this)));
}

DBx1000Service::Service::~Service() {
}

::grpc::Status DBx1000Service::Service::TxnReady(::grpc::ServerContext* context, const ::dbx1000::TxnReadyRequest* request, ::dbx1000::TxnReadyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::InitWlDone(::grpc::ServerContext* context, const ::dbx1000::InitWlDoneRequest* request, ::dbx1000::InitWlDoneReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::GetRowSize(::grpc::ServerContext* context, const ::dbx1000::GetRowSizeRequest* request, ::dbx1000::GetRowSizeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::GetRow(::grpc::ServerContext* context, const ::dbx1000::GetRowRequest* request, ::dbx1000::GetRowReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::ReturnRow(::grpc::ServerContext* context, const ::dbx1000::ReturnRowRequest* request, ::dbx1000::ReturnRowReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::SetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::SetWlSimDoneRequest* request, ::dbx1000::SetWlSimDoneReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::GetWlSimDone(::grpc::ServerContext* context, const ::dbx1000::GetWlSimDoneRequest* request, ::dbx1000::GetWlSimDoneReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::GetNextTs(::grpc::ServerContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::AddTs(::grpc::ServerContext* context, const ::dbx1000::AddTsRequest* request, ::dbx1000::AddTsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::GetAndAddTs(::grpc::ServerContext* context, const ::dbx1000::GetAndAddTsRequest* request, ::dbx1000::GetAndAddTsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::ThreadDone(::grpc::ServerContext* context, const ::dbx1000::ThreadDoneRequest* request, ::dbx1000::ThreadDoneReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::SetTsReady(::grpc::ServerContext* context, const ::dbx1000::SetTsReadyRequest* request, ::dbx1000::SetTsReadyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::Test(::grpc::ServerContext* context, const ::dbx1000::TestRequest* request, ::dbx1000::TestReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dbx1000

