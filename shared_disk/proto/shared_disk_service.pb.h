// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared_disk_service.proto

#ifndef PROTOBUF_INCLUDED_shared_5fdisk_5fservice_2eproto
#define PROTOBUF_INCLUDED_shared_5fdisk_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_shared_5fdisk_5fservice_2eproto 

namespace protobuf_shared_5fdisk_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_shared_5fdisk_5fservice_2eproto
namespace dbx1000 {
class CloseAllReply;
class CloseAllReplyDefaultTypeInternal;
extern CloseAllReplyDefaultTypeInternal _CloseAllReply_default_instance_;
class CloseAllRequest;
class CloseAllRequestDefaultTypeInternal;
extern CloseAllRequestDefaultTypeInternal _CloseAllRequest_default_instance_;
class CloseReply;
class CloseReplyDefaultTypeInternal;
extern CloseReplyDefaultTypeInternal _CloseReply_default_instance_;
class CloseRequest;
class CloseRequestDefaultTypeInternal;
extern CloseRequestDefaultTypeInternal _CloseRequest_default_instance_;
class OpenReply;
class OpenReplyDefaultTypeInternal;
extern OpenReplyDefaultTypeInternal _OpenReply_default_instance_;
class OpenRequest;
class OpenRequestDefaultTypeInternal;
extern OpenRequestDefaultTypeInternal _OpenRequest_default_instance_;
class ReadPageReply;
class ReadPageReplyDefaultTypeInternal;
extern ReadPageReplyDefaultTypeInternal _ReadPageReply_default_instance_;
class ReadPageRequest;
class ReadPageRequestDefaultTypeInternal;
extern ReadPageRequestDefaultTypeInternal _ReadPageRequest_default_instance_;
class ReadReply;
class ReadReplyDefaultTypeInternal;
extern ReadReplyDefaultTypeInternal _ReadReply_default_instance_;
class ReadRequest;
class ReadRequestDefaultTypeInternal;
extern ReadRequestDefaultTypeInternal _ReadRequest_default_instance_;
class WritePageReply;
class WritePageReplyDefaultTypeInternal;
extern WritePageReplyDefaultTypeInternal _WritePageReply_default_instance_;
class WritePageRequest;
class WritePageRequestDefaultTypeInternal;
extern WritePageRequestDefaultTypeInternal _WritePageRequest_default_instance_;
class WriteReply;
class WriteReplyDefaultTypeInternal;
extern WriteReplyDefaultTypeInternal _WriteReply_default_instance_;
class WriteRequest;
class WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
}  // namespace dbx1000
namespace google {
namespace protobuf {
template<> ::dbx1000::CloseAllReply* Arena::CreateMaybeMessage<::dbx1000::CloseAllReply>(Arena*);
template<> ::dbx1000::CloseAllRequest* Arena::CreateMaybeMessage<::dbx1000::CloseAllRequest>(Arena*);
template<> ::dbx1000::CloseReply* Arena::CreateMaybeMessage<::dbx1000::CloseReply>(Arena*);
template<> ::dbx1000::CloseRequest* Arena::CreateMaybeMessage<::dbx1000::CloseRequest>(Arena*);
template<> ::dbx1000::OpenReply* Arena::CreateMaybeMessage<::dbx1000::OpenReply>(Arena*);
template<> ::dbx1000::OpenRequest* Arena::CreateMaybeMessage<::dbx1000::OpenRequest>(Arena*);
template<> ::dbx1000::ReadPageReply* Arena::CreateMaybeMessage<::dbx1000::ReadPageReply>(Arena*);
template<> ::dbx1000::ReadPageRequest* Arena::CreateMaybeMessage<::dbx1000::ReadPageRequest>(Arena*);
template<> ::dbx1000::ReadReply* Arena::CreateMaybeMessage<::dbx1000::ReadReply>(Arena*);
template<> ::dbx1000::ReadRequest* Arena::CreateMaybeMessage<::dbx1000::ReadRequest>(Arena*);
template<> ::dbx1000::WritePageReply* Arena::CreateMaybeMessage<::dbx1000::WritePageReply>(Arena*);
template<> ::dbx1000::WritePageRequest* Arena::CreateMaybeMessage<::dbx1000::WritePageRequest>(Arena*);
template<> ::dbx1000::WriteReply* Arena::CreateMaybeMessage<::dbx1000::WriteReply>(Arena*);
template<> ::dbx1000::WriteRequest* Arena::CreateMaybeMessage<::dbx1000::WriteRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dbx1000 {

// ===================================================================

class OpenRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.OpenRequest) */ {
 public:
  OpenRequest();
  virtual ~OpenRequest();

  OpenRequest(const OpenRequest& from);

  inline OpenRequest& operator=(const OpenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenRequest(OpenRequest&& from) noexcept
    : OpenRequest() {
    *this = ::std::move(from);
  }

  inline OpenRequest& operator=(OpenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenRequest* internal_default_instance() {
    return reinterpret_cast<const OpenRequest*>(
               &_OpenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OpenRequest* other);
  friend void swap(OpenRequest& a, OpenRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenRequest* New() const final {
    return CreateMaybeMessage<OpenRequest>(NULL);
  }

  OpenRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenRequest& from);
  void MergeFrom(const OpenRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:dbx1000.OpenRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpenReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.OpenReply) */ {
 public:
  OpenReply();
  virtual ~OpenReply();

  OpenReply(const OpenReply& from);

  inline OpenReply& operator=(const OpenReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenReply(OpenReply&& from) noexcept
    : OpenReply() {
    *this = ::std::move(from);
  }

  inline OpenReply& operator=(OpenReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenReply* internal_default_instance() {
    return reinterpret_cast<const OpenReply*>(
               &_OpenReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OpenReply* other);
  friend void swap(OpenReply& a, OpenReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenReply* New() const final {
    return CreateMaybeMessage<OpenReply>(NULL);
  }

  OpenReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenReply& from);
  void MergeFrom(const OpenReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 fd = 1;
  void clear_fd();
  static const int kFdFieldNumber = 1;
  ::google::protobuf::int32 fd() const;
  void set_fd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dbx1000.OpenReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 fd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.WriteRequest) */ {
 public:
  WriteRequest();
  virtual ~WriteRequest();

  WriteRequest(const WriteRequest& from);

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(WriteRequest* other);
  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteRequest* New() const final {
    return CreateMaybeMessage<WriteRequest>(NULL);
  }

  WriteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteRequest& from);
  void MergeFrom(const WriteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes buf = 2;
  void clear_buf();
  static const int kBufFieldNumber = 2;
  const ::std::string& buf() const;
  void set_buf(const ::std::string& value);
  #if LANG_CXX11
  void set_buf(::std::string&& value);
  #endif
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  ::std::string* mutable_buf();
  ::std::string* release_buf();
  void set_allocated_buf(::std::string* buf);

  // uint64 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // int64 offset = 4;
  void clear_offset();
  static const int kOffsetFieldNumber = 4;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // int32 fd = 1;
  void clear_fd();
  static const int kFdFieldNumber = 1;
  ::google::protobuf::int32 fd() const;
  void set_fd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dbx1000.WriteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr buf_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::int64 offset_;
  ::google::protobuf::int32 fd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WriteReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.WriteReply) */ {
 public:
  WriteReply();
  virtual ~WriteReply();

  WriteReply(const WriteReply& from);

  inline WriteReply& operator=(const WriteReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteReply(WriteReply&& from) noexcept
    : WriteReply() {
    *this = ::std::move(from);
  }

  inline WriteReply& operator=(WriteReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteReply* internal_default_instance() {
    return reinterpret_cast<const WriteReply*>(
               &_WriteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(WriteReply* other);
  friend void swap(WriteReply& a, WriteReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteReply* New() const final {
    return CreateMaybeMessage<WriteReply>(NULL);
  }

  WriteReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteReply& from);
  void MergeFrom(const WriteReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 size = 1;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.WriteReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.ReadRequest) */ {
 public:
  ReadRequest();
  virtual ~ReadRequest();

  ReadRequest(const ReadRequest& from);

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadRequest(ReadRequest&& from) noexcept
    : ReadRequest() {
    *this = ::std::move(from);
  }

  inline ReadRequest& operator=(ReadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRequest*>(
               &_ReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReadRequest* other);
  friend void swap(ReadRequest& a, ReadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const final {
    return CreateMaybeMessage<ReadRequest>(NULL);
  }

  ReadRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadRequest& from);
  void MergeFrom(const ReadRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // int64 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // int32 fd = 1;
  void clear_fd();
  static const int kFdFieldNumber = 1;
  ::google::protobuf::int32 fd() const;
  void set_fd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dbx1000.ReadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::int64 offset_;
  ::google::protobuf::int32 fd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.ReadReply) */ {
 public:
  ReadReply();
  virtual ~ReadReply();

  ReadReply(const ReadReply& from);

  inline ReadReply& operator=(const ReadReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadReply(ReadReply&& from) noexcept
    : ReadReply() {
    *this = ::std::move(from);
  }

  inline ReadReply& operator=(ReadReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReply* internal_default_instance() {
    return reinterpret_cast<const ReadReply*>(
               &_ReadReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ReadReply* other);
  friend void swap(ReadReply& a, ReadReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadReply* New() const final {
    return CreateMaybeMessage<ReadReply>(NULL);
  }

  ReadReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadReply& from);
  void MergeFrom(const ReadReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes buf = 1;
  void clear_buf();
  static const int kBufFieldNumber = 1;
  const ::std::string& buf() const;
  void set_buf(const ::std::string& value);
  #if LANG_CXX11
  void set_buf(::std::string&& value);
  #endif
  void set_buf(const char* value);
  void set_buf(const void* value, size_t size);
  ::std::string* mutable_buf();
  ::std::string* release_buf();
  void set_allocated_buf(::std::string* buf);

  // uint64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.ReadReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr buf_;
  ::google::protobuf::uint64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WritePageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.WritePageRequest) */ {
 public:
  WritePageRequest();
  virtual ~WritePageRequest();

  WritePageRequest(const WritePageRequest& from);

  inline WritePageRequest& operator=(const WritePageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WritePageRequest(WritePageRequest&& from) noexcept
    : WritePageRequest() {
    *this = ::std::move(from);
  }

  inline WritePageRequest& operator=(WritePageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WritePageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WritePageRequest* internal_default_instance() {
    return reinterpret_cast<const WritePageRequest*>(
               &_WritePageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(WritePageRequest* other);
  friend void swap(WritePageRequest& a, WritePageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WritePageRequest* New() const final {
    return CreateMaybeMessage<WritePageRequest>(NULL);
  }

  WritePageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WritePageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WritePageRequest& from);
  void MergeFrom(const WritePageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WritePageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes page_buf = 2;
  void clear_page_buf();
  static const int kPageBufFieldNumber = 2;
  const ::std::string& page_buf() const;
  void set_page_buf(const ::std::string& value);
  #if LANG_CXX11
  void set_page_buf(::std::string&& value);
  #endif
  void set_page_buf(const char* value);
  void set_page_buf(const void* value, size_t size);
  ::std::string* mutable_page_buf();
  ::std::string* release_page_buf();
  void set_allocated_page_buf(::std::string* page_buf);

  // uint64 page_id = 1;
  void clear_page_id();
  static const int kPageIdFieldNumber = 1;
  ::google::protobuf::uint64 page_id() const;
  void set_page_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.WritePageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_buf_;
  ::google::protobuf::uint64 page_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WritePageReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.WritePageReply) */ {
 public:
  WritePageReply();
  virtual ~WritePageReply();

  WritePageReply(const WritePageReply& from);

  inline WritePageReply& operator=(const WritePageReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WritePageReply(WritePageReply&& from) noexcept
    : WritePageReply() {
    *this = ::std::move(from);
  }

  inline WritePageReply& operator=(WritePageReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WritePageReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WritePageReply* internal_default_instance() {
    return reinterpret_cast<const WritePageReply*>(
               &_WritePageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(WritePageReply* other);
  friend void swap(WritePageReply& a, WritePageReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WritePageReply* New() const final {
    return CreateMaybeMessage<WritePageReply>(NULL);
  }

  WritePageReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WritePageReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WritePageReply& from);
  void MergeFrom(const WritePageReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WritePageReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 size = 1;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.WritePageReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadPageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.ReadPageRequest) */ {
 public:
  ReadPageRequest();
  virtual ~ReadPageRequest();

  ReadPageRequest(const ReadPageRequest& from);

  inline ReadPageRequest& operator=(const ReadPageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadPageRequest(ReadPageRequest&& from) noexcept
    : ReadPageRequest() {
    *this = ::std::move(from);
  }

  inline ReadPageRequest& operator=(ReadPageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadPageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadPageRequest* internal_default_instance() {
    return reinterpret_cast<const ReadPageRequest*>(
               &_ReadPageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ReadPageRequest* other);
  friend void swap(ReadPageRequest& a, ReadPageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadPageRequest* New() const final {
    return CreateMaybeMessage<ReadPageRequest>(NULL);
  }

  ReadPageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadPageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadPageRequest& from);
  void MergeFrom(const ReadPageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadPageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 page_id = 1;
  void clear_page_id();
  static const int kPageIdFieldNumber = 1;
  ::google::protobuf::uint64 page_id() const;
  void set_page_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.ReadPageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 page_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadPageReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.ReadPageReply) */ {
 public:
  ReadPageReply();
  virtual ~ReadPageReply();

  ReadPageReply(const ReadPageReply& from);

  inline ReadPageReply& operator=(const ReadPageReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadPageReply(ReadPageReply&& from) noexcept
    : ReadPageReply() {
    *this = ::std::move(from);
  }

  inline ReadPageReply& operator=(ReadPageReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadPageReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadPageReply* internal_default_instance() {
    return reinterpret_cast<const ReadPageReply*>(
               &_ReadPageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ReadPageReply* other);
  friend void swap(ReadPageReply& a, ReadPageReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadPageReply* New() const final {
    return CreateMaybeMessage<ReadPageReply>(NULL);
  }

  ReadPageReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadPageReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadPageReply& from);
  void MergeFrom(const ReadPageReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadPageReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes page_buf = 1;
  void clear_page_buf();
  static const int kPageBufFieldNumber = 1;
  const ::std::string& page_buf() const;
  void set_page_buf(const ::std::string& value);
  #if LANG_CXX11
  void set_page_buf(::std::string&& value);
  #endif
  void set_page_buf(const char* value);
  void set_page_buf(const void* value, size_t size);
  ::std::string* mutable_page_buf();
  ::std::string* release_page_buf();
  void set_allocated_page_buf(::std::string* page_buf);

  // uint64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.ReadPageReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_buf_;
  ::google::protobuf::uint64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CloseAllRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.CloseAllRequest) */ {
 public:
  CloseAllRequest();
  virtual ~CloseAllRequest();

  CloseAllRequest(const CloseAllRequest& from);

  inline CloseAllRequest& operator=(const CloseAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloseAllRequest(CloseAllRequest&& from) noexcept
    : CloseAllRequest() {
    *this = ::std::move(from);
  }

  inline CloseAllRequest& operator=(CloseAllRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseAllRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseAllRequest* internal_default_instance() {
    return reinterpret_cast<const CloseAllRequest*>(
               &_CloseAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CloseAllRequest* other);
  friend void swap(CloseAllRequest& a, CloseAllRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloseAllRequest* New() const final {
    return CreateMaybeMessage<CloseAllRequest>(NULL);
  }

  CloseAllRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloseAllRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloseAllRequest& from);
  void MergeFrom(const CloseAllRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseAllRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.CloseAllRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CloseAllReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.CloseAllReply) */ {
 public:
  CloseAllReply();
  virtual ~CloseAllReply();

  CloseAllReply(const CloseAllReply& from);

  inline CloseAllReply& operator=(const CloseAllReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloseAllReply(CloseAllReply&& from) noexcept
    : CloseAllReply() {
    *this = ::std::move(from);
  }

  inline CloseAllReply& operator=(CloseAllReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseAllReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseAllReply* internal_default_instance() {
    return reinterpret_cast<const CloseAllReply*>(
               &_CloseAllReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CloseAllReply* other);
  friend void swap(CloseAllReply& a, CloseAllReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloseAllReply* New() const final {
    return CreateMaybeMessage<CloseAllReply>(NULL);
  }

  CloseAllReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloseAllReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloseAllReply& from);
  void MergeFrom(const CloseAllReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseAllReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 rc = 1;
  void clear_rc();
  static const int kRcFieldNumber = 1;
  ::google::protobuf::int32 rc() const;
  void set_rc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dbx1000.CloseAllReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 rc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CloseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.CloseRequest) */ {
 public:
  CloseRequest();
  virtual ~CloseRequest();

  CloseRequest(const CloseRequest& from);

  inline CloseRequest& operator=(const CloseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloseRequest(CloseRequest&& from) noexcept
    : CloseRequest() {
    *this = ::std::move(from);
  }

  inline CloseRequest& operator=(CloseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseRequest* internal_default_instance() {
    return reinterpret_cast<const CloseRequest*>(
               &_CloseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CloseRequest* other);
  friend void swap(CloseRequest& a, CloseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloseRequest* New() const final {
    return CreateMaybeMessage<CloseRequest>(NULL);
  }

  CloseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloseRequest& from);
  void MergeFrom(const CloseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 fd = 1;
  void clear_fd();
  static const int kFdFieldNumber = 1;
  ::google::protobuf::int32 fd() const;
  void set_fd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dbx1000.CloseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 fd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CloseReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.CloseReply) */ {
 public:
  CloseReply();
  virtual ~CloseReply();

  CloseReply(const CloseReply& from);

  inline CloseReply& operator=(const CloseReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloseReply(CloseReply&& from) noexcept
    : CloseReply() {
    *this = ::std::move(from);
  }

  inline CloseReply& operator=(CloseReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseReply* internal_default_instance() {
    return reinterpret_cast<const CloseReply*>(
               &_CloseReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CloseReply* other);
  friend void swap(CloseReply& a, CloseReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloseReply* New() const final {
    return CreateMaybeMessage<CloseReply>(NULL);
  }

  CloseReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloseReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloseReply& from);
  void MergeFrom(const CloseReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 rc = 1;
  void clear_rc();
  static const int kRcFieldNumber = 1;
  ::google::protobuf::int32 rc() const;
  void set_rc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dbx1000.CloseReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 rc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_shared_5fdisk_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenRequest

// string path = 1;
inline void OpenRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenRequest::path() const {
  // @@protoc_insertion_point(field_get:dbx1000.OpenRequest.path)
  return path_.GetNoArena();
}
inline void OpenRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.OpenRequest.path)
}
#if LANG_CXX11
inline void OpenRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.OpenRequest.path)
}
#endif
inline void OpenRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.OpenRequest.path)
}
inline void OpenRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.OpenRequest.path)
}
inline ::std::string* OpenRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.OpenRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenRequest::release_path() {
  // @@protoc_insertion_point(field_release:dbx1000.OpenRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.OpenRequest.path)
}

// -------------------------------------------------------------------

// OpenReply

// int32 fd = 1;
inline void OpenReply::clear_fd() {
  fd_ = 0;
}
inline ::google::protobuf::int32 OpenReply::fd() const {
  // @@protoc_insertion_point(field_get:dbx1000.OpenReply.fd)
  return fd_;
}
inline void OpenReply::set_fd(::google::protobuf::int32 value) {
  
  fd_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.OpenReply.fd)
}

// -------------------------------------------------------------------

// WriteRequest

// int32 fd = 1;
inline void WriteRequest::clear_fd() {
  fd_ = 0;
}
inline ::google::protobuf::int32 WriteRequest::fd() const {
  // @@protoc_insertion_point(field_get:dbx1000.WriteRequest.fd)
  return fd_;
}
inline void WriteRequest::set_fd(::google::protobuf::int32 value) {
  
  fd_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.WriteRequest.fd)
}

// bytes buf = 2;
inline void WriteRequest::clear_buf() {
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteRequest::buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.WriteRequest.buf)
  return buf_.GetNoArena();
}
inline void WriteRequest::set_buf(const ::std::string& value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.WriteRequest.buf)
}
#if LANG_CXX11
inline void WriteRequest::set_buf(::std::string&& value) {
  
  buf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.WriteRequest.buf)
}
#endif
inline void WriteRequest::set_buf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.WriteRequest.buf)
}
inline void WriteRequest::set_buf(const void* value, size_t size) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.WriteRequest.buf)
}
inline ::std::string* WriteRequest::mutable_buf() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.WriteRequest.buf)
  return buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteRequest::release_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.WriteRequest.buf)
  
  return buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_allocated_buf(::std::string* buf) {
  if (buf != NULL) {
    
  } else {
    
  }
  buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.WriteRequest.buf)
}

// uint64 size = 3;
inline void WriteRequest::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WriteRequest::size() const {
  // @@protoc_insertion_point(field_get:dbx1000.WriteRequest.size)
  return size_;
}
inline void WriteRequest::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.WriteRequest.size)
}

// int64 offset = 4;
inline void WriteRequest::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WriteRequest::offset() const {
  // @@protoc_insertion_point(field_get:dbx1000.WriteRequest.offset)
  return offset_;
}
inline void WriteRequest::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.WriteRequest.offset)
}

// -------------------------------------------------------------------

// WriteReply

// uint64 size = 1;
inline void WriteReply::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WriteReply::size() const {
  // @@protoc_insertion_point(field_get:dbx1000.WriteReply.size)
  return size_;
}
inline void WriteReply::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.WriteReply.size)
}

// -------------------------------------------------------------------

// ReadRequest

// int32 fd = 1;
inline void ReadRequest::clear_fd() {
  fd_ = 0;
}
inline ::google::protobuf::int32 ReadRequest::fd() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadRequest.fd)
  return fd_;
}
inline void ReadRequest::set_fd(::google::protobuf::int32 value) {
  
  fd_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.ReadRequest.fd)
}

// uint64 size = 2;
inline void ReadRequest::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReadRequest::size() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadRequest.size)
  return size_;
}
inline void ReadRequest::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.ReadRequest.size)
}

// int64 offset = 3;
inline void ReadRequest::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReadRequest::offset() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadRequest.offset)
  return offset_;
}
inline void ReadRequest::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.ReadRequest.offset)
}

// -------------------------------------------------------------------

// ReadReply

// bytes buf = 1;
inline void ReadReply::clear_buf() {
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadReply::buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadReply.buf)
  return buf_.GetNoArena();
}
inline void ReadReply::set_buf(const ::std::string& value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.ReadReply.buf)
}
#if LANG_CXX11
inline void ReadReply::set_buf(::std::string&& value) {
  
  buf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.ReadReply.buf)
}
#endif
inline void ReadReply::set_buf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.ReadReply.buf)
}
inline void ReadReply::set_buf(const void* value, size_t size) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.ReadReply.buf)
}
inline ::std::string* ReadReply::mutable_buf() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.ReadReply.buf)
  return buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadReply::release_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.ReadReply.buf)
  
  return buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadReply::set_allocated_buf(::std::string* buf) {
  if (buf != NULL) {
    
  } else {
    
  }
  buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.ReadReply.buf)
}

// uint64 size = 2;
inline void ReadReply::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReadReply::size() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadReply.size)
  return size_;
}
inline void ReadReply::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.ReadReply.size)
}

// -------------------------------------------------------------------

// WritePageRequest

// uint64 page_id = 1;
inline void WritePageRequest::clear_page_id() {
  page_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WritePageRequest::page_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.WritePageRequest.page_id)
  return page_id_;
}
inline void WritePageRequest::set_page_id(::google::protobuf::uint64 value) {
  
  page_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.WritePageRequest.page_id)
}

// bytes page_buf = 2;
inline void WritePageRequest::clear_page_buf() {
  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WritePageRequest::page_buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.WritePageRequest.page_buf)
  return page_buf_.GetNoArena();
}
inline void WritePageRequest::set_page_buf(const ::std::string& value) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.WritePageRequest.page_buf)
}
#if LANG_CXX11
inline void WritePageRequest::set_page_buf(::std::string&& value) {
  
  page_buf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.WritePageRequest.page_buf)
}
#endif
inline void WritePageRequest::set_page_buf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.WritePageRequest.page_buf)
}
inline void WritePageRequest::set_page_buf(const void* value, size_t size) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.WritePageRequest.page_buf)
}
inline ::std::string* WritePageRequest::mutable_page_buf() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.WritePageRequest.page_buf)
  return page_buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WritePageRequest::release_page_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.WritePageRequest.page_buf)
  
  return page_buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WritePageRequest::set_allocated_page_buf(::std::string* page_buf) {
  if (page_buf != NULL) {
    
  } else {
    
  }
  page_buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_buf);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.WritePageRequest.page_buf)
}

// -------------------------------------------------------------------

// WritePageReply

// uint64 size = 1;
inline void WritePageReply::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WritePageReply::size() const {
  // @@protoc_insertion_point(field_get:dbx1000.WritePageReply.size)
  return size_;
}
inline void WritePageReply::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.WritePageReply.size)
}

// -------------------------------------------------------------------

// ReadPageRequest

// uint64 page_id = 1;
inline void ReadPageRequest::clear_page_id() {
  page_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReadPageRequest::page_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadPageRequest.page_id)
  return page_id_;
}
inline void ReadPageRequest::set_page_id(::google::protobuf::uint64 value) {
  
  page_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.ReadPageRequest.page_id)
}

// -------------------------------------------------------------------

// ReadPageReply

// bytes page_buf = 1;
inline void ReadPageReply::clear_page_buf() {
  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadPageReply::page_buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadPageReply.page_buf)
  return page_buf_.GetNoArena();
}
inline void ReadPageReply::set_page_buf(const ::std::string& value) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.ReadPageReply.page_buf)
}
#if LANG_CXX11
inline void ReadPageReply::set_page_buf(::std::string&& value) {
  
  page_buf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.ReadPageReply.page_buf)
}
#endif
inline void ReadPageReply::set_page_buf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.ReadPageReply.page_buf)
}
inline void ReadPageReply::set_page_buf(const void* value, size_t size) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.ReadPageReply.page_buf)
}
inline ::std::string* ReadPageReply::mutable_page_buf() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.ReadPageReply.page_buf)
  return page_buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadPageReply::release_page_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.ReadPageReply.page_buf)
  
  return page_buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadPageReply::set_allocated_page_buf(::std::string* page_buf) {
  if (page_buf != NULL) {
    
  } else {
    
  }
  page_buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_buf);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.ReadPageReply.page_buf)
}

// uint64 size = 2;
inline void ReadPageReply::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReadPageReply::size() const {
  // @@protoc_insertion_point(field_get:dbx1000.ReadPageReply.size)
  return size_;
}
inline void ReadPageReply::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.ReadPageReply.size)
}

// -------------------------------------------------------------------

// CloseAllRequest

// -------------------------------------------------------------------

// CloseAllReply

// int32 rc = 1;
inline void CloseAllReply::clear_rc() {
  rc_ = 0;
}
inline ::google::protobuf::int32 CloseAllReply::rc() const {
  // @@protoc_insertion_point(field_get:dbx1000.CloseAllReply.rc)
  return rc_;
}
inline void CloseAllReply::set_rc(::google::protobuf::int32 value) {
  
  rc_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.CloseAllReply.rc)
}

// -------------------------------------------------------------------

// CloseRequest

// int32 fd = 1;
inline void CloseRequest::clear_fd() {
  fd_ = 0;
}
inline ::google::protobuf::int32 CloseRequest::fd() const {
  // @@protoc_insertion_point(field_get:dbx1000.CloseRequest.fd)
  return fd_;
}
inline void CloseRequest::set_fd(::google::protobuf::int32 value) {
  
  fd_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.CloseRequest.fd)
}

// -------------------------------------------------------------------

// CloseReply

// int32 rc = 1;
inline void CloseReply::clear_rc() {
  rc_ = 0;
}
inline ::google::protobuf::int32 CloseReply::rc() const {
  // @@protoc_insertion_point(field_get:dbx1000.CloseReply.rc)
  return rc_;
}
inline void CloseReply::set_rc(::google::protobuf::int32 value) {
  
  rc_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.CloseReply.rc)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbx1000

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_shared_5fdisk_5fservice_2eproto
