// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: shared_disk_service.proto

#include "shared_disk_service.pb.h"
#include "shared_disk_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dbx1000 {

static const char* SharedDiskService_method_names[] = {
  "/dbx1000.SharedDiskService/Open",
  "/dbx1000.SharedDiskService/Write",
  "/dbx1000.SharedDiskService/Read",
  "/dbx1000.SharedDiskService/WritePage",
  "/dbx1000.SharedDiskService/ReadPage",
  "/dbx1000.SharedDiskService/CloseAll",
  "/dbx1000.SharedDiskService/Close",
};

std::unique_ptr< SharedDiskService::Stub> SharedDiskService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SharedDiskService::Stub> stub(new SharedDiskService::Stub(channel));
  return stub;
}

SharedDiskService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Open_(SharedDiskService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Write_(SharedDiskService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Read_(SharedDiskService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WritePage_(SharedDiskService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadPage_(SharedDiskService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseAll_(SharedDiskService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Close_(SharedDiskService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SharedDiskService::Stub::Open(::grpc::ClientContext* context, const ::dbx1000::OpenRequest& request, ::dbx1000::OpenReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Open_, context, request, response);
}

void SharedDiskService::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::dbx1000::OpenRequest* request, ::dbx1000::OpenReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::OpenReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::dbx1000::OpenRequest* request, ::dbx1000::OpenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, reactor);
}

void SharedDiskService::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::OpenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::OpenReply>* SharedDiskService::Stub::AsyncOpenRaw(::grpc::ClientContext* context, const ::dbx1000::OpenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::OpenReply>::Create(channel_.get(), cq, rpcmethod_Open_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::OpenReply>* SharedDiskService::Stub::PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::dbx1000::OpenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::OpenReply>::Create(channel_.get(), cq, rpcmethod_Open_, context, request, false);
}

::grpc::Status SharedDiskService::Stub::Write(::grpc::ClientContext* context, const ::dbx1000::WriteRequest& request, ::dbx1000::WriteReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Write_, context, request, response);
}

void SharedDiskService::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::dbx1000::WriteRequest* request, ::dbx1000::WriteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WriteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::dbx1000::WriteRequest* request, ::dbx1000::WriteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, reactor);
}

void SharedDiskService::Stub::experimental_async::Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WriteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Write_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::WriteReply>* SharedDiskService::Stub::AsyncWriteRaw(::grpc::ClientContext* context, const ::dbx1000::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::WriteReply>::Create(channel_.get(), cq, rpcmethod_Write_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::WriteReply>* SharedDiskService::Stub::PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::dbx1000::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::WriteReply>::Create(channel_.get(), cq, rpcmethod_Write_, context, request, false);
}

::grpc::Status SharedDiskService::Stub::Read(::grpc::ClientContext* context, const ::dbx1000::ReadRequest& request, ::dbx1000::ReadReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Read_, context, request, response);
}

void SharedDiskService::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::dbx1000::ReadRequest* request, ::dbx1000::ReadReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::dbx1000::ReadRequest* request, ::dbx1000::ReadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, reactor);
}

void SharedDiskService::Stub::experimental_async::Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::ReadReply>* SharedDiskService::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::dbx1000::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::ReadReply>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::ReadReply>* SharedDiskService::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::dbx1000::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::ReadReply>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, false);
}

::grpc::Status SharedDiskService::Stub::WritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest& request, ::dbx1000::WritePageReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WritePage_, context, request, response);
}

void SharedDiskService::Stub::experimental_async::WritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest* request, ::dbx1000::WritePageReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WritePage_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::WritePage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WritePageReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WritePage_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::WritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest* request, ::dbx1000::WritePageReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WritePage_, context, request, response, reactor);
}

void SharedDiskService::Stub::experimental_async::WritePage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WritePageReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WritePage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::WritePageReply>* SharedDiskService::Stub::AsyncWritePageRaw(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::WritePageReply>::Create(channel_.get(), cq, rpcmethod_WritePage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::WritePageReply>* SharedDiskService::Stub::PrepareAsyncWritePageRaw(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::WritePageReply>::Create(channel_.get(), cq, rpcmethod_WritePage_, context, request, false);
}

::grpc::Status SharedDiskService::Stub::ReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest& request, ::dbx1000::ReadPageReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReadPage_, context, request, response);
}

void SharedDiskService::Stub::experimental_async::ReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest* request, ::dbx1000::ReadPageReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadPage_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::ReadPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadPageReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadPage_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::ReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest* request, ::dbx1000::ReadPageReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReadPage_, context, request, response, reactor);
}

void SharedDiskService::Stub::experimental_async::ReadPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadPageReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReadPage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::ReadPageReply>* SharedDiskService::Stub::AsyncReadPageRaw(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::ReadPageReply>::Create(channel_.get(), cq, rpcmethod_ReadPage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::ReadPageReply>* SharedDiskService::Stub::PrepareAsyncReadPageRaw(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::ReadPageReply>::Create(channel_.get(), cq, rpcmethod_ReadPage_, context, request, false);
}

::grpc::Status SharedDiskService::Stub::CloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest& request, ::dbx1000::CloseAllReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CloseAll_, context, request, response);
}

void SharedDiskService::Stub::experimental_async::CloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest* request, ::dbx1000::CloseAllReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseAll_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::CloseAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseAllReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseAll_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::CloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest* request, ::dbx1000::CloseAllReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseAll_, context, request, response, reactor);
}

void SharedDiskService::Stub::experimental_async::CloseAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseAllReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::CloseAllReply>* SharedDiskService::Stub::AsyncCloseAllRaw(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::CloseAllReply>::Create(channel_.get(), cq, rpcmethod_CloseAll_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::CloseAllReply>* SharedDiskService::Stub::PrepareAsyncCloseAllRaw(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::CloseAllReply>::Create(channel_.get(), cq, rpcmethod_CloseAll_, context, request, false);
}

::grpc::Status SharedDiskService::Stub::Close(::grpc::ClientContext* context, const ::dbx1000::CloseRequest& request, ::dbx1000::CloseReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Close_, context, request, response);
}

void SharedDiskService::Stub::experimental_async::Close(::grpc::ClientContext* context, const ::dbx1000::CloseRequest* request, ::dbx1000::CloseReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, std::move(f));
}

void SharedDiskService::Stub::experimental_async::Close(::grpc::ClientContext* context, const ::dbx1000::CloseRequest* request, ::dbx1000::CloseReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, reactor);
}

void SharedDiskService::Stub::experimental_async::Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::CloseReply>* SharedDiskService::Stub::AsyncCloseRaw(::grpc::ClientContext* context, const ::dbx1000::CloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::CloseReply>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::CloseReply>* SharedDiskService::Stub::PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::dbx1000::CloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::CloseReply>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, false);
}

SharedDiskService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SharedDiskService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SharedDiskService::Service, ::dbx1000::OpenRequest, ::dbx1000::OpenReply>(
          [](SharedDiskService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::dbx1000::OpenRequest* req,
             ::dbx1000::OpenReply* resp) {
               return service->Open(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SharedDiskService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SharedDiskService::Service, ::dbx1000::WriteRequest, ::dbx1000::WriteReply>(
          [](SharedDiskService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::dbx1000::WriteRequest* req,
             ::dbx1000::WriteReply* resp) {
               return service->Write(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SharedDiskService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SharedDiskService::Service, ::dbx1000::ReadRequest, ::dbx1000::ReadReply>(
          [](SharedDiskService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::dbx1000::ReadRequest* req,
             ::dbx1000::ReadReply* resp) {
               return service->Read(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SharedDiskService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SharedDiskService::Service, ::dbx1000::WritePageRequest, ::dbx1000::WritePageReply>(
          [](SharedDiskService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::dbx1000::WritePageRequest* req,
             ::dbx1000::WritePageReply* resp) {
               return service->WritePage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SharedDiskService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SharedDiskService::Service, ::dbx1000::ReadPageRequest, ::dbx1000::ReadPageReply>(
          [](SharedDiskService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::dbx1000::ReadPageRequest* req,
             ::dbx1000::ReadPageReply* resp) {
               return service->ReadPage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SharedDiskService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SharedDiskService::Service, ::dbx1000::CloseAllRequest, ::dbx1000::CloseAllReply>(
          [](SharedDiskService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::dbx1000::CloseAllRequest* req,
             ::dbx1000::CloseAllReply* resp) {
               return service->CloseAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SharedDiskService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SharedDiskService::Service, ::dbx1000::CloseRequest, ::dbx1000::CloseReply>(
          [](SharedDiskService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::dbx1000::CloseRequest* req,
             ::dbx1000::CloseReply* resp) {
               return service->Close(ctx, req, resp);
             }, this)));
}

SharedDiskService::Service::~Service() {
}

::grpc::Status SharedDiskService::Service::Open(::grpc::ServerContext* context, const ::dbx1000::OpenRequest* request, ::dbx1000::OpenReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SharedDiskService::Service::Write(::grpc::ServerContext* context, const ::dbx1000::WriteRequest* request, ::dbx1000::WriteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SharedDiskService::Service::Read(::grpc::ServerContext* context, const ::dbx1000::ReadRequest* request, ::dbx1000::ReadReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SharedDiskService::Service::WritePage(::grpc::ServerContext* context, const ::dbx1000::WritePageRequest* request, ::dbx1000::WritePageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SharedDiskService::Service::ReadPage(::grpc::ServerContext* context, const ::dbx1000::ReadPageRequest* request, ::dbx1000::ReadPageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SharedDiskService::Service::CloseAll(::grpc::ServerContext* context, const ::dbx1000::CloseAllRequest* request, ::dbx1000::CloseAllReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SharedDiskService::Service::Close(::grpc::ServerContext* context, const ::dbx1000::CloseRequest* request, ::dbx1000::CloseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dbx1000

