// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared_disk_service.proto

#include "shared_disk_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace dbx1000 {
class OpenRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenRequest>
      _instance;
} _OpenRequest_default_instance_;
class OpenReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenReply>
      _instance;
} _OpenReply_default_instance_;
class WriteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteRequest>
      _instance;
} _WriteRequest_default_instance_;
class WriteReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteReply>
      _instance;
} _WriteReply_default_instance_;
class ReadRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadRequest>
      _instance;
} _ReadRequest_default_instance_;
class ReadReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadReply>
      _instance;
} _ReadReply_default_instance_;
class WritePageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WritePageRequest>
      _instance;
} _WritePageRequest_default_instance_;
class WritePageReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WritePageReply>
      _instance;
} _WritePageReply_default_instance_;
class ReadPageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadPageRequest>
      _instance;
} _ReadPageRequest_default_instance_;
class ReadPageReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadPageReply>
      _instance;
} _ReadPageReply_default_instance_;
class CloseAllRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloseAllRequest>
      _instance;
} _CloseAllRequest_default_instance_;
class CloseAllReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloseAllReply>
      _instance;
} _CloseAllReply_default_instance_;
class CloseRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloseRequest>
      _instance;
} _CloseRequest_default_instance_;
class CloseReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloseReply>
      _instance;
} _CloseReply_default_instance_;
}  // namespace dbx1000
namespace protobuf_shared_5fdisk_5fservice_2eproto {
static void InitDefaultsOpenRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_OpenRequest_default_instance_;
    new (ptr) ::dbx1000::OpenRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::OpenRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenRequest}, {}};

static void InitDefaultsOpenReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_OpenReply_default_instance_;
    new (ptr) ::dbx1000::OpenReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::OpenReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenReply}, {}};

static void InitDefaultsWriteRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_WriteRequest_default_instance_;
    new (ptr) ::dbx1000::WriteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::WriteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteRequest}, {}};

static void InitDefaultsWriteReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_WriteReply_default_instance_;
    new (ptr) ::dbx1000::WriteReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::WriteReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteReply}, {}};

static void InitDefaultsReadRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_ReadRequest_default_instance_;
    new (ptr) ::dbx1000::ReadRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::ReadRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadRequest}, {}};

static void InitDefaultsReadReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_ReadReply_default_instance_;
    new (ptr) ::dbx1000::ReadReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::ReadReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadReply}, {}};

static void InitDefaultsWritePageRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_WritePageRequest_default_instance_;
    new (ptr) ::dbx1000::WritePageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::WritePageRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WritePageRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWritePageRequest}, {}};

static void InitDefaultsWritePageReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_WritePageReply_default_instance_;
    new (ptr) ::dbx1000::WritePageReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::WritePageReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WritePageReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWritePageReply}, {}};

static void InitDefaultsReadPageRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_ReadPageRequest_default_instance_;
    new (ptr) ::dbx1000::ReadPageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::ReadPageRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadPageRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadPageRequest}, {}};

static void InitDefaultsReadPageReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_ReadPageReply_default_instance_;
    new (ptr) ::dbx1000::ReadPageReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::ReadPageReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadPageReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadPageReply}, {}};

static void InitDefaultsCloseAllRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_CloseAllRequest_default_instance_;
    new (ptr) ::dbx1000::CloseAllRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::CloseAllRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CloseAllRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCloseAllRequest}, {}};

static void InitDefaultsCloseAllReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_CloseAllReply_default_instance_;
    new (ptr) ::dbx1000::CloseAllReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::CloseAllReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CloseAllReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCloseAllReply}, {}};

static void InitDefaultsCloseRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_CloseRequest_default_instance_;
    new (ptr) ::dbx1000::CloseRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::CloseRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CloseRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCloseRequest}, {}};

static void InitDefaultsCloseReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_CloseReply_default_instance_;
    new (ptr) ::dbx1000::CloseReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::CloseReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CloseReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCloseReply}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OpenRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WritePageRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WritePageReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadPageRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadPageReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloseAllRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloseAllReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloseRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloseReply.base);
}

::google::protobuf::Metadata file_level_metadata[14];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::OpenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::OpenRequest, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::OpenReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::OpenReply, fd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::WriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::WriteRequest, fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::WriteRequest, buf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::WriteRequest, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::WriteRequest, offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::WriteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::WriteReply, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReadRequest, fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReadRequest, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReadRequest, offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReadReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReadReply, buf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReadReply, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::WritePageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::WritePageRequest, page_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::WritePageRequest, page_buf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::WritePageReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::WritePageReply, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReadPageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReadPageRequest, page_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReadPageReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReadPageReply, page_buf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::ReadPageReply, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::CloseAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::CloseAllReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::CloseAllReply, rc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::CloseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::CloseRequest, fd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::CloseReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::CloseReply, rc_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dbx1000::OpenRequest)},
  { 6, -1, sizeof(::dbx1000::OpenReply)},
  { 12, -1, sizeof(::dbx1000::WriteRequest)},
  { 21, -1, sizeof(::dbx1000::WriteReply)},
  { 27, -1, sizeof(::dbx1000::ReadRequest)},
  { 35, -1, sizeof(::dbx1000::ReadReply)},
  { 42, -1, sizeof(::dbx1000::WritePageRequest)},
  { 49, -1, sizeof(::dbx1000::WritePageReply)},
  { 55, -1, sizeof(::dbx1000::ReadPageRequest)},
  { 61, -1, sizeof(::dbx1000::ReadPageReply)},
  { 68, -1, sizeof(::dbx1000::CloseAllRequest)},
  { 73, -1, sizeof(::dbx1000::CloseAllReply)},
  { 79, -1, sizeof(::dbx1000::CloseRequest)},
  { 85, -1, sizeof(::dbx1000::CloseReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_OpenRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_OpenReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_WriteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_WriteReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_ReadRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_ReadReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_WritePageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_WritePageReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_ReadPageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_ReadPageReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_CloseAllRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_CloseAllReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_CloseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_CloseReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "shared_disk_service.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031shared_disk_service.proto\022\007dbx1000\"\033\n\013"
      "OpenRequest\022\014\n\004path\030\001 \001(\t\"\027\n\tOpenReply\022\n"
      "\n\002fd\030\001 \001(\005\"E\n\014WriteRequest\022\n\n\002fd\030\001 \001(\005\022\013"
      "\n\003buf\030\002 \001(\014\022\014\n\004size\030\003 \001(\004\022\016\n\006offset\030\004 \001("
      "\003\"\032\n\nWriteReply\022\014\n\004size\030\001 \001(\004\"7\n\013ReadReq"
      "uest\022\n\n\002fd\030\001 \001(\005\022\014\n\004size\030\002 \001(\004\022\016\n\006offset"
      "\030\003 \001(\003\"&\n\tReadReply\022\013\n\003buf\030\001 \001(\014\022\014\n\004size"
      "\030\002 \001(\004\"5\n\020WritePageRequest\022\017\n\007page_id\030\001 "
      "\001(\004\022\020\n\010page_buf\030\002 \001(\014\"\036\n\016WritePageReply\022"
      "\014\n\004size\030\001 \001(\004\"\"\n\017ReadPageRequest\022\017\n\007page"
      "_id\030\001 \001(\004\"/\n\rReadPageReply\022\020\n\010page_buf\030\001"
      " \001(\014\022\014\n\004size\030\002 \001(\004\"\021\n\017CloseAllRequest\"\033\n"
      "\rCloseAllReply\022\n\n\002rc\030\001 \001(\005\"\032\n\014CloseReque"
      "st\022\n\n\002fd\030\001 \001(\005\"\030\n\nCloseReply\022\n\n\002rc\030\001 \001(\005"
      "2\254\003\n\021SharedDiskService\0222\n\004Open\022\024.dbx1000"
      ".OpenRequest\032\022.dbx1000.OpenReply\"\000\0225\n\005Wr"
      "ite\022\025.dbx1000.WriteRequest\032\023.dbx1000.Wri"
      "teReply\"\000\0222\n\004Read\022\024.dbx1000.ReadRequest\032"
      "\022.dbx1000.ReadReply\"\000\022A\n\tWritePage\022\031.dbx"
      "1000.WritePageRequest\032\027.dbx1000.WritePag"
      "eReply\"\000\022>\n\010ReadPage\022\030.dbx1000.ReadPageR"
      "equest\032\026.dbx1000.ReadPageReply\"\000\022>\n\010Clos"
      "eAll\022\030.dbx1000.CloseAllRequest\032\026.dbx1000"
      ".CloseAllReply\"\000\0225\n\005Close\022\025.dbx1000.Clos"
      "eRequest\032\023.dbx1000.CloseReply\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 999);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "shared_disk_service.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_shared_5fdisk_5fservice_2eproto
namespace dbx1000 {

// ===================================================================

void OpenRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenRequest::OpenRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_OpenRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.OpenRequest)
}
OpenRequest::OpenRequest(const OpenRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:dbx1000.OpenRequest)
}

void OpenRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OpenRequest::~OpenRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.OpenRequest)
  SharedDtor();
}

void OpenRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenRequest::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenRequest& OpenRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_OpenRequest.base);
  return *internal_default_instance();
}


void OpenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.OpenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool OpenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.OpenRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dbx1000.OpenRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.OpenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.OpenRequest)
  return false;
#undef DO_
}

void OpenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.OpenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dbx1000.OpenRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.OpenRequest)
}

::google::protobuf::uint8* OpenRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.OpenRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dbx1000.OpenRequest.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.OpenRequest)
  return target;
}

size_t OpenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.OpenRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.OpenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.OpenRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.OpenRequest)
    MergeFrom(*source);
  }
}

void OpenRequest::MergeFrom(const OpenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.OpenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void OpenRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.OpenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRequest::CopyFrom(const OpenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.OpenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRequest::IsInitialized() const {
  return true;
}

void OpenRequest::Swap(OpenRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenRequest::InternalSwap(OpenRequest* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenRequest::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpenReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenReply::kFdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenReply::OpenReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_OpenReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.OpenReply)
}
OpenReply::OpenReply(const OpenReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fd_ = from.fd_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.OpenReply)
}

void OpenReply::SharedCtor() {
  fd_ = 0;
}

OpenReply::~OpenReply() {
  // @@protoc_insertion_point(destructor:dbx1000.OpenReply)
  SharedDtor();
}

void OpenReply::SharedDtor() {
}

void OpenReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenReply::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenReply& OpenReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_OpenReply.base);
  return *internal_default_instance();
}


void OpenReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.OpenReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fd_ = 0;
  _internal_metadata_.Clear();
}

bool OpenReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.OpenReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.OpenReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.OpenReply)
  return false;
#undef DO_
}

void OpenReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.OpenReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fd = 1;
  if (this->fd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.OpenReply)
}

::google::protobuf::uint8* OpenReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.OpenReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fd = 1;
  if (this->fd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.OpenReply)
  return target;
}

size_t OpenReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.OpenReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 fd = 1;
  if (this->fd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.OpenReply)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.OpenReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.OpenReply)
    MergeFrom(*source);
  }
}

void OpenReply::MergeFrom(const OpenReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.OpenReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fd() != 0) {
    set_fd(from.fd());
  }
}

void OpenReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.OpenReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenReply::CopyFrom(const OpenReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.OpenReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenReply::IsInitialized() const {
  return true;
}

void OpenReply::Swap(OpenReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenReply::InternalSwap(OpenReply* other) {
  using std::swap;
  swap(fd_, other->fd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenReply::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteRequest::kFdFieldNumber;
const int WriteRequest::kBufFieldNumber;
const int WriteRequest::kSizeFieldNumber;
const int WriteRequest::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteRequest::WriteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_WriteRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.WriteRequest)
}
WriteRequest::WriteRequest(const WriteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.buf().size() > 0) {
    buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&size_)) + sizeof(fd_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.WriteRequest)
}

void WriteRequest::SharedCtor() {
  buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fd_) -
      reinterpret_cast<char*>(&size_)) + sizeof(fd_));
}

WriteRequest::~WriteRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.WriteRequest)
  SharedDtor();
}

void WriteRequest::SharedDtor() {
  buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteRequest::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteRequest& WriteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_WriteRequest.base);
  return *internal_default_instance();
}


void WriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.WriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fd_) -
      reinterpret_cast<char*>(&size_)) + sizeof(fd_));
  _internal_metadata_.Clear();
}

bool WriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.WriteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes buf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.WriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.WriteRequest)
  return false;
#undef DO_
}

void WriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.WriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fd = 1;
  if (this->fd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fd(), output);
  }

  // bytes buf = 2;
  if (this->buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->buf(), output);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // int64 offset = 4;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.WriteRequest)
}

::google::protobuf::uint8* WriteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.WriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fd = 1;
  if (this->fd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fd(), target);
  }

  // bytes buf = 2;
  if (this->buf().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->buf(), target);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  // int64 offset = 4;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.WriteRequest)
  return target;
}

size_t WriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.WriteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes buf = 2;
  if (this->buf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buf());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // int64 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // int32 fd = 1;
  if (this->fd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.WriteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.WriteRequest)
    MergeFrom(*source);
  }
}

void WriteRequest::MergeFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buf().size() > 0) {

    buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.fd() != 0) {
    set_fd(from.fd());
  }
}

void WriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteRequest::CopyFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRequest::IsInitialized() const {
  return true;
}

void WriteRequest::Swap(WriteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteRequest::InternalSwap(WriteRequest* other) {
  using std::swap;
  buf_.Swap(&other->buf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(offset_, other->offset_);
  swap(fd_, other->fd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteRequest::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteReply::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteReply::WriteReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_WriteReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.WriteReply)
}
WriteReply::WriteReply(const WriteReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.WriteReply)
}

void WriteReply::SharedCtor() {
  size_ = GOOGLE_ULONGLONG(0);
}

WriteReply::~WriteReply() {
  // @@protoc_insertion_point(destructor:dbx1000.WriteReply)
  SharedDtor();
}

void WriteReply::SharedDtor() {
}

void WriteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteReply::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteReply& WriteReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_WriteReply.base);
  return *internal_default_instance();
}


void WriteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.WriteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool WriteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.WriteReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.WriteReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.WriteReply)
  return false;
#undef DO_
}

void WriteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.WriteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.WriteReply)
}

::google::protobuf::uint8* WriteReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.WriteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.WriteReply)
  return target;
}

size_t WriteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.WriteReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.WriteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.WriteReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.WriteReply)
    MergeFrom(*source);
  }
}

void WriteReply::MergeFrom(const WriteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.WriteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    set_size(from.size());
  }
}

void WriteReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.WriteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteReply::CopyFrom(const WriteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.WriteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteReply::IsInitialized() const {
  return true;
}

void WriteReply::Swap(WriteReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteReply::InternalSwap(WriteReply* other) {
  using std::swap;
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteReply::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReadRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRequest::kFdFieldNumber;
const int ReadRequest::kSizeFieldNumber;
const int ReadRequest::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRequest::ReadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_ReadRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.ReadRequest)
}
ReadRequest::ReadRequest(const ReadRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&size_)) + sizeof(fd_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.ReadRequest)
}

void ReadRequest::SharedCtor() {
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fd_) -
      reinterpret_cast<char*>(&size_)) + sizeof(fd_));
}

ReadRequest::~ReadRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.ReadRequest)
  SharedDtor();
}

void ReadRequest::SharedDtor() {
}

void ReadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReadRequest::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadRequest& ReadRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_ReadRequest.base);
  return *internal_default_instance();
}


void ReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.ReadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fd_) -
      reinterpret_cast<char*>(&size_)) + sizeof(fd_));
  _internal_metadata_.Clear();
}

bool ReadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.ReadRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.ReadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.ReadRequest)
  return false;
#undef DO_
}

void ReadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.ReadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fd = 1;
  if (this->fd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fd(), output);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.ReadRequest)
}

::google::protobuf::uint8* ReadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.ReadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fd = 1;
  if (this->fd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fd(), target);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.ReadRequest)
  return target;
}

size_t ReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.ReadRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // int32 fd = 1;
  if (this->fd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.ReadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.ReadRequest)
    MergeFrom(*source);
  }
}

void ReadRequest::MergeFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.fd() != 0) {
    set_fd(from.fd());
  }
}

void ReadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRequest::CopyFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRequest::IsInitialized() const {
  return true;
}

void ReadRequest::Swap(ReadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRequest::InternalSwap(ReadRequest* other) {
  using std::swap;
  swap(size_, other->size_);
  swap(offset_, other->offset_);
  swap(fd_, other->fd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReadRequest::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReadReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadReply::kBufFieldNumber;
const int ReadReply::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadReply::ReadReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_ReadReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.ReadReply)
}
ReadReply::ReadReply(const ReadReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.buf().size() > 0) {
    buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.ReadReply)
}

void ReadReply::SharedCtor() {
  buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_ULONGLONG(0);
}

ReadReply::~ReadReply() {
  // @@protoc_insertion_point(destructor:dbx1000.ReadReply)
  SharedDtor();
}

void ReadReply::SharedDtor() {
  buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReadReply::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadReply& ReadReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_ReadReply.base);
  return *internal_default_instance();
}


void ReadReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.ReadReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ReadReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.ReadReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes buf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.ReadReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.ReadReply)
  return false;
#undef DO_
}

void ReadReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.ReadReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buf = 1;
  if (this->buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->buf(), output);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.ReadReply)
}

::google::protobuf::uint8* ReadReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.ReadReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buf = 1;
  if (this->buf().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->buf(), target);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.ReadReply)
  return target;
}

size_t ReadReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.ReadReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes buf = 1;
  if (this->buf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buf());
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.ReadReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.ReadReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.ReadReply)
    MergeFrom(*source);
  }
}

void ReadReply::MergeFrom(const ReadReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.ReadReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buf().size() > 0) {

    buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buf_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void ReadReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.ReadReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReply::CopyFrom(const ReadReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.ReadReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReply::IsInitialized() const {
  return true;
}

void ReadReply::Swap(ReadReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadReply::InternalSwap(ReadReply* other) {
  using std::swap;
  buf_.Swap(&other->buf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReadReply::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WritePageRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WritePageRequest::kPageIdFieldNumber;
const int WritePageRequest::kPageBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WritePageRequest::WritePageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_WritePageRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.WritePageRequest)
}
WritePageRequest::WritePageRequest(const WritePageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_buf().size() > 0) {
    page_buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_buf_);
  }
  page_id_ = from.page_id_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.WritePageRequest)
}

void WritePageRequest::SharedCtor() {
  page_buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_id_ = GOOGLE_ULONGLONG(0);
}

WritePageRequest::~WritePageRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.WritePageRequest)
  SharedDtor();
}

void WritePageRequest::SharedDtor() {
  page_buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WritePageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WritePageRequest::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WritePageRequest& WritePageRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_WritePageRequest.base);
  return *internal_default_instance();
}


void WritePageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.WritePageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool WritePageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.WritePageRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 page_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &page_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes page_buf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.WritePageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.WritePageRequest)
  return false;
#undef DO_
}

void WritePageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.WritePageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 page_id = 1;
  if (this->page_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->page_id(), output);
  }

  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->page_buf(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.WritePageRequest)
}

::google::protobuf::uint8* WritePageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.WritePageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 page_id = 1;
  if (this->page_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->page_id(), target);
  }

  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->page_buf(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.WritePageRequest)
  return target;
}

size_t WritePageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.WritePageRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->page_buf());
  }

  // uint64 page_id = 1;
  if (this->page_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->page_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WritePageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.WritePageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WritePageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WritePageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.WritePageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.WritePageRequest)
    MergeFrom(*source);
  }
}

void WritePageRequest::MergeFrom(const WritePageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.WritePageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_buf().size() > 0) {

    page_buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_buf_);
  }
  if (from.page_id() != 0) {
    set_page_id(from.page_id());
  }
}

void WritePageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.WritePageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WritePageRequest::CopyFrom(const WritePageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.WritePageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WritePageRequest::IsInitialized() const {
  return true;
}

void WritePageRequest::Swap(WritePageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WritePageRequest::InternalSwap(WritePageRequest* other) {
  using std::swap;
  page_buf_.Swap(&other->page_buf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_id_, other->page_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WritePageRequest::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WritePageReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WritePageReply::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WritePageReply::WritePageReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_WritePageReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.WritePageReply)
}
WritePageReply::WritePageReply(const WritePageReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.WritePageReply)
}

void WritePageReply::SharedCtor() {
  size_ = GOOGLE_ULONGLONG(0);
}

WritePageReply::~WritePageReply() {
  // @@protoc_insertion_point(destructor:dbx1000.WritePageReply)
  SharedDtor();
}

void WritePageReply::SharedDtor() {
}

void WritePageReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WritePageReply::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WritePageReply& WritePageReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_WritePageReply.base);
  return *internal_default_instance();
}


void WritePageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.WritePageReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool WritePageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.WritePageReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.WritePageReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.WritePageReply)
  return false;
#undef DO_
}

void WritePageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.WritePageReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.WritePageReply)
}

::google::protobuf::uint8* WritePageReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.WritePageReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.WritePageReply)
  return target;
}

size_t WritePageReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.WritePageReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WritePageReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.WritePageReply)
  GOOGLE_DCHECK_NE(&from, this);
  const WritePageReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WritePageReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.WritePageReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.WritePageReply)
    MergeFrom(*source);
  }
}

void WritePageReply::MergeFrom(const WritePageReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.WritePageReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    set_size(from.size());
  }
}

void WritePageReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.WritePageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WritePageReply::CopyFrom(const WritePageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.WritePageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WritePageReply::IsInitialized() const {
  return true;
}

void WritePageReply::Swap(WritePageReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WritePageReply::InternalSwap(WritePageReply* other) {
  using std::swap;
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WritePageReply::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReadPageRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadPageRequest::kPageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadPageRequest::ReadPageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_ReadPageRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.ReadPageRequest)
}
ReadPageRequest::ReadPageRequest(const ReadPageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_id_ = from.page_id_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.ReadPageRequest)
}

void ReadPageRequest::SharedCtor() {
  page_id_ = GOOGLE_ULONGLONG(0);
}

ReadPageRequest::~ReadPageRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.ReadPageRequest)
  SharedDtor();
}

void ReadPageRequest::SharedDtor() {
}

void ReadPageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReadPageRequest::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadPageRequest& ReadPageRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_ReadPageRequest.base);
  return *internal_default_instance();
}


void ReadPageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.ReadPageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ReadPageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.ReadPageRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 page_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &page_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.ReadPageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.ReadPageRequest)
  return false;
#undef DO_
}

void ReadPageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.ReadPageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 page_id = 1;
  if (this->page_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->page_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.ReadPageRequest)
}

::google::protobuf::uint8* ReadPageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.ReadPageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 page_id = 1;
  if (this->page_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->page_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.ReadPageRequest)
  return target;
}

size_t ReadPageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.ReadPageRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 page_id = 1;
  if (this->page_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->page_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadPageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.ReadPageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadPageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadPageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.ReadPageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.ReadPageRequest)
    MergeFrom(*source);
  }
}

void ReadPageRequest::MergeFrom(const ReadPageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.ReadPageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_id() != 0) {
    set_page_id(from.page_id());
  }
}

void ReadPageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.ReadPageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadPageRequest::CopyFrom(const ReadPageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.ReadPageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadPageRequest::IsInitialized() const {
  return true;
}

void ReadPageRequest::Swap(ReadPageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadPageRequest::InternalSwap(ReadPageRequest* other) {
  using std::swap;
  swap(page_id_, other->page_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReadPageRequest::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReadPageReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadPageReply::kPageBufFieldNumber;
const int ReadPageReply::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadPageReply::ReadPageReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_ReadPageReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.ReadPageReply)
}
ReadPageReply::ReadPageReply(const ReadPageReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_buf().size() > 0) {
    page_buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_buf_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.ReadPageReply)
}

void ReadPageReply::SharedCtor() {
  page_buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_ULONGLONG(0);
}

ReadPageReply::~ReadPageReply() {
  // @@protoc_insertion_point(destructor:dbx1000.ReadPageReply)
  SharedDtor();
}

void ReadPageReply::SharedDtor() {
  page_buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadPageReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReadPageReply::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadPageReply& ReadPageReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_ReadPageReply.base);
  return *internal_default_instance();
}


void ReadPageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.ReadPageReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ReadPageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.ReadPageReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes page_buf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.ReadPageReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.ReadPageReply)
  return false;
#undef DO_
}

void ReadPageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.ReadPageReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes page_buf = 1;
  if (this->page_buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->page_buf(), output);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.ReadPageReply)
}

::google::protobuf::uint8* ReadPageReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.ReadPageReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes page_buf = 1;
  if (this->page_buf().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->page_buf(), target);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.ReadPageReply)
  return target;
}

size_t ReadPageReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.ReadPageReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes page_buf = 1;
  if (this->page_buf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->page_buf());
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadPageReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.ReadPageReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadPageReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadPageReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.ReadPageReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.ReadPageReply)
    MergeFrom(*source);
  }
}

void ReadPageReply::MergeFrom(const ReadPageReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.ReadPageReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_buf().size() > 0) {

    page_buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_buf_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void ReadPageReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.ReadPageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadPageReply::CopyFrom(const ReadPageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.ReadPageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadPageReply::IsInitialized() const {
  return true;
}

void ReadPageReply::Swap(ReadPageReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadPageReply::InternalSwap(ReadPageReply* other) {
  using std::swap;
  page_buf_.Swap(&other->page_buf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReadPageReply::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CloseAllRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseAllRequest::CloseAllRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_CloseAllRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.CloseAllRequest)
}
CloseAllRequest::CloseAllRequest(const CloseAllRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dbx1000.CloseAllRequest)
}

void CloseAllRequest::SharedCtor() {
}

CloseAllRequest::~CloseAllRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.CloseAllRequest)
  SharedDtor();
}

void CloseAllRequest::SharedDtor() {
}

void CloseAllRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CloseAllRequest::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloseAllRequest& CloseAllRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_CloseAllRequest.base);
  return *internal_default_instance();
}


void CloseAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.CloseAllRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CloseAllRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.CloseAllRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.CloseAllRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.CloseAllRequest)
  return false;
#undef DO_
}

void CloseAllRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.CloseAllRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.CloseAllRequest)
}

::google::protobuf::uint8* CloseAllRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.CloseAllRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.CloseAllRequest)
  return target;
}

size_t CloseAllRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.CloseAllRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseAllRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.CloseAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseAllRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseAllRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.CloseAllRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.CloseAllRequest)
    MergeFrom(*source);
  }
}

void CloseAllRequest::MergeFrom(const CloseAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.CloseAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CloseAllRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.CloseAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseAllRequest::CopyFrom(const CloseAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.CloseAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseAllRequest::IsInitialized() const {
  return true;
}

void CloseAllRequest::Swap(CloseAllRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseAllRequest::InternalSwap(CloseAllRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CloseAllRequest::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CloseAllReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseAllReply::kRcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseAllReply::CloseAllReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_CloseAllReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.CloseAllReply)
}
CloseAllReply::CloseAllReply(const CloseAllReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rc_ = from.rc_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.CloseAllReply)
}

void CloseAllReply::SharedCtor() {
  rc_ = 0;
}

CloseAllReply::~CloseAllReply() {
  // @@protoc_insertion_point(destructor:dbx1000.CloseAllReply)
  SharedDtor();
}

void CloseAllReply::SharedDtor() {
}

void CloseAllReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CloseAllReply::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloseAllReply& CloseAllReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_CloseAllReply.base);
  return *internal_default_instance();
}


void CloseAllReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.CloseAllReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rc_ = 0;
  _internal_metadata_.Clear();
}

bool CloseAllReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.CloseAllReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.CloseAllReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.CloseAllReply)
  return false;
#undef DO_
}

void CloseAllReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.CloseAllReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rc = 1;
  if (this->rc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.CloseAllReply)
}

::google::protobuf::uint8* CloseAllReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.CloseAllReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rc = 1;
  if (this->rc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.CloseAllReply)
  return target;
}

size_t CloseAllReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.CloseAllReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 rc = 1;
  if (this->rc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseAllReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.CloseAllReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseAllReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseAllReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.CloseAllReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.CloseAllReply)
    MergeFrom(*source);
  }
}

void CloseAllReply::MergeFrom(const CloseAllReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.CloseAllReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rc() != 0) {
    set_rc(from.rc());
  }
}

void CloseAllReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.CloseAllReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseAllReply::CopyFrom(const CloseAllReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.CloseAllReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseAllReply::IsInitialized() const {
  return true;
}

void CloseAllReply::Swap(CloseAllReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseAllReply::InternalSwap(CloseAllReply* other) {
  using std::swap;
  swap(rc_, other->rc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CloseAllReply::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CloseRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseRequest::kFdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseRequest::CloseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_CloseRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.CloseRequest)
}
CloseRequest::CloseRequest(const CloseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fd_ = from.fd_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.CloseRequest)
}

void CloseRequest::SharedCtor() {
  fd_ = 0;
}

CloseRequest::~CloseRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.CloseRequest)
  SharedDtor();
}

void CloseRequest::SharedDtor() {
}

void CloseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CloseRequest::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloseRequest& CloseRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_CloseRequest.base);
  return *internal_default_instance();
}


void CloseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.CloseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fd_ = 0;
  _internal_metadata_.Clear();
}

bool CloseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.CloseRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.CloseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.CloseRequest)
  return false;
#undef DO_
}

void CloseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.CloseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fd = 1;
  if (this->fd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.CloseRequest)
}

::google::protobuf::uint8* CloseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.CloseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fd = 1;
  if (this->fd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.CloseRequest)
  return target;
}

size_t CloseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.CloseRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 fd = 1;
  if (this->fd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.CloseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.CloseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.CloseRequest)
    MergeFrom(*source);
  }
}

void CloseRequest::MergeFrom(const CloseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.CloseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fd() != 0) {
    set_fd(from.fd());
  }
}

void CloseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.CloseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseRequest::CopyFrom(const CloseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.CloseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseRequest::IsInitialized() const {
  return true;
}

void CloseRequest::Swap(CloseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseRequest::InternalSwap(CloseRequest* other) {
  using std::swap;
  swap(fd_, other->fd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CloseRequest::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CloseReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseReply::kRcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseReply::CloseReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_shared_5fdisk_5fservice_2eproto::scc_info_CloseReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.CloseReply)
}
CloseReply::CloseReply(const CloseReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rc_ = from.rc_;
  // @@protoc_insertion_point(copy_constructor:dbx1000.CloseReply)
}

void CloseReply::SharedCtor() {
  rc_ = 0;
}

CloseReply::~CloseReply() {
  // @@protoc_insertion_point(destructor:dbx1000.CloseReply)
  SharedDtor();
}

void CloseReply::SharedDtor() {
}

void CloseReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CloseReply::descriptor() {
  ::protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloseReply& CloseReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_shared_5fdisk_5fservice_2eproto::scc_info_CloseReply.base);
  return *internal_default_instance();
}


void CloseReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.CloseReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rc_ = 0;
  _internal_metadata_.Clear();
}

bool CloseReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.CloseReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.CloseReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.CloseReply)
  return false;
#undef DO_
}

void CloseReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.CloseReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rc = 1;
  if (this->rc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.CloseReply)
}

::google::protobuf::uint8* CloseReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.CloseReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rc = 1;
  if (this->rc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.CloseReply)
  return target;
}

size_t CloseReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.CloseReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 rc = 1;
  if (this->rc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.CloseReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.CloseReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.CloseReply)
    MergeFrom(*source);
  }
}

void CloseReply::MergeFrom(const CloseReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.CloseReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rc() != 0) {
    set_rc(from.rc());
  }
}

void CloseReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.CloseReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseReply::CopyFrom(const CloseReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.CloseReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseReply::IsInitialized() const {
  return true;
}

void CloseReply::Swap(CloseReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseReply::InternalSwap(CloseReply* other) {
  using std::swap;
  swap(rc_, other->rc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CloseReply::GetMetadata() const {
  protobuf_shared_5fdisk_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_shared_5fdisk_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dbx1000
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::OpenRequest* Arena::CreateMaybeMessage< ::dbx1000::OpenRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::OpenRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::OpenReply* Arena::CreateMaybeMessage< ::dbx1000::OpenReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::OpenReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::WriteRequest* Arena::CreateMaybeMessage< ::dbx1000::WriteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::WriteRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::WriteReply* Arena::CreateMaybeMessage< ::dbx1000::WriteReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::WriteReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::ReadRequest* Arena::CreateMaybeMessage< ::dbx1000::ReadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::ReadRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::ReadReply* Arena::CreateMaybeMessage< ::dbx1000::ReadReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::ReadReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::WritePageRequest* Arena::CreateMaybeMessage< ::dbx1000::WritePageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::WritePageRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::WritePageReply* Arena::CreateMaybeMessage< ::dbx1000::WritePageReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::WritePageReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::ReadPageRequest* Arena::CreateMaybeMessage< ::dbx1000::ReadPageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::ReadPageRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::ReadPageReply* Arena::CreateMaybeMessage< ::dbx1000::ReadPageReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::ReadPageReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::CloseAllRequest* Arena::CreateMaybeMessage< ::dbx1000::CloseAllRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::CloseAllRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::CloseAllReply* Arena::CreateMaybeMessage< ::dbx1000::CloseAllReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::CloseAllReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::CloseRequest* Arena::CreateMaybeMessage< ::dbx1000::CloseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::CloseRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::CloseReply* Arena::CreateMaybeMessage< ::dbx1000::CloseReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::CloseReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
