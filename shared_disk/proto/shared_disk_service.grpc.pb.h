// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: shared_disk_service.proto
#ifndef GRPC_shared_5fdisk_5fservice_2eproto__INCLUDED
#define GRPC_shared_5fdisk_5fservice_2eproto__INCLUDED

#include "shared_disk_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace dbx1000 {

class SharedDiskService final {
 public:
  static constexpr char const* service_full_name() {
    return "dbx1000.SharedDiskService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Open(::grpc::ClientContext* context, const ::dbx1000::OpenRequest& request, ::dbx1000::OpenReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::OpenReply>> AsyncOpen(::grpc::ClientContext* context, const ::dbx1000::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::OpenReply>>(AsyncOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::OpenReply>> PrepareAsyncOpen(::grpc::ClientContext* context, const ::dbx1000::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::OpenReply>>(PrepareAsyncOpenRaw(context, request, cq));
    }
    virtual ::grpc::Status Write(::grpc::ClientContext* context, const ::dbx1000::WriteRequest& request, ::dbx1000::WriteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::WriteReply>> AsyncWrite(::grpc::ClientContext* context, const ::dbx1000::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::WriteReply>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::WriteReply>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::dbx1000::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::WriteReply>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    virtual ::grpc::Status Read(::grpc::ClientContext* context, const ::dbx1000::ReadRequest& request, ::dbx1000::ReadReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReadReply>> AsyncRead(::grpc::ClientContext* context, const ::dbx1000::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReadReply>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReadReply>> PrepareAsyncRead(::grpc::ClientContext* context, const ::dbx1000::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReadReply>>(PrepareAsyncReadRaw(context, request, cq));
    }
    virtual ::grpc::Status WritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest& request, ::dbx1000::WritePageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::WritePageReply>> AsyncWritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::WritePageReply>>(AsyncWritePageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::WritePageReply>> PrepareAsyncWritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::WritePageReply>>(PrepareAsyncWritePageRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest& request, ::dbx1000::ReadPageReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReadPageReply>> AsyncReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReadPageReply>>(AsyncReadPageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReadPageReply>> PrepareAsyncReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReadPageReply>>(PrepareAsyncReadPageRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest& request, ::dbx1000::CloseAllReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::CloseAllReply>> AsyncCloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::CloseAllReply>>(AsyncCloseAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::CloseAllReply>> PrepareAsyncCloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::CloseAllReply>>(PrepareAsyncCloseAllRaw(context, request, cq));
    }
    virtual ::grpc::Status Close(::grpc::ClientContext* context, const ::dbx1000::CloseRequest& request, ::dbx1000::CloseReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::CloseReply>> AsyncClose(::grpc::ClientContext* context, const ::dbx1000::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::CloseReply>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::CloseReply>> PrepareAsyncClose(::grpc::ClientContext* context, const ::dbx1000::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::CloseReply>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Open(::grpc::ClientContext* context, const ::dbx1000::OpenRequest* request, ::dbx1000::OpenReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::OpenReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Open(::grpc::ClientContext* context, const ::dbx1000::OpenRequest* request, ::dbx1000::OpenReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Open(::grpc::ClientContext* context, const ::dbx1000::OpenRequest* request, ::dbx1000::OpenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::OpenReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::OpenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Write(::grpc::ClientContext* context, const ::dbx1000::WriteRequest* request, ::dbx1000::WriteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WriteReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Write(::grpc::ClientContext* context, const ::dbx1000::WriteRequest* request, ::dbx1000::WriteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Write(::grpc::ClientContext* context, const ::dbx1000::WriteRequest* request, ::dbx1000::WriteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WriteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WriteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Read(::grpc::ClientContext* context, const ::dbx1000::ReadRequest* request, ::dbx1000::ReadReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Read(::grpc::ClientContext* context, const ::dbx1000::ReadRequest* request, ::dbx1000::ReadReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Read(::grpc::ClientContext* context, const ::dbx1000::ReadRequest* request, ::dbx1000::ReadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void WritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest* request, ::dbx1000::WritePageReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WritePage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WritePageReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void WritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest* request, ::dbx1000::WritePageReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void WritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest* request, ::dbx1000::WritePageReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void WritePage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WritePageReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void WritePage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WritePageReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest* request, ::dbx1000::ReadPageReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadPageReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest* request, ::dbx1000::ReadPageReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest* request, ::dbx1000::ReadPageReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReadPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadPageReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReadPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadPageReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest* request, ::dbx1000::CloseAllReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseAllReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest* request, ::dbx1000::CloseAllReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest* request, ::dbx1000::CloseAllReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseAllReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseAllReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Close(::grpc::ClientContext* context, const ::dbx1000::CloseRequest* request, ::dbx1000::CloseReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Close(::grpc::ClientContext* context, const ::dbx1000::CloseRequest* request, ::dbx1000::CloseReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Close(::grpc::ClientContext* context, const ::dbx1000::CloseRequest* request, ::dbx1000::CloseReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::OpenReply>* AsyncOpenRaw(::grpc::ClientContext* context, const ::dbx1000::OpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::OpenReply>* PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::dbx1000::OpenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::WriteReply>* AsyncWriteRaw(::grpc::ClientContext* context, const ::dbx1000::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::WriteReply>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::dbx1000::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReadReply>* AsyncReadRaw(::grpc::ClientContext* context, const ::dbx1000::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReadReply>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::dbx1000::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::WritePageReply>* AsyncWritePageRaw(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::WritePageReply>* PrepareAsyncWritePageRaw(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReadPageReply>* AsyncReadPageRaw(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::ReadPageReply>* PrepareAsyncReadPageRaw(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::CloseAllReply>* AsyncCloseAllRaw(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::CloseAllReply>* PrepareAsyncCloseAllRaw(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::CloseReply>* AsyncCloseRaw(::grpc::ClientContext* context, const ::dbx1000::CloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::CloseReply>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::dbx1000::CloseRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Open(::grpc::ClientContext* context, const ::dbx1000::OpenRequest& request, ::dbx1000::OpenReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::OpenReply>> AsyncOpen(::grpc::ClientContext* context, const ::dbx1000::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::OpenReply>>(AsyncOpenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::OpenReply>> PrepareAsyncOpen(::grpc::ClientContext* context, const ::dbx1000::OpenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::OpenReply>>(PrepareAsyncOpenRaw(context, request, cq));
    }
    ::grpc::Status Write(::grpc::ClientContext* context, const ::dbx1000::WriteRequest& request, ::dbx1000::WriteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::WriteReply>> AsyncWrite(::grpc::ClientContext* context, const ::dbx1000::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::WriteReply>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::WriteReply>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::dbx1000::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::WriteReply>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    ::grpc::Status Read(::grpc::ClientContext* context, const ::dbx1000::ReadRequest& request, ::dbx1000::ReadReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ReadReply>> AsyncRead(::grpc::ClientContext* context, const ::dbx1000::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ReadReply>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ReadReply>> PrepareAsyncRead(::grpc::ClientContext* context, const ::dbx1000::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ReadReply>>(PrepareAsyncReadRaw(context, request, cq));
    }
    ::grpc::Status WritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest& request, ::dbx1000::WritePageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::WritePageReply>> AsyncWritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::WritePageReply>>(AsyncWritePageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::WritePageReply>> PrepareAsyncWritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::WritePageReply>>(PrepareAsyncWritePageRaw(context, request, cq));
    }
    ::grpc::Status ReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest& request, ::dbx1000::ReadPageReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ReadPageReply>> AsyncReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ReadPageReply>>(AsyncReadPageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ReadPageReply>> PrepareAsyncReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::ReadPageReply>>(PrepareAsyncReadPageRaw(context, request, cq));
    }
    ::grpc::Status CloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest& request, ::dbx1000::CloseAllReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::CloseAllReply>> AsyncCloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::CloseAllReply>>(AsyncCloseAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::CloseAllReply>> PrepareAsyncCloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::CloseAllReply>>(PrepareAsyncCloseAllRaw(context, request, cq));
    }
    ::grpc::Status Close(::grpc::ClientContext* context, const ::dbx1000::CloseRequest& request, ::dbx1000::CloseReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::CloseReply>> AsyncClose(::grpc::ClientContext* context, const ::dbx1000::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::CloseReply>>(AsyncCloseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::CloseReply>> PrepareAsyncClose(::grpc::ClientContext* context, const ::dbx1000::CloseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::CloseReply>>(PrepareAsyncCloseRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Open(::grpc::ClientContext* context, const ::dbx1000::OpenRequest* request, ::dbx1000::OpenReply* response, std::function<void(::grpc::Status)>) override;
      void Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::OpenReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Open(::grpc::ClientContext* context, const ::dbx1000::OpenRequest* request, ::dbx1000::OpenReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Open(::grpc::ClientContext* context, const ::dbx1000::OpenRequest* request, ::dbx1000::OpenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::OpenReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::OpenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Write(::grpc::ClientContext* context, const ::dbx1000::WriteRequest* request, ::dbx1000::WriteReply* response, std::function<void(::grpc::Status)>) override;
      void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WriteReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Write(::grpc::ClientContext* context, const ::dbx1000::WriteRequest* request, ::dbx1000::WriteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Write(::grpc::ClientContext* context, const ::dbx1000::WriteRequest* request, ::dbx1000::WriteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WriteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Write(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WriteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Read(::grpc::ClientContext* context, const ::dbx1000::ReadRequest* request, ::dbx1000::ReadReply* response, std::function<void(::grpc::Status)>) override;
      void Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Read(::grpc::ClientContext* context, const ::dbx1000::ReadRequest* request, ::dbx1000::ReadReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Read(::grpc::ClientContext* context, const ::dbx1000::ReadRequest* request, ::dbx1000::ReadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Read(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void WritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest* request, ::dbx1000::WritePageReply* response, std::function<void(::grpc::Status)>) override;
      void WritePage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WritePageReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void WritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest* request, ::dbx1000::WritePageReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void WritePage(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest* request, ::dbx1000::WritePageReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void WritePage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WritePageReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void WritePage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::WritePageReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest* request, ::dbx1000::ReadPageReply* response, std::function<void(::grpc::Status)>) override;
      void ReadPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadPageReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest* request, ::dbx1000::ReadPageReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReadPage(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest* request, ::dbx1000::ReadPageReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReadPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadPageReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReadPage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::ReadPageReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest* request, ::dbx1000::CloseAllReply* response, std::function<void(::grpc::Status)>) override;
      void CloseAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseAllReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest* request, ::dbx1000::CloseAllReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseAll(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest* request, ::dbx1000::CloseAllReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseAllReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseAllReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Close(::grpc::ClientContext* context, const ::dbx1000::CloseRequest* request, ::dbx1000::CloseReply* response, std::function<void(::grpc::Status)>) override;
      void Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Close(::grpc::ClientContext* context, const ::dbx1000::CloseRequest* request, ::dbx1000::CloseReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Close(::grpc::ClientContext* context, const ::dbx1000::CloseRequest* request, ::dbx1000::CloseReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Close(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::CloseReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dbx1000::OpenReply>* AsyncOpenRaw(::grpc::ClientContext* context, const ::dbx1000::OpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::OpenReply>* PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::dbx1000::OpenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::WriteReply>* AsyncWriteRaw(::grpc::ClientContext* context, const ::dbx1000::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::WriteReply>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::dbx1000::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::ReadReply>* AsyncReadRaw(::grpc::ClientContext* context, const ::dbx1000::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::ReadReply>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::dbx1000::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::WritePageReply>* AsyncWritePageRaw(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::WritePageReply>* PrepareAsyncWritePageRaw(::grpc::ClientContext* context, const ::dbx1000::WritePageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::ReadPageReply>* AsyncReadPageRaw(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::ReadPageReply>* PrepareAsyncReadPageRaw(::grpc::ClientContext* context, const ::dbx1000::ReadPageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::CloseAllReply>* AsyncCloseAllRaw(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::CloseAllReply>* PrepareAsyncCloseAllRaw(::grpc::ClientContext* context, const ::dbx1000::CloseAllRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::CloseReply>* AsyncCloseRaw(::grpc::ClientContext* context, const ::dbx1000::CloseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::CloseReply>* PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::dbx1000::CloseRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Open_;
    const ::grpc::internal::RpcMethod rpcmethod_Write_;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
    const ::grpc::internal::RpcMethod rpcmethod_WritePage_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadPage_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseAll_;
    const ::grpc::internal::RpcMethod rpcmethod_Close_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Open(::grpc::ServerContext* context, const ::dbx1000::OpenRequest* request, ::dbx1000::OpenReply* response);
    virtual ::grpc::Status Write(::grpc::ServerContext* context, const ::dbx1000::WriteRequest* request, ::dbx1000::WriteReply* response);
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::dbx1000::ReadRequest* request, ::dbx1000::ReadReply* response);
    virtual ::grpc::Status WritePage(::grpc::ServerContext* context, const ::dbx1000::WritePageRequest* request, ::dbx1000::WritePageReply* response);
    virtual ::grpc::Status ReadPage(::grpc::ServerContext* context, const ::dbx1000::ReadPageRequest* request, ::dbx1000::ReadPageReply* response);
    virtual ::grpc::Status CloseAll(::grpc::ServerContext* context, const ::dbx1000::CloseAllRequest* request, ::dbx1000::CloseAllReply* response);
    virtual ::grpc::Status Close(::grpc::ServerContext* context, const ::dbx1000::CloseRequest* request, ::dbx1000::CloseReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Open() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::dbx1000::OpenRequest* /*request*/, ::dbx1000::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpen(::grpc::ServerContext* context, ::dbx1000::OpenRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::OpenReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::dbx1000::WriteRequest* /*request*/, ::dbx1000::WriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::dbx1000::WriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::WriteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::dbx1000::ReadRequest* /*request*/, ::dbx1000::ReadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::dbx1000::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::ReadReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WritePage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WritePage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_WritePage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePage(::grpc::ServerContext* /*context*/, const ::dbx1000::WritePageRequest* /*request*/, ::dbx1000::WritePageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWritePage(::grpc::ServerContext* context, ::dbx1000::WritePageRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::WritePageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadPage() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReadPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadPage(::grpc::ServerContext* /*context*/, const ::dbx1000::ReadPageRequest* /*request*/, ::dbx1000::ReadPageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadPage(::grpc::ServerContext* context, ::dbx1000::ReadPageRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::ReadPageReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseAll() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CloseAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseAll(::grpc::ServerContext* /*context*/, const ::dbx1000::CloseAllRequest* /*request*/, ::dbx1000::CloseAllReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseAll(::grpc::ServerContext* context, ::dbx1000::CloseAllRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::CloseAllReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Close() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::dbx1000::CloseRequest* /*request*/, ::dbx1000::CloseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::dbx1000::CloseRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::CloseReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Open<WithAsyncMethod_Write<WithAsyncMethod_Read<WithAsyncMethod_WritePage<WithAsyncMethod_ReadPage<WithAsyncMethod_CloseAll<WithAsyncMethod_Close<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Open() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::OpenRequest, ::dbx1000::OpenReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dbx1000::OpenRequest* request, ::dbx1000::OpenReply* response) { return this->Open(context, request, response); }));}
    void SetMessageAllocatorFor_Open(
        ::grpc::experimental::MessageAllocator< ::dbx1000::OpenRequest, ::dbx1000::OpenReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::OpenRequest, ::dbx1000::OpenReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::dbx1000::OpenRequest* /*request*/, ::dbx1000::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Open(
      ::grpc::CallbackServerContext* /*context*/, const ::dbx1000::OpenRequest* /*request*/, ::dbx1000::OpenReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Open(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dbx1000::OpenRequest* /*request*/, ::dbx1000::OpenReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Write() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::WriteRequest, ::dbx1000::WriteReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dbx1000::WriteRequest* request, ::dbx1000::WriteReply* response) { return this->Write(context, request, response); }));}
    void SetMessageAllocatorFor_Write(
        ::grpc::experimental::MessageAllocator< ::dbx1000::WriteRequest, ::dbx1000::WriteReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::WriteRequest, ::dbx1000::WriteReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::dbx1000::WriteRequest* /*request*/, ::dbx1000::WriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Write(
      ::grpc::CallbackServerContext* /*context*/, const ::dbx1000::WriteRequest* /*request*/, ::dbx1000::WriteReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Write(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dbx1000::WriteRequest* /*request*/, ::dbx1000::WriteReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::ReadRequest, ::dbx1000::ReadReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dbx1000::ReadRequest* request, ::dbx1000::ReadReply* response) { return this->Read(context, request, response); }));}
    void SetMessageAllocatorFor_Read(
        ::grpc::experimental::MessageAllocator< ::dbx1000::ReadRequest, ::dbx1000::ReadReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::ReadRequest, ::dbx1000::ReadReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::dbx1000::ReadRequest* /*request*/, ::dbx1000::ReadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::dbx1000::ReadRequest* /*request*/, ::dbx1000::ReadReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dbx1000::ReadRequest* /*request*/, ::dbx1000::ReadReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WritePage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_WritePage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::WritePageRequest, ::dbx1000::WritePageReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dbx1000::WritePageRequest* request, ::dbx1000::WritePageReply* response) { return this->WritePage(context, request, response); }));}
    void SetMessageAllocatorFor_WritePage(
        ::grpc::experimental::MessageAllocator< ::dbx1000::WritePageRequest, ::dbx1000::WritePageReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::WritePageRequest, ::dbx1000::WritePageReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_WritePage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePage(::grpc::ServerContext* /*context*/, const ::dbx1000::WritePageRequest* /*request*/, ::dbx1000::WritePageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WritePage(
      ::grpc::CallbackServerContext* /*context*/, const ::dbx1000::WritePageRequest* /*request*/, ::dbx1000::WritePageReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WritePage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dbx1000::WritePageRequest* /*request*/, ::dbx1000::WritePageReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReadPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReadPage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::ReadPageRequest, ::dbx1000::ReadPageReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dbx1000::ReadPageRequest* request, ::dbx1000::ReadPageReply* response) { return this->ReadPage(context, request, response); }));}
    void SetMessageAllocatorFor_ReadPage(
        ::grpc::experimental::MessageAllocator< ::dbx1000::ReadPageRequest, ::dbx1000::ReadPageReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::ReadPageRequest, ::dbx1000::ReadPageReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReadPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadPage(::grpc::ServerContext* /*context*/, const ::dbx1000::ReadPageRequest* /*request*/, ::dbx1000::ReadPageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReadPage(
      ::grpc::CallbackServerContext* /*context*/, const ::dbx1000::ReadPageRequest* /*request*/, ::dbx1000::ReadPageReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReadPage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dbx1000::ReadPageRequest* /*request*/, ::dbx1000::ReadPageReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CloseAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CloseAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::CloseAllRequest, ::dbx1000::CloseAllReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dbx1000::CloseAllRequest* request, ::dbx1000::CloseAllReply* response) { return this->CloseAll(context, request, response); }));}
    void SetMessageAllocatorFor_CloseAll(
        ::grpc::experimental::MessageAllocator< ::dbx1000::CloseAllRequest, ::dbx1000::CloseAllReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::CloseAllRequest, ::dbx1000::CloseAllReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CloseAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseAll(::grpc::ServerContext* /*context*/, const ::dbx1000::CloseAllRequest* /*request*/, ::dbx1000::CloseAllReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseAll(
      ::grpc::CallbackServerContext* /*context*/, const ::dbx1000::CloseAllRequest* /*request*/, ::dbx1000::CloseAllReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dbx1000::CloseAllRequest* /*request*/, ::dbx1000::CloseAllReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Close() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::CloseRequest, ::dbx1000::CloseReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dbx1000::CloseRequest* request, ::dbx1000::CloseReply* response) { return this->Close(context, request, response); }));}
    void SetMessageAllocatorFor_Close(
        ::grpc::experimental::MessageAllocator< ::dbx1000::CloseRequest, ::dbx1000::CloseReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::CloseRequest, ::dbx1000::CloseReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::dbx1000::CloseRequest* /*request*/, ::dbx1000::CloseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Close(
      ::grpc::CallbackServerContext* /*context*/, const ::dbx1000::CloseRequest* /*request*/, ::dbx1000::CloseReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Close(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dbx1000::CloseRequest* /*request*/, ::dbx1000::CloseReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Open<ExperimentalWithCallbackMethod_Write<ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_WritePage<ExperimentalWithCallbackMethod_ReadPage<ExperimentalWithCallbackMethod_CloseAll<ExperimentalWithCallbackMethod_Close<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Open<ExperimentalWithCallbackMethod_Write<ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_WritePage<ExperimentalWithCallbackMethod_ReadPage<ExperimentalWithCallbackMethod_CloseAll<ExperimentalWithCallbackMethod_Close<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Open() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::dbx1000::OpenRequest* /*request*/, ::dbx1000::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::dbx1000::WriteRequest* /*request*/, ::dbx1000::WriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::dbx1000::ReadRequest* /*request*/, ::dbx1000::ReadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WritePage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WritePage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_WritePage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePage(::grpc::ServerContext* /*context*/, const ::dbx1000::WritePageRequest* /*request*/, ::dbx1000::WritePageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadPage() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReadPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadPage(::grpc::ServerContext* /*context*/, const ::dbx1000::ReadPageRequest* /*request*/, ::dbx1000::ReadPageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseAll() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CloseAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseAll(::grpc::ServerContext* /*context*/, const ::dbx1000::CloseAllRequest* /*request*/, ::dbx1000::CloseAllReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Close() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::dbx1000::CloseRequest* /*request*/, ::dbx1000::CloseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Open() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::dbx1000::OpenRequest* /*request*/, ::dbx1000::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Write() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::dbx1000::WriteRequest* /*request*/, ::dbx1000::WriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Read() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::dbx1000::ReadRequest* /*request*/, ::dbx1000::ReadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WritePage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WritePage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_WritePage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePage(::grpc::ServerContext* /*context*/, const ::dbx1000::WritePageRequest* /*request*/, ::dbx1000::WritePageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWritePage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadPage() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReadPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadPage(::grpc::ServerContext* /*context*/, const ::dbx1000::ReadPageRequest* /*request*/, ::dbx1000::ReadPageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadPage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseAll() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CloseAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseAll(::grpc::ServerContext* /*context*/, const ::dbx1000::CloseAllRequest* /*request*/, ::dbx1000::CloseAllReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Close() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::dbx1000::CloseRequest* /*request*/, ::dbx1000::CloseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Open() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Open(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::dbx1000::OpenRequest* /*request*/, ::dbx1000::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Open(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Open(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Write() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Write(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::dbx1000::WriteRequest* /*request*/, ::dbx1000::WriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Write(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Write(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Read(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::dbx1000::ReadRequest* /*request*/, ::dbx1000::ReadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WritePage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_WritePage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WritePage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_WritePage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePage(::grpc::ServerContext* /*context*/, const ::dbx1000::WritePageRequest* /*request*/, ::dbx1000::WritePageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WritePage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WritePage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReadPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReadPage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadPage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReadPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadPage(::grpc::ServerContext* /*context*/, const ::dbx1000::ReadPageRequest* /*request*/, ::dbx1000::ReadPageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReadPage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReadPage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CloseAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CloseAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseAll(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CloseAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseAll(::grpc::ServerContext* /*context*/, const ::dbx1000::CloseAllRequest* /*request*/, ::dbx1000::CloseAllReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseAll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Close() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Close(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::dbx1000::CloseRequest* /*request*/, ::dbx1000::CloseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Close(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Close(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Open() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbx1000::OpenRequest, ::dbx1000::OpenReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::dbx1000::OpenRequest, ::dbx1000::OpenReply>* streamer) {
                       return this->StreamedOpen(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Open(::grpc::ServerContext* /*context*/, const ::dbx1000::OpenRequest* /*request*/, ::dbx1000::OpenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::OpenRequest,::dbx1000::OpenReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Write() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbx1000::WriteRequest, ::dbx1000::WriteReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::dbx1000::WriteRequest, ::dbx1000::WriteReply>* streamer) {
                       return this->StreamedWrite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::dbx1000::WriteRequest* /*request*/, ::dbx1000::WriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::WriteRequest,::dbx1000::WriteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbx1000::ReadRequest, ::dbx1000::ReadReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::dbx1000::ReadRequest, ::dbx1000::ReadReply>* streamer) {
                       return this->StreamedRead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::dbx1000::ReadRequest* /*request*/, ::dbx1000::ReadReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::ReadRequest,::dbx1000::ReadReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WritePage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WritePage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbx1000::WritePageRequest, ::dbx1000::WritePageReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::dbx1000::WritePageRequest, ::dbx1000::WritePageReply>* streamer) {
                       return this->StreamedWritePage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WritePage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WritePage(::grpc::ServerContext* /*context*/, const ::dbx1000::WritePageRequest* /*request*/, ::dbx1000::WritePageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWritePage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::WritePageRequest,::dbx1000::WritePageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadPage() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbx1000::ReadPageRequest, ::dbx1000::ReadPageReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::dbx1000::ReadPageRequest, ::dbx1000::ReadPageReply>* streamer) {
                       return this->StreamedReadPage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadPage(::grpc::ServerContext* /*context*/, const ::dbx1000::ReadPageRequest* /*request*/, ::dbx1000::ReadPageReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadPage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::ReadPageRequest,::dbx1000::ReadPageReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseAll() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbx1000::CloseAllRequest, ::dbx1000::CloseAllReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::dbx1000::CloseAllRequest, ::dbx1000::CloseAllReply>* streamer) {
                       return this->StreamedCloseAll(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseAll(::grpc::ServerContext* /*context*/, const ::dbx1000::CloseAllRequest* /*request*/, ::dbx1000::CloseAllReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::CloseAllRequest,::dbx1000::CloseAllReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Close : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Close() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbx1000::CloseRequest, ::dbx1000::CloseReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::dbx1000::CloseRequest, ::dbx1000::CloseReply>* streamer) {
                       return this->StreamedClose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Close() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Close(::grpc::ServerContext* /*context*/, const ::dbx1000::CloseRequest* /*request*/, ::dbx1000::CloseReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::CloseRequest,::dbx1000::CloseReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Open<WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_WritePage<WithStreamedUnaryMethod_ReadPage<WithStreamedUnaryMethod_CloseAll<WithStreamedUnaryMethod_Close<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Open<WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_WritePage<WithStreamedUnaryMethod_ReadPage<WithStreamedUnaryMethod_CloseAll<WithStreamedUnaryMethod_Close<Service > > > > > > > StreamedService;
};

}  // namespace dbx1000


#endif  // GRPC_shared_5fdisk_5fservice_2eproto__INCLUDED
