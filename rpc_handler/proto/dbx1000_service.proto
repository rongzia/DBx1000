syntax = "proto3";

package dbx1000;

service DBx1000Service {
  // for instance
  rpc LockRemote(LockRemoteRequest) returns (LockRemoteReply) {}
  rpc InstanceInitDone(InstanceInitDoneRequest) returns (InstanceInitDoneReply) {}
  rpc BufferManagerInitDone(BufferManagerInitDoneRequest) returns (BufferManagerInitDonReply) {}
  rpc GetNextTs(GetNextTsRequest) returns (GetNextTsReply) {}

  // for lock_server
  rpc Invalid(InvalidRequest) returns (InvalidReply) {}
  rpc GetTestNum(GetTestNumRequest) returns (GetTestNumReply) {}
}
enum RpcLockMode {
  O = 0;
  P = 1;
  S = 2;
  X = 3;
}

enum RpcRC {
  RCOK = 0;
  Commit = 1;
  Abort = 2;
  WAIT = 3;
  ERROR = 4;
  FINISH = 5;
  TIME_OUT = 6;
}

message LockRemoteRequest{
  int32 instance_id = 1;
  uint64 page_id = 2;
  RpcLockMode req_mode = 3;
  bytes page_buf = 4;
  uint64 count = 5;
}
message LockRemoteReply{
  RpcRC rc = 1;
  bytes page_buf = 2;
  uint64 count = 3;
}
/*
message UnLockRemoteRequest{
  int32 instance_id = 1;
  RpcLockMode req_mode = 2;
  uint64 page_id = 3;
  uint64 page_version = 4;
  uint64 key = 5;
  uint64 key_version = 6;
  bytes page_buf = 7;
  uint64 count = 8;
}
message UnLockRemoteReply{
  bool rc = 1;
  bytes page_buf = 2;
  uint64 count = 3;
}
*/
message InstanceInitDoneRequest{
  int32 instance_id = 1;
}
message InstanceInitDoneReply{}

message BufferManagerInitDoneRequest{}
message BufferManagerInitDonReply{
  bool init_done = 1;
}

message InvalidRequest{
  uint64 page_id = 1;
  bytes page_buf = 2;
  uint64 count = 3;
}

message InvalidReply{
  RpcRC rc = 1;
  bytes page_buf = 2;
  uint64 count = 3;
}
message GetNextTsRequest{}
message GetNextTsReply{
  uint64 ts = 1;
}

message  GetTestNumRequest{}
message GetTestNumReply{int32 num = 1;}