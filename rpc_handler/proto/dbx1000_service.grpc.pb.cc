// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dbx1000_service.proto

#include "dbx1000_service.pb.h"
#include "dbx1000_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dbx1000 {

static const char* DBx1000Service_method_names[] = {
  "/dbx1000.DBx1000Service/LockRemote",
  "/dbx1000.DBx1000Service/UnLockRemote",
  "/dbx1000.DBx1000Service/InstanceInitDone",
  "/dbx1000.DBx1000Service/BufferManagerInitDone",
  "/dbx1000.DBx1000Service/GetNextTs",
  "/dbx1000.DBx1000Service/GetTestNum",
};

std::unique_ptr< DBx1000Service::Stub> DBx1000Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DBx1000Service::Stub> stub(new DBx1000Service::Stub(channel));
  return stub;
}

DBx1000Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_LockRemote_(DBx1000Service_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnLockRemote_(DBx1000Service_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstanceInitDone_(DBx1000Service_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BufferManagerInitDone_(DBx1000Service_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNextTs_(DBx1000Service_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTestNum_(DBx1000Service_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DBx1000Service::Stub::LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::dbx1000::LockRemoteReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LockRemote_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LockRemote_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::LockRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockRemoteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LockRemote_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LockRemote_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::LockRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockRemoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LockRemote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::LockRemoteReply>* DBx1000Service::Stub::AsyncLockRemoteRaw(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::LockRemoteReply>::Create(channel_.get(), cq, rpcmethod_LockRemote_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::LockRemoteReply>* DBx1000Service::Stub::PrepareAsyncLockRemoteRaw(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::LockRemoteReply>::Create(channel_.get(), cq, rpcmethod_LockRemote_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::UnLockRemote(::grpc::ClientContext* context, const ::dbx1000::UnLockRemoteRequest& request, ::dbx1000::UnLockRemoteReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnLockRemote_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::UnLockRemote(::grpc::ClientContext* context, const ::dbx1000::UnLockRemoteRequest* request, ::dbx1000::UnLockRemoteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnLockRemote_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::UnLockRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::UnLockRemoteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnLockRemote_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::UnLockRemote(::grpc::ClientContext* context, const ::dbx1000::UnLockRemoteRequest* request, ::dbx1000::UnLockRemoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnLockRemote_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::UnLockRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::UnLockRemoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnLockRemote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::UnLockRemoteReply>* DBx1000Service::Stub::AsyncUnLockRemoteRaw(::grpc::ClientContext* context, const ::dbx1000::UnLockRemoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::UnLockRemoteReply>::Create(channel_.get(), cq, rpcmethod_UnLockRemote_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::UnLockRemoteReply>* DBx1000Service::Stub::PrepareAsyncUnLockRemoteRaw(::grpc::ClientContext* context, const ::dbx1000::UnLockRemoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::UnLockRemoteReply>::Create(channel_.get(), cq, rpcmethod_UnLockRemote_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::InstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest& request, ::dbx1000::InstanceInitDoneReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InstanceInitDone_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::InstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest* request, ::dbx1000::InstanceInitDoneReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InstanceInitDone_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::InstanceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InstanceInitDoneReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InstanceInitDone_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::InstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest* request, ::dbx1000::InstanceInitDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InstanceInitDone_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::InstanceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InstanceInitDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InstanceInitDone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::InstanceInitDoneReply>* DBx1000Service::Stub::AsyncInstanceInitDoneRaw(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::InstanceInitDoneReply>::Create(channel_.get(), cq, rpcmethod_InstanceInitDone_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::InstanceInitDoneReply>* DBx1000Service::Stub::PrepareAsyncInstanceInitDoneRaw(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::InstanceInitDoneReply>::Create(channel_.get(), cq, rpcmethod_InstanceInitDone_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::BufferManagerInitDone(::grpc::ClientContext* context, const ::dbx1000::BufferManagerInitDoneRequest& request, ::dbx1000::BufferManagerInitDonReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BufferManagerInitDone_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::BufferManagerInitDone(::grpc::ClientContext* context, const ::dbx1000::BufferManagerInitDoneRequest* request, ::dbx1000::BufferManagerInitDonReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BufferManagerInitDone_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::BufferManagerInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::BufferManagerInitDonReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BufferManagerInitDone_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::BufferManagerInitDone(::grpc::ClientContext* context, const ::dbx1000::BufferManagerInitDoneRequest* request, ::dbx1000::BufferManagerInitDonReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BufferManagerInitDone_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::BufferManagerInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::BufferManagerInitDonReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BufferManagerInitDone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::BufferManagerInitDonReply>* DBx1000Service::Stub::AsyncBufferManagerInitDoneRaw(::grpc::ClientContext* context, const ::dbx1000::BufferManagerInitDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::BufferManagerInitDonReply>::Create(channel_.get(), cq, rpcmethod_BufferManagerInitDone_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::BufferManagerInitDonReply>* DBx1000Service::Stub::PrepareAsyncBufferManagerInitDoneRaw(::grpc::ClientContext* context, const ::dbx1000::BufferManagerInitDoneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::BufferManagerInitDonReply>::Create(channel_.get(), cq, rpcmethod_BufferManagerInitDone_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::dbx1000::GetNextTsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNextTs_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNextTs_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNextTs_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNextTs_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNextTs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>* DBx1000Service::Stub::AsyncGetNextTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetNextTsReply>::Create(channel_.get(), cq, rpcmethod_GetNextTs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>* DBx1000Service::Stub::PrepareAsyncGetNextTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetNextTsReply>::Create(channel_.get(), cq, rpcmethod_GetNextTs_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::GetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest& request, ::dbx1000::GetTestNumReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTestNum_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::GetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest* request, ::dbx1000::GetTestNumReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTestNum_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetTestNum(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetTestNumReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTestNum_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::GetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest* request, ::dbx1000::GetTestNumReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTestNum_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::GetTestNum(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetTestNumReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTestNum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetTestNumReply>* DBx1000Service::Stub::AsyncGetTestNumRaw(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetTestNumReply>::Create(channel_.get(), cq, rpcmethod_GetTestNum_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::GetTestNumReply>* DBx1000Service::Stub::PrepareAsyncGetTestNumRaw(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::GetTestNumReply>::Create(channel_.get(), cq, rpcmethod_GetTestNum_, context, request, false);
}

DBx1000Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::LockRemoteRequest, ::dbx1000::LockRemoteReply>(
          std::mem_fn(&DBx1000Service::Service::LockRemote), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::UnLockRemoteRequest, ::dbx1000::UnLockRemoteReply>(
          std::mem_fn(&DBx1000Service::Service::UnLockRemote), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::InstanceInitDoneRequest, ::dbx1000::InstanceInitDoneReply>(
          std::mem_fn(&DBx1000Service::Service::InstanceInitDone), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::BufferManagerInitDoneRequest, ::dbx1000::BufferManagerInitDonReply>(
          std::mem_fn(&DBx1000Service::Service::BufferManagerInitDone), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::GetNextTsRequest, ::dbx1000::GetNextTsReply>(
          std::mem_fn(&DBx1000Service::Service::GetNextTs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::GetTestNumRequest, ::dbx1000::GetTestNumReply>(
          std::mem_fn(&DBx1000Service::Service::GetTestNum), this)));
}

DBx1000Service::Service::~Service() {
}

::grpc::Status DBx1000Service::Service::LockRemote(::grpc::ServerContext* context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::UnLockRemote(::grpc::ServerContext* context, const ::dbx1000::UnLockRemoteRequest* request, ::dbx1000::UnLockRemoteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::InstanceInitDone(::grpc::ServerContext* context, const ::dbx1000::InstanceInitDoneRequest* request, ::dbx1000::InstanceInitDoneReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::BufferManagerInitDone(::grpc::ServerContext* context, const ::dbx1000::BufferManagerInitDoneRequest* request, ::dbx1000::BufferManagerInitDonReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::GetNextTs(::grpc::ServerContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::GetTestNum(::grpc::ServerContext* context, const ::dbx1000::GetTestNumRequest* request, ::dbx1000::GetTestNumReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dbx1000

