// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dbx1000_service.proto

#include "dbx1000_service.pb.h"
#include "dbx1000_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dbx1000 {

static const char* DBx1000Service_method_names[] = {
  "/dbx1000.DBx1000Service/LockRemote",
  "/dbx1000.DBx1000Service/LockInvalid",
};

std::unique_ptr< DBx1000Service::Stub> DBx1000Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DBx1000Service::Stub> stub(new DBx1000Service::Stub(channel));
  return stub;
}

DBx1000Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_LockRemote_(DBx1000Service_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LockInvalid_(DBx1000Service_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DBx1000Service::Stub::LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::dbx1000::LockRemoteReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LockRemote_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LockRemote_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::LockRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockRemoteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LockRemote_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LockRemote_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::LockRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockRemoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LockRemote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::LockRemoteReply>* DBx1000Service::Stub::AsyncLockRemoteRaw(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::LockRemoteReply>::Create(channel_.get(), cq, rpcmethod_LockRemote_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::LockRemoteReply>* DBx1000Service::Stub::PrepareAsyncLockRemoteRaw(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::LockRemoteReply>::Create(channel_.get(), cq, rpcmethod_LockRemote_, context, request, false);
}

::grpc::Status DBx1000Service::Stub::LockInvalid(::grpc::ClientContext* context, const ::dbx1000::LockInvalidRequest& request, ::dbx1000::LockInvalidReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LockInvalid_, context, request, response);
}

void DBx1000Service::Stub::experimental_async::LockInvalid(::grpc::ClientContext* context, const ::dbx1000::LockInvalidRequest* request, ::dbx1000::LockInvalidReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LockInvalid_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::LockInvalid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockInvalidReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LockInvalid_, context, request, response, std::move(f));
}

void DBx1000Service::Stub::experimental_async::LockInvalid(::grpc::ClientContext* context, const ::dbx1000::LockInvalidRequest* request, ::dbx1000::LockInvalidReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LockInvalid_, context, request, response, reactor);
}

void DBx1000Service::Stub::experimental_async::LockInvalid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockInvalidReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LockInvalid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::LockInvalidReply>* DBx1000Service::Stub::AsyncLockInvalidRaw(::grpc::ClientContext* context, const ::dbx1000::LockInvalidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::LockInvalidReply>::Create(channel_.get(), cq, rpcmethod_LockInvalid_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbx1000::LockInvalidReply>* DBx1000Service::Stub::PrepareAsyncLockInvalidRaw(::grpc::ClientContext* context, const ::dbx1000::LockInvalidRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbx1000::LockInvalidReply>::Create(channel_.get(), cq, rpcmethod_LockInvalid_, context, request, false);
}

DBx1000Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::LockRemoteRequest, ::dbx1000::LockRemoteReply>(
          std::mem_fn(&DBx1000Service::Service::LockRemote), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBx1000Service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBx1000Service::Service, ::dbx1000::LockInvalidRequest, ::dbx1000::LockInvalidReply>(
          std::mem_fn(&DBx1000Service::Service::LockInvalid), this)));
}

DBx1000Service::Service::~Service() {
}

::grpc::Status DBx1000Service::Service::LockRemote(::grpc::ServerContext* context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DBx1000Service::Service::LockInvalid(::grpc::ServerContext* context, const ::dbx1000::LockInvalidRequest* request, ::dbx1000::LockInvalidReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dbx1000

