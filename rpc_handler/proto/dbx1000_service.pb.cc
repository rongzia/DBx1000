// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbx1000_service.proto

#include "dbx1000_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace dbx1000 {
class LockRemoteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LockRemoteRequest>
      _instance;
} _LockRemoteRequest_default_instance_;
class LockRemoteReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LockRemoteReply>
      _instance;
} _LockRemoteReply_default_instance_;
class LockInvalidRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LockInvalidRequest>
      _instance;
} _LockInvalidRequest_default_instance_;
class LockInvalidReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LockInvalidReply>
      _instance;
} _LockInvalidReply_default_instance_;
}  // namespace dbx1000
namespace protobuf_dbx1000_5fservice_2eproto {
static void InitDefaultsLockRemoteRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_LockRemoteRequest_default_instance_;
    new (ptr) ::dbx1000::LockRemoteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::LockRemoteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LockRemoteRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLockRemoteRequest}, {}};

static void InitDefaultsLockRemoteReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_LockRemoteReply_default_instance_;
    new (ptr) ::dbx1000::LockRemoteReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::LockRemoteReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LockRemoteReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLockRemoteReply}, {}};

static void InitDefaultsLockInvalidRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_LockInvalidRequest_default_instance_;
    new (ptr) ::dbx1000::LockInvalidRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::LockInvalidRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LockInvalidRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLockInvalidRequest}, {}};

static void InitDefaultsLockInvalidReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dbx1000::_LockInvalidReply_default_instance_;
    new (ptr) ::dbx1000::LockInvalidReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dbx1000::LockInvalidReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LockInvalidReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLockInvalidReply}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LockRemoteRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LockRemoteReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LockInvalidRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LockInvalidReply.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockRemoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockRemoteRequest, instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockRemoteRequest, page_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockRemoteRequest, request_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockRemoteRequest, page_buf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockRemoteRequest, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockRemoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockRemoteReply, rc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockRemoteReply, page_buf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockRemoteReply, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockInvalidRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockInvalidRequest, instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockInvalidRequest, page_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockInvalidRequest, request_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockInvalidRequest, page_buf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockInvalidRequest, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockInvalidReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockInvalidReply, rc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockInvalidReply, page_buf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::dbx1000::LockInvalidReply, count_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dbx1000::LockRemoteRequest)},
  { 10, -1, sizeof(::dbx1000::LockRemoteReply)},
  { 18, -1, sizeof(::dbx1000::LockInvalidRequest)},
  { 28, -1, sizeof(::dbx1000::LockInvalidReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_LockRemoteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_LockRemoteReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_LockInvalidRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dbx1000::_LockInvalidReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "dbx1000_service.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025dbx1000_service.proto\022\007dbx1000\"\206\001\n\021Loc"
      "kRemoteRequest\022\023\n\013instance_id\030\001 \001(\005\022\017\n\007p"
      "age_id\030\002 \001(\004\022*\n\014request_mode\030\003 \001(\0162\024.dbx"
      "1000.RpcLockMode\022\020\n\010page_buf\030\004 \001(\014\022\r\n\005co"
      "unt\030\005 \001(\004\">\n\017LockRemoteReply\022\n\n\002rc\030\001 \001(\010"
      "\022\020\n\010page_buf\030\002 \001(\014\022\r\n\005count\030\003 \001(\004\"\207\001\n\022Lo"
      "ckInvalidRequest\022\023\n\013instance_id\030\001 \001(\005\022\017\n"
      "\007page_id\030\002 \001(\004\022*\n\014request_mode\030\003 \001(\0162\024.d"
      "bx1000.RpcLockMode\022\020\n\010page_buf\030\004 \001(\014\022\r\n\005"
      "count\030\005 \001(\004\"\?\n\020LockInvalidReply\022\n\n\002rc\030\001 "
      "\001(\010\022\020\n\010page_buf\030\002 \001(\014\022\r\n\005count\030\003 \001(\004*)\n\013"
      "RpcLockMode\022\005\n\001O\020\000\022\005\n\001P\020\001\022\005\n\001S\020\002\022\005\n\001X\020\0032"
      "\237\001\n\016DBx1000Service\022D\n\nLockRemote\022\032.dbx10"
      "00.LockRemoteRequest\032\030.dbx1000.LockRemot"
      "eReply\"\000\022G\n\013LockInvalid\022\033.dbx1000.LockIn"
      "validRequest\032\031.dbx1000.LockInvalidReply\""
      "\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 649);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbx1000_service.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dbx1000_5fservice_2eproto
namespace dbx1000 {
const ::google::protobuf::EnumDescriptor* RpcLockMode_descriptor() {
  protobuf_dbx1000_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbx1000_5fservice_2eproto::file_level_enum_descriptors[0];
}
bool RpcLockMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LockRemoteRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockRemoteRequest::kInstanceIdFieldNumber;
const int LockRemoteRequest::kPageIdFieldNumber;
const int LockRemoteRequest::kRequestModeFieldNumber;
const int LockRemoteRequest::kPageBufFieldNumber;
const int LockRemoteRequest::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockRemoteRequest::LockRemoteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbx1000_5fservice_2eproto::scc_info_LockRemoteRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.LockRemoteRequest)
}
LockRemoteRequest::LockRemoteRequest(const LockRemoteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_buf().size() > 0) {
    page_buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_buf_);
  }
  ::memcpy(&page_id_, &from.page_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&page_id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.LockRemoteRequest)
}

void LockRemoteRequest::SharedCtor() {
  page_buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&page_id_)) + sizeof(count_));
}

LockRemoteRequest::~LockRemoteRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.LockRemoteRequest)
  SharedDtor();
}

void LockRemoteRequest::SharedDtor() {
  page_buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockRemoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LockRemoteRequest::descriptor() {
  ::protobuf_dbx1000_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbx1000_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockRemoteRequest& LockRemoteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbx1000_5fservice_2eproto::scc_info_LockRemoteRequest.base);
  return *internal_default_instance();
}


void LockRemoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.LockRemoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&page_id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

bool LockRemoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.LockRemoteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 instance_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 page_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &page_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dbx1000.RpcLockMode request_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_request_mode(static_cast< ::dbx1000::RpcLockMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes page_buf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.LockRemoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.LockRemoteRequest)
  return false;
#undef DO_
}

void LockRemoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.LockRemoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }

  // uint64 page_id = 2;
  if (this->page_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->page_id(), output);
  }

  // .dbx1000.RpcLockMode request_mode = 3;
  if (this->request_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->request_mode(), output);
  }

  // bytes page_buf = 4;
  if (this->page_buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->page_buf(), output);
  }

  // uint64 count = 5;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.LockRemoteRequest)
}

::google::protobuf::uint8* LockRemoteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.LockRemoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }

  // uint64 page_id = 2;
  if (this->page_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->page_id(), target);
  }

  // .dbx1000.RpcLockMode request_mode = 3;
  if (this->request_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->request_mode(), target);
  }

  // bytes page_buf = 4;
  if (this->page_buf().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->page_buf(), target);
  }

  // uint64 count = 5;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.LockRemoteRequest)
  return target;
}

size_t LockRemoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.LockRemoteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes page_buf = 4;
  if (this->page_buf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->page_buf());
  }

  // uint64 page_id = 2;
  if (this->page_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->page_id());
  }

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance_id());
  }

  // .dbx1000.RpcLockMode request_mode = 3;
  if (this->request_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_mode());
  }

  // uint64 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockRemoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.LockRemoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LockRemoteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockRemoteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.LockRemoteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.LockRemoteRequest)
    MergeFrom(*source);
  }
}

void LockRemoteRequest::MergeFrom(const LockRemoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.LockRemoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_buf().size() > 0) {

    page_buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_buf_);
  }
  if (from.page_id() != 0) {
    set_page_id(from.page_id());
  }
  if (from.instance_id() != 0) {
    set_instance_id(from.instance_id());
  }
  if (from.request_mode() != 0) {
    set_request_mode(from.request_mode());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void LockRemoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.LockRemoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockRemoteRequest::CopyFrom(const LockRemoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.LockRemoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockRemoteRequest::IsInitialized() const {
  return true;
}

void LockRemoteRequest::Swap(LockRemoteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockRemoteRequest::InternalSwap(LockRemoteRequest* other) {
  using std::swap;
  page_buf_.Swap(&other->page_buf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_id_, other->page_id_);
  swap(instance_id_, other->instance_id_);
  swap(request_mode_, other->request_mode_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LockRemoteRequest::GetMetadata() const {
  protobuf_dbx1000_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbx1000_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LockRemoteReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockRemoteReply::kRcFieldNumber;
const int LockRemoteReply::kPageBufFieldNumber;
const int LockRemoteReply::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockRemoteReply::LockRemoteReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbx1000_5fservice_2eproto::scc_info_LockRemoteReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.LockRemoteReply)
}
LockRemoteReply::LockRemoteReply(const LockRemoteReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_buf().size() > 0) {
    page_buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_buf_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&rc_) -
    reinterpret_cast<char*>(&count_)) + sizeof(rc_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.LockRemoteReply)
}

void LockRemoteReply::SharedCtor() {
  page_buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_) -
      reinterpret_cast<char*>(&count_)) + sizeof(rc_));
}

LockRemoteReply::~LockRemoteReply() {
  // @@protoc_insertion_point(destructor:dbx1000.LockRemoteReply)
  SharedDtor();
}

void LockRemoteReply::SharedDtor() {
  page_buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockRemoteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LockRemoteReply::descriptor() {
  ::protobuf_dbx1000_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbx1000_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockRemoteReply& LockRemoteReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbx1000_5fservice_2eproto::scc_info_LockRemoteReply.base);
  return *internal_default_instance();
}


void LockRemoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.LockRemoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_) -
      reinterpret_cast<char*>(&count_)) + sizeof(rc_));
  _internal_metadata_.Clear();
}

bool LockRemoteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.LockRemoteReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool rc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes page_buf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.LockRemoteReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.LockRemoteReply)
  return false;
#undef DO_
}

void LockRemoteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.LockRemoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rc = 1;
  if (this->rc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->rc(), output);
  }

  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->page_buf(), output);
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.LockRemoteReply)
}

::google::protobuf::uint8* LockRemoteReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.LockRemoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rc = 1;
  if (this->rc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->rc(), target);
  }

  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->page_buf(), target);
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.LockRemoteReply)
  return target;
}

size_t LockRemoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.LockRemoteReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->page_buf());
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  // bool rc = 1;
  if (this->rc() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockRemoteReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.LockRemoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const LockRemoteReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockRemoteReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.LockRemoteReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.LockRemoteReply)
    MergeFrom(*source);
  }
}

void LockRemoteReply::MergeFrom(const LockRemoteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.LockRemoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_buf().size() > 0) {

    page_buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_buf_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.rc() != 0) {
    set_rc(from.rc());
  }
}

void LockRemoteReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.LockRemoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockRemoteReply::CopyFrom(const LockRemoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.LockRemoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockRemoteReply::IsInitialized() const {
  return true;
}

void LockRemoteReply::Swap(LockRemoteReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockRemoteReply::InternalSwap(LockRemoteReply* other) {
  using std::swap;
  page_buf_.Swap(&other->page_buf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(rc_, other->rc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LockRemoteReply::GetMetadata() const {
  protobuf_dbx1000_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbx1000_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LockInvalidRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockInvalidRequest::kInstanceIdFieldNumber;
const int LockInvalidRequest::kPageIdFieldNumber;
const int LockInvalidRequest::kRequestModeFieldNumber;
const int LockInvalidRequest::kPageBufFieldNumber;
const int LockInvalidRequest::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockInvalidRequest::LockInvalidRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbx1000_5fservice_2eproto::scc_info_LockInvalidRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.LockInvalidRequest)
}
LockInvalidRequest::LockInvalidRequest(const LockInvalidRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_buf().size() > 0) {
    page_buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_buf_);
  }
  ::memcpy(&page_id_, &from.page_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&page_id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.LockInvalidRequest)
}

void LockInvalidRequest::SharedCtor() {
  page_buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&page_id_)) + sizeof(count_));
}

LockInvalidRequest::~LockInvalidRequest() {
  // @@protoc_insertion_point(destructor:dbx1000.LockInvalidRequest)
  SharedDtor();
}

void LockInvalidRequest::SharedDtor() {
  page_buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockInvalidRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LockInvalidRequest::descriptor() {
  ::protobuf_dbx1000_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbx1000_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockInvalidRequest& LockInvalidRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbx1000_5fservice_2eproto::scc_info_LockInvalidRequest.base);
  return *internal_default_instance();
}


void LockInvalidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.LockInvalidRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&page_id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

bool LockInvalidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.LockInvalidRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 instance_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 page_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &page_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dbx1000.RpcLockMode request_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_request_mode(static_cast< ::dbx1000::RpcLockMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes page_buf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.LockInvalidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.LockInvalidRequest)
  return false;
#undef DO_
}

void LockInvalidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.LockInvalidRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }

  // uint64 page_id = 2;
  if (this->page_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->page_id(), output);
  }

  // .dbx1000.RpcLockMode request_mode = 3;
  if (this->request_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->request_mode(), output);
  }

  // bytes page_buf = 4;
  if (this->page_buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->page_buf(), output);
  }

  // uint64 count = 5;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.LockInvalidRequest)
}

::google::protobuf::uint8* LockInvalidRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.LockInvalidRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }

  // uint64 page_id = 2;
  if (this->page_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->page_id(), target);
  }

  // .dbx1000.RpcLockMode request_mode = 3;
  if (this->request_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->request_mode(), target);
  }

  // bytes page_buf = 4;
  if (this->page_buf().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->page_buf(), target);
  }

  // uint64 count = 5;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.LockInvalidRequest)
  return target;
}

size_t LockInvalidRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.LockInvalidRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes page_buf = 4;
  if (this->page_buf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->page_buf());
  }

  // uint64 page_id = 2;
  if (this->page_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->page_id());
  }

  // int32 instance_id = 1;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance_id());
  }

  // .dbx1000.RpcLockMode request_mode = 3;
  if (this->request_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_mode());
  }

  // uint64 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockInvalidRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.LockInvalidRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LockInvalidRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockInvalidRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.LockInvalidRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.LockInvalidRequest)
    MergeFrom(*source);
  }
}

void LockInvalidRequest::MergeFrom(const LockInvalidRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.LockInvalidRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_buf().size() > 0) {

    page_buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_buf_);
  }
  if (from.page_id() != 0) {
    set_page_id(from.page_id());
  }
  if (from.instance_id() != 0) {
    set_instance_id(from.instance_id());
  }
  if (from.request_mode() != 0) {
    set_request_mode(from.request_mode());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void LockInvalidRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.LockInvalidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockInvalidRequest::CopyFrom(const LockInvalidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.LockInvalidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockInvalidRequest::IsInitialized() const {
  return true;
}

void LockInvalidRequest::Swap(LockInvalidRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockInvalidRequest::InternalSwap(LockInvalidRequest* other) {
  using std::swap;
  page_buf_.Swap(&other->page_buf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_id_, other->page_id_);
  swap(instance_id_, other->instance_id_);
  swap(request_mode_, other->request_mode_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LockInvalidRequest::GetMetadata() const {
  protobuf_dbx1000_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbx1000_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LockInvalidReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockInvalidReply::kRcFieldNumber;
const int LockInvalidReply::kPageBufFieldNumber;
const int LockInvalidReply::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockInvalidReply::LockInvalidReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbx1000_5fservice_2eproto::scc_info_LockInvalidReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbx1000.LockInvalidReply)
}
LockInvalidReply::LockInvalidReply(const LockInvalidReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_buf().size() > 0) {
    page_buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_buf_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&rc_) -
    reinterpret_cast<char*>(&count_)) + sizeof(rc_));
  // @@protoc_insertion_point(copy_constructor:dbx1000.LockInvalidReply)
}

void LockInvalidReply::SharedCtor() {
  page_buf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_) -
      reinterpret_cast<char*>(&count_)) + sizeof(rc_));
}

LockInvalidReply::~LockInvalidReply() {
  // @@protoc_insertion_point(destructor:dbx1000.LockInvalidReply)
  SharedDtor();
}

void LockInvalidReply::SharedDtor() {
  page_buf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockInvalidReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LockInvalidReply::descriptor() {
  ::protobuf_dbx1000_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbx1000_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockInvalidReply& LockInvalidReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbx1000_5fservice_2eproto::scc_info_LockInvalidReply.base);
  return *internal_default_instance();
}


void LockInvalidReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dbx1000.LockInvalidReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_) -
      reinterpret_cast<char*>(&count_)) + sizeof(rc_));
  _internal_metadata_.Clear();
}

bool LockInvalidReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbx1000.LockInvalidReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool rc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes page_buf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_page_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbx1000.LockInvalidReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbx1000.LockInvalidReply)
  return false;
#undef DO_
}

void LockInvalidReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbx1000.LockInvalidReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rc = 1;
  if (this->rc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->rc(), output);
  }

  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->page_buf(), output);
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dbx1000.LockInvalidReply)
}

::google::protobuf::uint8* LockInvalidReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dbx1000.LockInvalidReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rc = 1;
  if (this->rc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->rc(), target);
  }

  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->page_buf(), target);
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbx1000.LockInvalidReply)
  return target;
}

size_t LockInvalidReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dbx1000.LockInvalidReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes page_buf = 2;
  if (this->page_buf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->page_buf());
  }

  // uint64 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  // bool rc = 1;
  if (this->rc() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockInvalidReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dbx1000.LockInvalidReply)
  GOOGLE_DCHECK_NE(&from, this);
  const LockInvalidReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockInvalidReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dbx1000.LockInvalidReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dbx1000.LockInvalidReply)
    MergeFrom(*source);
  }
}

void LockInvalidReply::MergeFrom(const LockInvalidReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dbx1000.LockInvalidReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_buf().size() > 0) {

    page_buf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_buf_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.rc() != 0) {
    set_rc(from.rc());
  }
}

void LockInvalidReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dbx1000.LockInvalidReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockInvalidReply::CopyFrom(const LockInvalidReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dbx1000.LockInvalidReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockInvalidReply::IsInitialized() const {
  return true;
}

void LockInvalidReply::Swap(LockInvalidReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockInvalidReply::InternalSwap(LockInvalidReply* other) {
  using std::swap;
  page_buf_.Swap(&other->page_buf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(rc_, other->rc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LockInvalidReply::GetMetadata() const {
  protobuf_dbx1000_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbx1000_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dbx1000
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::LockRemoteRequest* Arena::CreateMaybeMessage< ::dbx1000::LockRemoteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::LockRemoteRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::LockRemoteReply* Arena::CreateMaybeMessage< ::dbx1000::LockRemoteReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::LockRemoteReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::LockInvalidRequest* Arena::CreateMaybeMessage< ::dbx1000::LockInvalidRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::LockInvalidRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::dbx1000::LockInvalidReply* Arena::CreateMaybeMessage< ::dbx1000::LockInvalidReply >(Arena* arena) {
  return Arena::CreateInternal< ::dbx1000::LockInvalidReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
