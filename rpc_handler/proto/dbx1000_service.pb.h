// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbx1000_service.proto

#ifndef PROTOBUF_INCLUDED_dbx1000_5fservice_2eproto
#define PROTOBUF_INCLUDED_dbx1000_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_dbx1000_5fservice_2eproto 

namespace protobuf_dbx1000_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_dbx1000_5fservice_2eproto
namespace dbx1000 {
class LockInvalidReply;
class LockInvalidReplyDefaultTypeInternal;
extern LockInvalidReplyDefaultTypeInternal _LockInvalidReply_default_instance_;
class LockInvalidRequest;
class LockInvalidRequestDefaultTypeInternal;
extern LockInvalidRequestDefaultTypeInternal _LockInvalidRequest_default_instance_;
class LockRemoteReply;
class LockRemoteReplyDefaultTypeInternal;
extern LockRemoteReplyDefaultTypeInternal _LockRemoteReply_default_instance_;
class LockRemoteRequest;
class LockRemoteRequestDefaultTypeInternal;
extern LockRemoteRequestDefaultTypeInternal _LockRemoteRequest_default_instance_;
}  // namespace dbx1000
namespace google {
namespace protobuf {
template<> ::dbx1000::LockInvalidReply* Arena::CreateMaybeMessage<::dbx1000::LockInvalidReply>(Arena*);
template<> ::dbx1000::LockInvalidRequest* Arena::CreateMaybeMessage<::dbx1000::LockInvalidRequest>(Arena*);
template<> ::dbx1000::LockRemoteReply* Arena::CreateMaybeMessage<::dbx1000::LockRemoteReply>(Arena*);
template<> ::dbx1000::LockRemoteRequest* Arena::CreateMaybeMessage<::dbx1000::LockRemoteRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dbx1000 {

enum RpcLockMode {
  O = 0,
  P = 1,
  S = 2,
  X = 3,
  RpcLockMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RpcLockMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RpcLockMode_IsValid(int value);
const RpcLockMode RpcLockMode_MIN = O;
const RpcLockMode RpcLockMode_MAX = X;
const int RpcLockMode_ARRAYSIZE = RpcLockMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcLockMode_descriptor();
inline const ::std::string& RpcLockMode_Name(RpcLockMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcLockMode_descriptor(), value);
}
inline bool RpcLockMode_Parse(
    const ::std::string& name, RpcLockMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcLockMode>(
    RpcLockMode_descriptor(), name, value);
}
// ===================================================================

class LockRemoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.LockRemoteRequest) */ {
 public:
  LockRemoteRequest();
  virtual ~LockRemoteRequest();

  LockRemoteRequest(const LockRemoteRequest& from);

  inline LockRemoteRequest& operator=(const LockRemoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockRemoteRequest(LockRemoteRequest&& from) noexcept
    : LockRemoteRequest() {
    *this = ::std::move(from);
  }

  inline LockRemoteRequest& operator=(LockRemoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LockRemoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockRemoteRequest* internal_default_instance() {
    return reinterpret_cast<const LockRemoteRequest*>(
               &_LockRemoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LockRemoteRequest* other);
  friend void swap(LockRemoteRequest& a, LockRemoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockRemoteRequest* New() const final {
    return CreateMaybeMessage<LockRemoteRequest>(NULL);
  }

  LockRemoteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LockRemoteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LockRemoteRequest& from);
  void MergeFrom(const LockRemoteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRemoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes page_buf = 4;
  void clear_page_buf();
  static const int kPageBufFieldNumber = 4;
  const ::std::string& page_buf() const;
  void set_page_buf(const ::std::string& value);
  #if LANG_CXX11
  void set_page_buf(::std::string&& value);
  #endif
  void set_page_buf(const char* value);
  void set_page_buf(const void* value, size_t size);
  ::std::string* mutable_page_buf();
  ::std::string* release_page_buf();
  void set_allocated_page_buf(::std::string* page_buf);

  // uint64 page_id = 2;
  void clear_page_id();
  static const int kPageIdFieldNumber = 2;
  ::google::protobuf::uint64 page_id() const;
  void set_page_id(::google::protobuf::uint64 value);

  // int32 instance_id = 1;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  ::google::protobuf::int32 instance_id() const;
  void set_instance_id(::google::protobuf::int32 value);

  // .dbx1000.RpcLockMode request_mode = 3;
  void clear_request_mode();
  static const int kRequestModeFieldNumber = 3;
  ::dbx1000::RpcLockMode request_mode() const;
  void set_request_mode(::dbx1000::RpcLockMode value);

  // uint64 count = 5;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.LockRemoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_buf_;
  ::google::protobuf::uint64 page_id_;
  ::google::protobuf::int32 instance_id_;
  int request_mode_;
  ::google::protobuf::uint64 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LockRemoteReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.LockRemoteReply) */ {
 public:
  LockRemoteReply();
  virtual ~LockRemoteReply();

  LockRemoteReply(const LockRemoteReply& from);

  inline LockRemoteReply& operator=(const LockRemoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockRemoteReply(LockRemoteReply&& from) noexcept
    : LockRemoteReply() {
    *this = ::std::move(from);
  }

  inline LockRemoteReply& operator=(LockRemoteReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LockRemoteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockRemoteReply* internal_default_instance() {
    return reinterpret_cast<const LockRemoteReply*>(
               &_LockRemoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LockRemoteReply* other);
  friend void swap(LockRemoteReply& a, LockRemoteReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockRemoteReply* New() const final {
    return CreateMaybeMessage<LockRemoteReply>(NULL);
  }

  LockRemoteReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LockRemoteReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LockRemoteReply& from);
  void MergeFrom(const LockRemoteReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRemoteReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes page_buf = 2;
  void clear_page_buf();
  static const int kPageBufFieldNumber = 2;
  const ::std::string& page_buf() const;
  void set_page_buf(const ::std::string& value);
  #if LANG_CXX11
  void set_page_buf(::std::string&& value);
  #endif
  void set_page_buf(const char* value);
  void set_page_buf(const void* value, size_t size);
  ::std::string* mutable_page_buf();
  ::std::string* release_page_buf();
  void set_allocated_page_buf(::std::string* page_buf);

  // uint64 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // bool rc = 1;
  void clear_rc();
  static const int kRcFieldNumber = 1;
  bool rc() const;
  void set_rc(bool value);

  // @@protoc_insertion_point(class_scope:dbx1000.LockRemoteReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_buf_;
  ::google::protobuf::uint64 count_;
  bool rc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LockInvalidRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.LockInvalidRequest) */ {
 public:
  LockInvalidRequest();
  virtual ~LockInvalidRequest();

  LockInvalidRequest(const LockInvalidRequest& from);

  inline LockInvalidRequest& operator=(const LockInvalidRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockInvalidRequest(LockInvalidRequest&& from) noexcept
    : LockInvalidRequest() {
    *this = ::std::move(from);
  }

  inline LockInvalidRequest& operator=(LockInvalidRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LockInvalidRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockInvalidRequest* internal_default_instance() {
    return reinterpret_cast<const LockInvalidRequest*>(
               &_LockInvalidRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LockInvalidRequest* other);
  friend void swap(LockInvalidRequest& a, LockInvalidRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockInvalidRequest* New() const final {
    return CreateMaybeMessage<LockInvalidRequest>(NULL);
  }

  LockInvalidRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LockInvalidRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LockInvalidRequest& from);
  void MergeFrom(const LockInvalidRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockInvalidRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes page_buf = 4;
  void clear_page_buf();
  static const int kPageBufFieldNumber = 4;
  const ::std::string& page_buf() const;
  void set_page_buf(const ::std::string& value);
  #if LANG_CXX11
  void set_page_buf(::std::string&& value);
  #endif
  void set_page_buf(const char* value);
  void set_page_buf(const void* value, size_t size);
  ::std::string* mutable_page_buf();
  ::std::string* release_page_buf();
  void set_allocated_page_buf(::std::string* page_buf);

  // uint64 page_id = 2;
  void clear_page_id();
  static const int kPageIdFieldNumber = 2;
  ::google::protobuf::uint64 page_id() const;
  void set_page_id(::google::protobuf::uint64 value);

  // int32 instance_id = 1;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  ::google::protobuf::int32 instance_id() const;
  void set_instance_id(::google::protobuf::int32 value);

  // .dbx1000.RpcLockMode request_mode = 3;
  void clear_request_mode();
  static const int kRequestModeFieldNumber = 3;
  ::dbx1000::RpcLockMode request_mode() const;
  void set_request_mode(::dbx1000::RpcLockMode value);

  // uint64 count = 5;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.LockInvalidRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_buf_;
  ::google::protobuf::uint64 page_id_;
  ::google::protobuf::int32 instance_id_;
  int request_mode_;
  ::google::protobuf::uint64 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LockInvalidReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.LockInvalidReply) */ {
 public:
  LockInvalidReply();
  virtual ~LockInvalidReply();

  LockInvalidReply(const LockInvalidReply& from);

  inline LockInvalidReply& operator=(const LockInvalidReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockInvalidReply(LockInvalidReply&& from) noexcept
    : LockInvalidReply() {
    *this = ::std::move(from);
  }

  inline LockInvalidReply& operator=(LockInvalidReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LockInvalidReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockInvalidReply* internal_default_instance() {
    return reinterpret_cast<const LockInvalidReply*>(
               &_LockInvalidReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LockInvalidReply* other);
  friend void swap(LockInvalidReply& a, LockInvalidReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockInvalidReply* New() const final {
    return CreateMaybeMessage<LockInvalidReply>(NULL);
  }

  LockInvalidReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LockInvalidReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LockInvalidReply& from);
  void MergeFrom(const LockInvalidReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockInvalidReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes page_buf = 2;
  void clear_page_buf();
  static const int kPageBufFieldNumber = 2;
  const ::std::string& page_buf() const;
  void set_page_buf(const ::std::string& value);
  #if LANG_CXX11
  void set_page_buf(::std::string&& value);
  #endif
  void set_page_buf(const char* value);
  void set_page_buf(const void* value, size_t size);
  ::std::string* mutable_page_buf();
  ::std::string* release_page_buf();
  void set_allocated_page_buf(::std::string* page_buf);

  // uint64 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // bool rc = 1;
  void clear_rc();
  static const int kRcFieldNumber = 1;
  bool rc() const;
  void set_rc(bool value);

  // @@protoc_insertion_point(class_scope:dbx1000.LockInvalidReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_buf_;
  ::google::protobuf::uint64 count_;
  bool rc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LockRemoteRequest

// int32 instance_id = 1;
inline void LockRemoteRequest::clear_instance_id() {
  instance_id_ = 0;
}
inline ::google::protobuf::int32 LockRemoteRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteRequest.instance_id)
  return instance_id_;
}
inline void LockRemoteRequest::set_instance_id(::google::protobuf::int32 value) {
  
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteRequest.instance_id)
}

// uint64 page_id = 2;
inline void LockRemoteRequest::clear_page_id() {
  page_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LockRemoteRequest::page_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteRequest.page_id)
  return page_id_;
}
inline void LockRemoteRequest::set_page_id(::google::protobuf::uint64 value) {
  
  page_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteRequest.page_id)
}

// .dbx1000.RpcLockMode request_mode = 3;
inline void LockRemoteRequest::clear_request_mode() {
  request_mode_ = 0;
}
inline ::dbx1000::RpcLockMode LockRemoteRequest::request_mode() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteRequest.request_mode)
  return static_cast< ::dbx1000::RpcLockMode >(request_mode_);
}
inline void LockRemoteRequest::set_request_mode(::dbx1000::RpcLockMode value) {
  
  request_mode_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteRequest.request_mode)
}

// bytes page_buf = 4;
inline void LockRemoteRequest::clear_page_buf() {
  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockRemoteRequest::page_buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteRequest.page_buf)
  return page_buf_.GetNoArena();
}
inline void LockRemoteRequest::set_page_buf(const ::std::string& value) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteRequest.page_buf)
}
#if LANG_CXX11
inline void LockRemoteRequest::set_page_buf(::std::string&& value) {
  
  page_buf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.LockRemoteRequest.page_buf)
}
#endif
inline void LockRemoteRequest::set_page_buf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.LockRemoteRequest.page_buf)
}
inline void LockRemoteRequest::set_page_buf(const void* value, size_t size) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.LockRemoteRequest.page_buf)
}
inline ::std::string* LockRemoteRequest::mutable_page_buf() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.LockRemoteRequest.page_buf)
  return page_buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRemoteRequest::release_page_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.LockRemoteRequest.page_buf)
  
  return page_buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRemoteRequest::set_allocated_page_buf(::std::string* page_buf) {
  if (page_buf != NULL) {
    
  } else {
    
  }
  page_buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_buf);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.LockRemoteRequest.page_buf)
}

// uint64 count = 5;
inline void LockRemoteRequest::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LockRemoteRequest::count() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteRequest.count)
  return count_;
}
inline void LockRemoteRequest::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteRequest.count)
}

// -------------------------------------------------------------------

// LockRemoteReply

// bool rc = 1;
inline void LockRemoteReply::clear_rc() {
  rc_ = false;
}
inline bool LockRemoteReply::rc() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteReply.rc)
  return rc_;
}
inline void LockRemoteReply::set_rc(bool value) {
  
  rc_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteReply.rc)
}

// bytes page_buf = 2;
inline void LockRemoteReply::clear_page_buf() {
  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockRemoteReply::page_buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteReply.page_buf)
  return page_buf_.GetNoArena();
}
inline void LockRemoteReply::set_page_buf(const ::std::string& value) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteReply.page_buf)
}
#if LANG_CXX11
inline void LockRemoteReply::set_page_buf(::std::string&& value) {
  
  page_buf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.LockRemoteReply.page_buf)
}
#endif
inline void LockRemoteReply::set_page_buf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.LockRemoteReply.page_buf)
}
inline void LockRemoteReply::set_page_buf(const void* value, size_t size) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.LockRemoteReply.page_buf)
}
inline ::std::string* LockRemoteReply::mutable_page_buf() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.LockRemoteReply.page_buf)
  return page_buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRemoteReply::release_page_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.LockRemoteReply.page_buf)
  
  return page_buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRemoteReply::set_allocated_page_buf(::std::string* page_buf) {
  if (page_buf != NULL) {
    
  } else {
    
  }
  page_buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_buf);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.LockRemoteReply.page_buf)
}

// uint64 count = 3;
inline void LockRemoteReply::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LockRemoteReply::count() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteReply.count)
  return count_;
}
inline void LockRemoteReply::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteReply.count)
}

// -------------------------------------------------------------------

// LockInvalidRequest

// int32 instance_id = 1;
inline void LockInvalidRequest::clear_instance_id() {
  instance_id_ = 0;
}
inline ::google::protobuf::int32 LockInvalidRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockInvalidRequest.instance_id)
  return instance_id_;
}
inline void LockInvalidRequest::set_instance_id(::google::protobuf::int32 value) {
  
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockInvalidRequest.instance_id)
}

// uint64 page_id = 2;
inline void LockInvalidRequest::clear_page_id() {
  page_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LockInvalidRequest::page_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockInvalidRequest.page_id)
  return page_id_;
}
inline void LockInvalidRequest::set_page_id(::google::protobuf::uint64 value) {
  
  page_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockInvalidRequest.page_id)
}

// .dbx1000.RpcLockMode request_mode = 3;
inline void LockInvalidRequest::clear_request_mode() {
  request_mode_ = 0;
}
inline ::dbx1000::RpcLockMode LockInvalidRequest::request_mode() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockInvalidRequest.request_mode)
  return static_cast< ::dbx1000::RpcLockMode >(request_mode_);
}
inline void LockInvalidRequest::set_request_mode(::dbx1000::RpcLockMode value) {
  
  request_mode_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockInvalidRequest.request_mode)
}

// bytes page_buf = 4;
inline void LockInvalidRequest::clear_page_buf() {
  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockInvalidRequest::page_buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockInvalidRequest.page_buf)
  return page_buf_.GetNoArena();
}
inline void LockInvalidRequest::set_page_buf(const ::std::string& value) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.LockInvalidRequest.page_buf)
}
#if LANG_CXX11
inline void LockInvalidRequest::set_page_buf(::std::string&& value) {
  
  page_buf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.LockInvalidRequest.page_buf)
}
#endif
inline void LockInvalidRequest::set_page_buf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.LockInvalidRequest.page_buf)
}
inline void LockInvalidRequest::set_page_buf(const void* value, size_t size) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.LockInvalidRequest.page_buf)
}
inline ::std::string* LockInvalidRequest::mutable_page_buf() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.LockInvalidRequest.page_buf)
  return page_buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockInvalidRequest::release_page_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.LockInvalidRequest.page_buf)
  
  return page_buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockInvalidRequest::set_allocated_page_buf(::std::string* page_buf) {
  if (page_buf != NULL) {
    
  } else {
    
  }
  page_buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_buf);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.LockInvalidRequest.page_buf)
}

// uint64 count = 5;
inline void LockInvalidRequest::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LockInvalidRequest::count() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockInvalidRequest.count)
  return count_;
}
inline void LockInvalidRequest::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockInvalidRequest.count)
}

// -------------------------------------------------------------------

// LockInvalidReply

// bool rc = 1;
inline void LockInvalidReply::clear_rc() {
  rc_ = false;
}
inline bool LockInvalidReply::rc() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockInvalidReply.rc)
  return rc_;
}
inline void LockInvalidReply::set_rc(bool value) {
  
  rc_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockInvalidReply.rc)
}

// bytes page_buf = 2;
inline void LockInvalidReply::clear_page_buf() {
  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockInvalidReply::page_buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockInvalidReply.page_buf)
  return page_buf_.GetNoArena();
}
inline void LockInvalidReply::set_page_buf(const ::std::string& value) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.LockInvalidReply.page_buf)
}
#if LANG_CXX11
inline void LockInvalidReply::set_page_buf(::std::string&& value) {
  
  page_buf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.LockInvalidReply.page_buf)
}
#endif
inline void LockInvalidReply::set_page_buf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.LockInvalidReply.page_buf)
}
inline void LockInvalidReply::set_page_buf(const void* value, size_t size) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.LockInvalidReply.page_buf)
}
inline ::std::string* LockInvalidReply::mutable_page_buf() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.LockInvalidReply.page_buf)
  return page_buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockInvalidReply::release_page_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.LockInvalidReply.page_buf)
  
  return page_buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockInvalidReply::set_allocated_page_buf(::std::string* page_buf) {
  if (page_buf != NULL) {
    
  } else {
    
  }
  page_buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_buf);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.LockInvalidReply.page_buf)
}

// uint64 count = 3;
inline void LockInvalidReply::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LockInvalidReply::count() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockInvalidReply.count)
  return count_;
}
inline void LockInvalidReply::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockInvalidReply.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbx1000

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dbx1000::RpcLockMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dbx1000::RpcLockMode>() {
  return ::dbx1000::RpcLockMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_dbx1000_5fservice_2eproto
