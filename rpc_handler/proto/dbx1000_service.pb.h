// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbx1000_service.proto

#ifndef PROTOBUF_INCLUDED_dbx1000_5fservice_2eproto
#define PROTOBUF_INCLUDED_dbx1000_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_dbx1000_5fservice_2eproto 

namespace protobuf_dbx1000_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_dbx1000_5fservice_2eproto
namespace dbx1000 {
class BufferManagerInitDonReply;
class BufferManagerInitDonReplyDefaultTypeInternal;
extern BufferManagerInitDonReplyDefaultTypeInternal _BufferManagerInitDonReply_default_instance_;
class BufferManagerInitDoneRequest;
class BufferManagerInitDoneRequestDefaultTypeInternal;
extern BufferManagerInitDoneRequestDefaultTypeInternal _BufferManagerInitDoneRequest_default_instance_;
class GetNextTsReply;
class GetNextTsReplyDefaultTypeInternal;
extern GetNextTsReplyDefaultTypeInternal _GetNextTsReply_default_instance_;
class GetNextTsRequest;
class GetNextTsRequestDefaultTypeInternal;
extern GetNextTsRequestDefaultTypeInternal _GetNextTsRequest_default_instance_;
class GetTestNumReply;
class GetTestNumReplyDefaultTypeInternal;
extern GetTestNumReplyDefaultTypeInternal _GetTestNumReply_default_instance_;
class GetTestNumRequest;
class GetTestNumRequestDefaultTypeInternal;
extern GetTestNumRequestDefaultTypeInternal _GetTestNumRequest_default_instance_;
class InstanceInitDoneReply;
class InstanceInitDoneReplyDefaultTypeInternal;
extern InstanceInitDoneReplyDefaultTypeInternal _InstanceInitDoneReply_default_instance_;
class InstanceInitDoneRequest;
class InstanceInitDoneRequestDefaultTypeInternal;
extern InstanceInitDoneRequestDefaultTypeInternal _InstanceInitDoneRequest_default_instance_;
class LockRemoteReply;
class LockRemoteReplyDefaultTypeInternal;
extern LockRemoteReplyDefaultTypeInternal _LockRemoteReply_default_instance_;
class LockRemoteRequest;
class LockRemoteRequestDefaultTypeInternal;
extern LockRemoteRequestDefaultTypeInternal _LockRemoteRequest_default_instance_;
class UnLockRemoteReply;
class UnLockRemoteReplyDefaultTypeInternal;
extern UnLockRemoteReplyDefaultTypeInternal _UnLockRemoteReply_default_instance_;
class UnLockRemoteRequest;
class UnLockRemoteRequestDefaultTypeInternal;
extern UnLockRemoteRequestDefaultTypeInternal _UnLockRemoteRequest_default_instance_;
}  // namespace dbx1000
namespace google {
namespace protobuf {
template<> ::dbx1000::BufferManagerInitDonReply* Arena::CreateMaybeMessage<::dbx1000::BufferManagerInitDonReply>(Arena*);
template<> ::dbx1000::BufferManagerInitDoneRequest* Arena::CreateMaybeMessage<::dbx1000::BufferManagerInitDoneRequest>(Arena*);
template<> ::dbx1000::GetNextTsReply* Arena::CreateMaybeMessage<::dbx1000::GetNextTsReply>(Arena*);
template<> ::dbx1000::GetNextTsRequest* Arena::CreateMaybeMessage<::dbx1000::GetNextTsRequest>(Arena*);
template<> ::dbx1000::GetTestNumReply* Arena::CreateMaybeMessage<::dbx1000::GetTestNumReply>(Arena*);
template<> ::dbx1000::GetTestNumRequest* Arena::CreateMaybeMessage<::dbx1000::GetTestNumRequest>(Arena*);
template<> ::dbx1000::InstanceInitDoneReply* Arena::CreateMaybeMessage<::dbx1000::InstanceInitDoneReply>(Arena*);
template<> ::dbx1000::InstanceInitDoneRequest* Arena::CreateMaybeMessage<::dbx1000::InstanceInitDoneRequest>(Arena*);
template<> ::dbx1000::LockRemoteReply* Arena::CreateMaybeMessage<::dbx1000::LockRemoteReply>(Arena*);
template<> ::dbx1000::LockRemoteRequest* Arena::CreateMaybeMessage<::dbx1000::LockRemoteRequest>(Arena*);
template<> ::dbx1000::UnLockRemoteReply* Arena::CreateMaybeMessage<::dbx1000::UnLockRemoteReply>(Arena*);
template<> ::dbx1000::UnLockRemoteRequest* Arena::CreateMaybeMessage<::dbx1000::UnLockRemoteRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dbx1000 {

enum RpcLockMode {
  O = 0,
  P = 1,
  S = 2,
  X = 3,
  RpcLockMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RpcLockMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RpcLockMode_IsValid(int value);
const RpcLockMode RpcLockMode_MIN = O;
const RpcLockMode RpcLockMode_MAX = X;
const int RpcLockMode_ARRAYSIZE = RpcLockMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcLockMode_descriptor();
inline const ::std::string& RpcLockMode_Name(RpcLockMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcLockMode_descriptor(), value);
}
inline bool RpcLockMode_Parse(
    const ::std::string& name, RpcLockMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcLockMode>(
    RpcLockMode_descriptor(), name, value);
}
// ===================================================================

class LockRemoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.LockRemoteRequest) */ {
 public:
  LockRemoteRequest();
  virtual ~LockRemoteRequest();

  LockRemoteRequest(const LockRemoteRequest& from);

  inline LockRemoteRequest& operator=(const LockRemoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockRemoteRequest(LockRemoteRequest&& from) noexcept
    : LockRemoteRequest() {
    *this = ::std::move(from);
  }

  inline LockRemoteRequest& operator=(LockRemoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LockRemoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockRemoteRequest* internal_default_instance() {
    return reinterpret_cast<const LockRemoteRequest*>(
               &_LockRemoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LockRemoteRequest* other);
  friend void swap(LockRemoteRequest& a, LockRemoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockRemoteRequest* New() const final {
    return CreateMaybeMessage<LockRemoteRequest>(NULL);
  }

  LockRemoteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LockRemoteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LockRemoteRequest& from);
  void MergeFrom(const LockRemoteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRemoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes page_buf = 7;
  void clear_page_buf();
  static const int kPageBufFieldNumber = 7;
  const ::std::string& page_buf() const;
  void set_page_buf(const ::std::string& value);
  #if LANG_CXX11
  void set_page_buf(::std::string&& value);
  #endif
  void set_page_buf(const char* value);
  void set_page_buf(const void* value, size_t size);
  ::std::string* mutable_page_buf();
  ::std::string* release_page_buf();
  void set_allocated_page_buf(::std::string* page_buf);

  // int32 instance_id = 1;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  ::google::protobuf::int32 instance_id() const;
  void set_instance_id(::google::protobuf::int32 value);

  // .dbx1000.RpcLockMode req_mode = 2;
  void clear_req_mode();
  static const int kReqModeFieldNumber = 2;
  ::dbx1000::RpcLockMode req_mode() const;
  void set_req_mode(::dbx1000::RpcLockMode value);

  // uint64 page_id = 3;
  void clear_page_id();
  static const int kPageIdFieldNumber = 3;
  ::google::protobuf::uint64 page_id() const;
  void set_page_id(::google::protobuf::uint64 value);

  // uint64 page_version = 4;
  void clear_page_version();
  static const int kPageVersionFieldNumber = 4;
  ::google::protobuf::uint64 page_version() const;
  void set_page_version(::google::protobuf::uint64 value);

  // uint64 key = 5;
  void clear_key();
  static const int kKeyFieldNumber = 5;
  ::google::protobuf::uint64 key() const;
  void set_key(::google::protobuf::uint64 value);

  // uint64 key_version = 6;
  void clear_key_version();
  static const int kKeyVersionFieldNumber = 6;
  ::google::protobuf::uint64 key_version() const;
  void set_key_version(::google::protobuf::uint64 value);

  // uint64 count = 8;
  void clear_count();
  static const int kCountFieldNumber = 8;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.LockRemoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_buf_;
  ::google::protobuf::int32 instance_id_;
  int req_mode_;
  ::google::protobuf::uint64 page_id_;
  ::google::protobuf::uint64 page_version_;
  ::google::protobuf::uint64 key_;
  ::google::protobuf::uint64 key_version_;
  ::google::protobuf::uint64 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LockRemoteReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.LockRemoteReply) */ {
 public:
  LockRemoteReply();
  virtual ~LockRemoteReply();

  LockRemoteReply(const LockRemoteReply& from);

  inline LockRemoteReply& operator=(const LockRemoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockRemoteReply(LockRemoteReply&& from) noexcept
    : LockRemoteReply() {
    *this = ::std::move(from);
  }

  inline LockRemoteReply& operator=(LockRemoteReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LockRemoteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockRemoteReply* internal_default_instance() {
    return reinterpret_cast<const LockRemoteReply*>(
               &_LockRemoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LockRemoteReply* other);
  friend void swap(LockRemoteReply& a, LockRemoteReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockRemoteReply* New() const final {
    return CreateMaybeMessage<LockRemoteReply>(NULL);
  }

  LockRemoteReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LockRemoteReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LockRemoteReply& from);
  void MergeFrom(const LockRemoteReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRemoteReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes page_buf = 2;
  void clear_page_buf();
  static const int kPageBufFieldNumber = 2;
  const ::std::string& page_buf() const;
  void set_page_buf(const ::std::string& value);
  #if LANG_CXX11
  void set_page_buf(::std::string&& value);
  #endif
  void set_page_buf(const char* value);
  void set_page_buf(const void* value, size_t size);
  ::std::string* mutable_page_buf();
  ::std::string* release_page_buf();
  void set_allocated_page_buf(::std::string* page_buf);

  // uint64 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // bool rc = 1;
  void clear_rc();
  static const int kRcFieldNumber = 1;
  bool rc() const;
  void set_rc(bool value);

  // @@protoc_insertion_point(class_scope:dbx1000.LockRemoteReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_buf_;
  ::google::protobuf::uint64 count_;
  bool rc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnLockRemoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.UnLockRemoteRequest) */ {
 public:
  UnLockRemoteRequest();
  virtual ~UnLockRemoteRequest();

  UnLockRemoteRequest(const UnLockRemoteRequest& from);

  inline UnLockRemoteRequest& operator=(const UnLockRemoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnLockRemoteRequest(UnLockRemoteRequest&& from) noexcept
    : UnLockRemoteRequest() {
    *this = ::std::move(from);
  }

  inline UnLockRemoteRequest& operator=(UnLockRemoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnLockRemoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnLockRemoteRequest* internal_default_instance() {
    return reinterpret_cast<const UnLockRemoteRequest*>(
               &_UnLockRemoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UnLockRemoteRequest* other);
  friend void swap(UnLockRemoteRequest& a, UnLockRemoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnLockRemoteRequest* New() const final {
    return CreateMaybeMessage<UnLockRemoteRequest>(NULL);
  }

  UnLockRemoteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnLockRemoteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnLockRemoteRequest& from);
  void MergeFrom(const UnLockRemoteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnLockRemoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes page_buf = 7;
  void clear_page_buf();
  static const int kPageBufFieldNumber = 7;
  const ::std::string& page_buf() const;
  void set_page_buf(const ::std::string& value);
  #if LANG_CXX11
  void set_page_buf(::std::string&& value);
  #endif
  void set_page_buf(const char* value);
  void set_page_buf(const void* value, size_t size);
  ::std::string* mutable_page_buf();
  ::std::string* release_page_buf();
  void set_allocated_page_buf(::std::string* page_buf);

  // int32 instance_id = 1;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  ::google::protobuf::int32 instance_id() const;
  void set_instance_id(::google::protobuf::int32 value);

  // .dbx1000.RpcLockMode req_mode = 2;
  void clear_req_mode();
  static const int kReqModeFieldNumber = 2;
  ::dbx1000::RpcLockMode req_mode() const;
  void set_req_mode(::dbx1000::RpcLockMode value);

  // uint64 page_id = 3;
  void clear_page_id();
  static const int kPageIdFieldNumber = 3;
  ::google::protobuf::uint64 page_id() const;
  void set_page_id(::google::protobuf::uint64 value);

  // uint64 page_version = 4;
  void clear_page_version();
  static const int kPageVersionFieldNumber = 4;
  ::google::protobuf::uint64 page_version() const;
  void set_page_version(::google::protobuf::uint64 value);

  // uint64 key = 5;
  void clear_key();
  static const int kKeyFieldNumber = 5;
  ::google::protobuf::uint64 key() const;
  void set_key(::google::protobuf::uint64 value);

  // uint64 key_version = 6;
  void clear_key_version();
  static const int kKeyVersionFieldNumber = 6;
  ::google::protobuf::uint64 key_version() const;
  void set_key_version(::google::protobuf::uint64 value);

  // uint64 count = 8;
  void clear_count();
  static const int kCountFieldNumber = 8;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.UnLockRemoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_buf_;
  ::google::protobuf::int32 instance_id_;
  int req_mode_;
  ::google::protobuf::uint64 page_id_;
  ::google::protobuf::uint64 page_version_;
  ::google::protobuf::uint64 key_;
  ::google::protobuf::uint64 key_version_;
  ::google::protobuf::uint64 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnLockRemoteReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.UnLockRemoteReply) */ {
 public:
  UnLockRemoteReply();
  virtual ~UnLockRemoteReply();

  UnLockRemoteReply(const UnLockRemoteReply& from);

  inline UnLockRemoteReply& operator=(const UnLockRemoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnLockRemoteReply(UnLockRemoteReply&& from) noexcept
    : UnLockRemoteReply() {
    *this = ::std::move(from);
  }

  inline UnLockRemoteReply& operator=(UnLockRemoteReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnLockRemoteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnLockRemoteReply* internal_default_instance() {
    return reinterpret_cast<const UnLockRemoteReply*>(
               &_UnLockRemoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UnLockRemoteReply* other);
  friend void swap(UnLockRemoteReply& a, UnLockRemoteReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnLockRemoteReply* New() const final {
    return CreateMaybeMessage<UnLockRemoteReply>(NULL);
  }

  UnLockRemoteReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnLockRemoteReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnLockRemoteReply& from);
  void MergeFrom(const UnLockRemoteReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnLockRemoteReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes page_buf = 2;
  void clear_page_buf();
  static const int kPageBufFieldNumber = 2;
  const ::std::string& page_buf() const;
  void set_page_buf(const ::std::string& value);
  #if LANG_CXX11
  void set_page_buf(::std::string&& value);
  #endif
  void set_page_buf(const char* value);
  void set_page_buf(const void* value, size_t size);
  ::std::string* mutable_page_buf();
  ::std::string* release_page_buf();
  void set_allocated_page_buf(::std::string* page_buf);

  // uint64 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // bool rc = 1;
  void clear_rc();
  static const int kRcFieldNumber = 1;
  bool rc() const;
  void set_rc(bool value);

  // @@protoc_insertion_point(class_scope:dbx1000.UnLockRemoteReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_buf_;
  ::google::protobuf::uint64 count_;
  bool rc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InstanceInitDoneRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.InstanceInitDoneRequest) */ {
 public:
  InstanceInitDoneRequest();
  virtual ~InstanceInitDoneRequest();

  InstanceInitDoneRequest(const InstanceInitDoneRequest& from);

  inline InstanceInitDoneRequest& operator=(const InstanceInitDoneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstanceInitDoneRequest(InstanceInitDoneRequest&& from) noexcept
    : InstanceInitDoneRequest() {
    *this = ::std::move(from);
  }

  inline InstanceInitDoneRequest& operator=(InstanceInitDoneRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceInitDoneRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstanceInitDoneRequest* internal_default_instance() {
    return reinterpret_cast<const InstanceInitDoneRequest*>(
               &_InstanceInitDoneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(InstanceInitDoneRequest* other);
  friend void swap(InstanceInitDoneRequest& a, InstanceInitDoneRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstanceInitDoneRequest* New() const final {
    return CreateMaybeMessage<InstanceInitDoneRequest>(NULL);
  }

  InstanceInitDoneRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InstanceInitDoneRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InstanceInitDoneRequest& from);
  void MergeFrom(const InstanceInitDoneRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstanceInitDoneRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 instance_id = 1;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  ::google::protobuf::int32 instance_id() const;
  void set_instance_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dbx1000.InstanceInitDoneRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 instance_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InstanceInitDoneReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.InstanceInitDoneReply) */ {
 public:
  InstanceInitDoneReply();
  virtual ~InstanceInitDoneReply();

  InstanceInitDoneReply(const InstanceInitDoneReply& from);

  inline InstanceInitDoneReply& operator=(const InstanceInitDoneReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstanceInitDoneReply(InstanceInitDoneReply&& from) noexcept
    : InstanceInitDoneReply() {
    *this = ::std::move(from);
  }

  inline InstanceInitDoneReply& operator=(InstanceInitDoneReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceInitDoneReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstanceInitDoneReply* internal_default_instance() {
    return reinterpret_cast<const InstanceInitDoneReply*>(
               &_InstanceInitDoneReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(InstanceInitDoneReply* other);
  friend void swap(InstanceInitDoneReply& a, InstanceInitDoneReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstanceInitDoneReply* New() const final {
    return CreateMaybeMessage<InstanceInitDoneReply>(NULL);
  }

  InstanceInitDoneReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InstanceInitDoneReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InstanceInitDoneReply& from);
  void MergeFrom(const InstanceInitDoneReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstanceInitDoneReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.InstanceInitDoneReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BufferManagerInitDoneRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.BufferManagerInitDoneRequest) */ {
 public:
  BufferManagerInitDoneRequest();
  virtual ~BufferManagerInitDoneRequest();

  BufferManagerInitDoneRequest(const BufferManagerInitDoneRequest& from);

  inline BufferManagerInitDoneRequest& operator=(const BufferManagerInitDoneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BufferManagerInitDoneRequest(BufferManagerInitDoneRequest&& from) noexcept
    : BufferManagerInitDoneRequest() {
    *this = ::std::move(from);
  }

  inline BufferManagerInitDoneRequest& operator=(BufferManagerInitDoneRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BufferManagerInitDoneRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BufferManagerInitDoneRequest* internal_default_instance() {
    return reinterpret_cast<const BufferManagerInitDoneRequest*>(
               &_BufferManagerInitDoneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BufferManagerInitDoneRequest* other);
  friend void swap(BufferManagerInitDoneRequest& a, BufferManagerInitDoneRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BufferManagerInitDoneRequest* New() const final {
    return CreateMaybeMessage<BufferManagerInitDoneRequest>(NULL);
  }

  BufferManagerInitDoneRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BufferManagerInitDoneRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BufferManagerInitDoneRequest& from);
  void MergeFrom(const BufferManagerInitDoneRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BufferManagerInitDoneRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.BufferManagerInitDoneRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BufferManagerInitDonReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.BufferManagerInitDonReply) */ {
 public:
  BufferManagerInitDonReply();
  virtual ~BufferManagerInitDonReply();

  BufferManagerInitDonReply(const BufferManagerInitDonReply& from);

  inline BufferManagerInitDonReply& operator=(const BufferManagerInitDonReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BufferManagerInitDonReply(BufferManagerInitDonReply&& from) noexcept
    : BufferManagerInitDonReply() {
    *this = ::std::move(from);
  }

  inline BufferManagerInitDonReply& operator=(BufferManagerInitDonReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BufferManagerInitDonReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BufferManagerInitDonReply* internal_default_instance() {
    return reinterpret_cast<const BufferManagerInitDonReply*>(
               &_BufferManagerInitDonReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(BufferManagerInitDonReply* other);
  friend void swap(BufferManagerInitDonReply& a, BufferManagerInitDonReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BufferManagerInitDonReply* New() const final {
    return CreateMaybeMessage<BufferManagerInitDonReply>(NULL);
  }

  BufferManagerInitDonReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BufferManagerInitDonReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BufferManagerInitDonReply& from);
  void MergeFrom(const BufferManagerInitDonReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BufferManagerInitDonReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool init_done = 1;
  void clear_init_done();
  static const int kInitDoneFieldNumber = 1;
  bool init_done() const;
  void set_init_done(bool value);

  // @@protoc_insertion_point(class_scope:dbx1000.BufferManagerInitDonReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool init_done_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNextTsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.GetNextTsRequest) */ {
 public:
  GetNextTsRequest();
  virtual ~GetNextTsRequest();

  GetNextTsRequest(const GetNextTsRequest& from);

  inline GetNextTsRequest& operator=(const GetNextTsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNextTsRequest(GetNextTsRequest&& from) noexcept
    : GetNextTsRequest() {
    *this = ::std::move(from);
  }

  inline GetNextTsRequest& operator=(GetNextTsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNextTsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNextTsRequest* internal_default_instance() {
    return reinterpret_cast<const GetNextTsRequest*>(
               &_GetNextTsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetNextTsRequest* other);
  friend void swap(GetNextTsRequest& a, GetNextTsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNextTsRequest* New() const final {
    return CreateMaybeMessage<GetNextTsRequest>(NULL);
  }

  GetNextTsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNextTsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNextTsRequest& from);
  void MergeFrom(const GetNextTsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNextTsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.GetNextTsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNextTsReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.GetNextTsReply) */ {
 public:
  GetNextTsReply();
  virtual ~GetNextTsReply();

  GetNextTsReply(const GetNextTsReply& from);

  inline GetNextTsReply& operator=(const GetNextTsReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNextTsReply(GetNextTsReply&& from) noexcept
    : GetNextTsReply() {
    *this = ::std::move(from);
  }

  inline GetNextTsReply& operator=(GetNextTsReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNextTsReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNextTsReply* internal_default_instance() {
    return reinterpret_cast<const GetNextTsReply*>(
               &_GetNextTsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetNextTsReply* other);
  friend void swap(GetNextTsReply& a, GetNextTsReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNextTsReply* New() const final {
    return CreateMaybeMessage<GetNextTsReply>(NULL);
  }

  GetNextTsReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNextTsReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNextTsReply& from);
  void MergeFrom(const GetNextTsReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNextTsReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 ts = 1;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  ::google::protobuf::uint64 ts() const;
  void set_ts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dbx1000.GetNextTsReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 ts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTestNumRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.GetTestNumRequest) */ {
 public:
  GetTestNumRequest();
  virtual ~GetTestNumRequest();

  GetTestNumRequest(const GetTestNumRequest& from);

  inline GetTestNumRequest& operator=(const GetTestNumRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTestNumRequest(GetTestNumRequest&& from) noexcept
    : GetTestNumRequest() {
    *this = ::std::move(from);
  }

  inline GetTestNumRequest& operator=(GetTestNumRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTestNumRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTestNumRequest* internal_default_instance() {
    return reinterpret_cast<const GetTestNumRequest*>(
               &_GetTestNumRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetTestNumRequest* other);
  friend void swap(GetTestNumRequest& a, GetTestNumRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTestNumRequest* New() const final {
    return CreateMaybeMessage<GetTestNumRequest>(NULL);
  }

  GetTestNumRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTestNumRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTestNumRequest& from);
  void MergeFrom(const GetTestNumRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTestNumRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dbx1000.GetTestNumRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTestNumReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dbx1000.GetTestNumReply) */ {
 public:
  GetTestNumReply();
  virtual ~GetTestNumReply();

  GetTestNumReply(const GetTestNumReply& from);

  inline GetTestNumReply& operator=(const GetTestNumReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTestNumReply(GetTestNumReply&& from) noexcept
    : GetTestNumReply() {
    *this = ::std::move(from);
  }

  inline GetTestNumReply& operator=(GetTestNumReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTestNumReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTestNumReply* internal_default_instance() {
    return reinterpret_cast<const GetTestNumReply*>(
               &_GetTestNumReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GetTestNumReply* other);
  friend void swap(GetTestNumReply& a, GetTestNumReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTestNumReply* New() const final {
    return CreateMaybeMessage<GetTestNumReply>(NULL);
  }

  GetTestNumReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTestNumReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTestNumReply& from);
  void MergeFrom(const GetTestNumReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTestNumReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 num = 1;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dbx1000.GetTestNumReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dbx1000_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LockRemoteRequest

// int32 instance_id = 1;
inline void LockRemoteRequest::clear_instance_id() {
  instance_id_ = 0;
}
inline ::google::protobuf::int32 LockRemoteRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteRequest.instance_id)
  return instance_id_;
}
inline void LockRemoteRequest::set_instance_id(::google::protobuf::int32 value) {
  
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteRequest.instance_id)
}

// .dbx1000.RpcLockMode req_mode = 2;
inline void LockRemoteRequest::clear_req_mode() {
  req_mode_ = 0;
}
inline ::dbx1000::RpcLockMode LockRemoteRequest::req_mode() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteRequest.req_mode)
  return static_cast< ::dbx1000::RpcLockMode >(req_mode_);
}
inline void LockRemoteRequest::set_req_mode(::dbx1000::RpcLockMode value) {
  
  req_mode_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteRequest.req_mode)
}

// uint64 page_id = 3;
inline void LockRemoteRequest::clear_page_id() {
  page_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LockRemoteRequest::page_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteRequest.page_id)
  return page_id_;
}
inline void LockRemoteRequest::set_page_id(::google::protobuf::uint64 value) {
  
  page_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteRequest.page_id)
}

// uint64 page_version = 4;
inline void LockRemoteRequest::clear_page_version() {
  page_version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LockRemoteRequest::page_version() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteRequest.page_version)
  return page_version_;
}
inline void LockRemoteRequest::set_page_version(::google::protobuf::uint64 value) {
  
  page_version_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteRequest.page_version)
}

// uint64 key = 5;
inline void LockRemoteRequest::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LockRemoteRequest::key() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteRequest.key)
  return key_;
}
inline void LockRemoteRequest::set_key(::google::protobuf::uint64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteRequest.key)
}

// uint64 key_version = 6;
inline void LockRemoteRequest::clear_key_version() {
  key_version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LockRemoteRequest::key_version() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteRequest.key_version)
  return key_version_;
}
inline void LockRemoteRequest::set_key_version(::google::protobuf::uint64 value) {
  
  key_version_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteRequest.key_version)
}

// bytes page_buf = 7;
inline void LockRemoteRequest::clear_page_buf() {
  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockRemoteRequest::page_buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteRequest.page_buf)
  return page_buf_.GetNoArena();
}
inline void LockRemoteRequest::set_page_buf(const ::std::string& value) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteRequest.page_buf)
}
#if LANG_CXX11
inline void LockRemoteRequest::set_page_buf(::std::string&& value) {
  
  page_buf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.LockRemoteRequest.page_buf)
}
#endif
inline void LockRemoteRequest::set_page_buf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.LockRemoteRequest.page_buf)
}
inline void LockRemoteRequest::set_page_buf(const void* value, size_t size) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.LockRemoteRequest.page_buf)
}
inline ::std::string* LockRemoteRequest::mutable_page_buf() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.LockRemoteRequest.page_buf)
  return page_buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRemoteRequest::release_page_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.LockRemoteRequest.page_buf)
  
  return page_buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRemoteRequest::set_allocated_page_buf(::std::string* page_buf) {
  if (page_buf != NULL) {
    
  } else {
    
  }
  page_buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_buf);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.LockRemoteRequest.page_buf)
}

// uint64 count = 8;
inline void LockRemoteRequest::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LockRemoteRequest::count() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteRequest.count)
  return count_;
}
inline void LockRemoteRequest::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteRequest.count)
}

// -------------------------------------------------------------------

// LockRemoteReply

// bool rc = 1;
inline void LockRemoteReply::clear_rc() {
  rc_ = false;
}
inline bool LockRemoteReply::rc() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteReply.rc)
  return rc_;
}
inline void LockRemoteReply::set_rc(bool value) {
  
  rc_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteReply.rc)
}

// bytes page_buf = 2;
inline void LockRemoteReply::clear_page_buf() {
  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LockRemoteReply::page_buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteReply.page_buf)
  return page_buf_.GetNoArena();
}
inline void LockRemoteReply::set_page_buf(const ::std::string& value) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteReply.page_buf)
}
#if LANG_CXX11
inline void LockRemoteReply::set_page_buf(::std::string&& value) {
  
  page_buf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.LockRemoteReply.page_buf)
}
#endif
inline void LockRemoteReply::set_page_buf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.LockRemoteReply.page_buf)
}
inline void LockRemoteReply::set_page_buf(const void* value, size_t size) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.LockRemoteReply.page_buf)
}
inline ::std::string* LockRemoteReply::mutable_page_buf() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.LockRemoteReply.page_buf)
  return page_buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRemoteReply::release_page_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.LockRemoteReply.page_buf)
  
  return page_buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRemoteReply::set_allocated_page_buf(::std::string* page_buf) {
  if (page_buf != NULL) {
    
  } else {
    
  }
  page_buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_buf);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.LockRemoteReply.page_buf)
}

// uint64 count = 3;
inline void LockRemoteReply::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LockRemoteReply::count() const {
  // @@protoc_insertion_point(field_get:dbx1000.LockRemoteReply.count)
  return count_;
}
inline void LockRemoteReply::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.LockRemoteReply.count)
}

// -------------------------------------------------------------------

// UnLockRemoteRequest

// int32 instance_id = 1;
inline void UnLockRemoteRequest::clear_instance_id() {
  instance_id_ = 0;
}
inline ::google::protobuf::int32 UnLockRemoteRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.UnLockRemoteRequest.instance_id)
  return instance_id_;
}
inline void UnLockRemoteRequest::set_instance_id(::google::protobuf::int32 value) {
  
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.UnLockRemoteRequest.instance_id)
}

// .dbx1000.RpcLockMode req_mode = 2;
inline void UnLockRemoteRequest::clear_req_mode() {
  req_mode_ = 0;
}
inline ::dbx1000::RpcLockMode UnLockRemoteRequest::req_mode() const {
  // @@protoc_insertion_point(field_get:dbx1000.UnLockRemoteRequest.req_mode)
  return static_cast< ::dbx1000::RpcLockMode >(req_mode_);
}
inline void UnLockRemoteRequest::set_req_mode(::dbx1000::RpcLockMode value) {
  
  req_mode_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.UnLockRemoteRequest.req_mode)
}

// uint64 page_id = 3;
inline void UnLockRemoteRequest::clear_page_id() {
  page_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UnLockRemoteRequest::page_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.UnLockRemoteRequest.page_id)
  return page_id_;
}
inline void UnLockRemoteRequest::set_page_id(::google::protobuf::uint64 value) {
  
  page_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.UnLockRemoteRequest.page_id)
}

// uint64 page_version = 4;
inline void UnLockRemoteRequest::clear_page_version() {
  page_version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UnLockRemoteRequest::page_version() const {
  // @@protoc_insertion_point(field_get:dbx1000.UnLockRemoteRequest.page_version)
  return page_version_;
}
inline void UnLockRemoteRequest::set_page_version(::google::protobuf::uint64 value) {
  
  page_version_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.UnLockRemoteRequest.page_version)
}

// uint64 key = 5;
inline void UnLockRemoteRequest::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UnLockRemoteRequest::key() const {
  // @@protoc_insertion_point(field_get:dbx1000.UnLockRemoteRequest.key)
  return key_;
}
inline void UnLockRemoteRequest::set_key(::google::protobuf::uint64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.UnLockRemoteRequest.key)
}

// uint64 key_version = 6;
inline void UnLockRemoteRequest::clear_key_version() {
  key_version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UnLockRemoteRequest::key_version() const {
  // @@protoc_insertion_point(field_get:dbx1000.UnLockRemoteRequest.key_version)
  return key_version_;
}
inline void UnLockRemoteRequest::set_key_version(::google::protobuf::uint64 value) {
  
  key_version_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.UnLockRemoteRequest.key_version)
}

// bytes page_buf = 7;
inline void UnLockRemoteRequest::clear_page_buf() {
  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnLockRemoteRequest::page_buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.UnLockRemoteRequest.page_buf)
  return page_buf_.GetNoArena();
}
inline void UnLockRemoteRequest::set_page_buf(const ::std::string& value) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.UnLockRemoteRequest.page_buf)
}
#if LANG_CXX11
inline void UnLockRemoteRequest::set_page_buf(::std::string&& value) {
  
  page_buf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.UnLockRemoteRequest.page_buf)
}
#endif
inline void UnLockRemoteRequest::set_page_buf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.UnLockRemoteRequest.page_buf)
}
inline void UnLockRemoteRequest::set_page_buf(const void* value, size_t size) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.UnLockRemoteRequest.page_buf)
}
inline ::std::string* UnLockRemoteRequest::mutable_page_buf() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.UnLockRemoteRequest.page_buf)
  return page_buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnLockRemoteRequest::release_page_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.UnLockRemoteRequest.page_buf)
  
  return page_buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnLockRemoteRequest::set_allocated_page_buf(::std::string* page_buf) {
  if (page_buf != NULL) {
    
  } else {
    
  }
  page_buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_buf);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.UnLockRemoteRequest.page_buf)
}

// uint64 count = 8;
inline void UnLockRemoteRequest::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UnLockRemoteRequest::count() const {
  // @@protoc_insertion_point(field_get:dbx1000.UnLockRemoteRequest.count)
  return count_;
}
inline void UnLockRemoteRequest::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.UnLockRemoteRequest.count)
}

// -------------------------------------------------------------------

// UnLockRemoteReply

// bool rc = 1;
inline void UnLockRemoteReply::clear_rc() {
  rc_ = false;
}
inline bool UnLockRemoteReply::rc() const {
  // @@protoc_insertion_point(field_get:dbx1000.UnLockRemoteReply.rc)
  return rc_;
}
inline void UnLockRemoteReply::set_rc(bool value) {
  
  rc_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.UnLockRemoteReply.rc)
}

// bytes page_buf = 2;
inline void UnLockRemoteReply::clear_page_buf() {
  page_buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnLockRemoteReply::page_buf() const {
  // @@protoc_insertion_point(field_get:dbx1000.UnLockRemoteReply.page_buf)
  return page_buf_.GetNoArena();
}
inline void UnLockRemoteReply::set_page_buf(const ::std::string& value) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dbx1000.UnLockRemoteReply.page_buf)
}
#if LANG_CXX11
inline void UnLockRemoteReply::set_page_buf(::std::string&& value) {
  
  page_buf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbx1000.UnLockRemoteReply.page_buf)
}
#endif
inline void UnLockRemoteReply::set_page_buf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbx1000.UnLockRemoteReply.page_buf)
}
inline void UnLockRemoteReply::set_page_buf(const void* value, size_t size) {
  
  page_buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbx1000.UnLockRemoteReply.page_buf)
}
inline ::std::string* UnLockRemoteReply::mutable_page_buf() {
  
  // @@protoc_insertion_point(field_mutable:dbx1000.UnLockRemoteReply.page_buf)
  return page_buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnLockRemoteReply::release_page_buf() {
  // @@protoc_insertion_point(field_release:dbx1000.UnLockRemoteReply.page_buf)
  
  return page_buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnLockRemoteReply::set_allocated_page_buf(::std::string* page_buf) {
  if (page_buf != NULL) {
    
  } else {
    
  }
  page_buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_buf);
  // @@protoc_insertion_point(field_set_allocated:dbx1000.UnLockRemoteReply.page_buf)
}

// uint64 count = 3;
inline void UnLockRemoteReply::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UnLockRemoteReply::count() const {
  // @@protoc_insertion_point(field_get:dbx1000.UnLockRemoteReply.count)
  return count_;
}
inline void UnLockRemoteReply::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.UnLockRemoteReply.count)
}

// -------------------------------------------------------------------

// InstanceInitDoneRequest

// int32 instance_id = 1;
inline void InstanceInitDoneRequest::clear_instance_id() {
  instance_id_ = 0;
}
inline ::google::protobuf::int32 InstanceInitDoneRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:dbx1000.InstanceInitDoneRequest.instance_id)
  return instance_id_;
}
inline void InstanceInitDoneRequest::set_instance_id(::google::protobuf::int32 value) {
  
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.InstanceInitDoneRequest.instance_id)
}

// -------------------------------------------------------------------

// InstanceInitDoneReply

// -------------------------------------------------------------------

// BufferManagerInitDoneRequest

// -------------------------------------------------------------------

// BufferManagerInitDonReply

// bool init_done = 1;
inline void BufferManagerInitDonReply::clear_init_done() {
  init_done_ = false;
}
inline bool BufferManagerInitDonReply::init_done() const {
  // @@protoc_insertion_point(field_get:dbx1000.BufferManagerInitDonReply.init_done)
  return init_done_;
}
inline void BufferManagerInitDonReply::set_init_done(bool value) {
  
  init_done_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.BufferManagerInitDonReply.init_done)
}

// -------------------------------------------------------------------

// GetNextTsRequest

// -------------------------------------------------------------------

// GetNextTsReply

// uint64 ts = 1;
inline void GetNextTsReply::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetNextTsReply::ts() const {
  // @@protoc_insertion_point(field_get:dbx1000.GetNextTsReply.ts)
  return ts_;
}
inline void GetNextTsReply::set_ts(::google::protobuf::uint64 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.GetNextTsReply.ts)
}

// -------------------------------------------------------------------

// GetTestNumRequest

// -------------------------------------------------------------------

// GetTestNumReply

// int32 num = 1;
inline void GetTestNumReply::clear_num() {
  num_ = 0;
}
inline ::google::protobuf::int32 GetTestNumReply::num() const {
  // @@protoc_insertion_point(field_get:dbx1000.GetTestNumReply.num)
  return num_;
}
inline void GetTestNumReply::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:dbx1000.GetTestNumReply.num)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbx1000

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dbx1000::RpcLockMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dbx1000::RpcLockMode>() {
  return ::dbx1000::RpcLockMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_dbx1000_5fservice_2eproto
