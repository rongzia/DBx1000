// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dbx1000_service.proto
#ifndef GRPC_dbx1000_5fservice_2eproto__INCLUDED
#define GRPC_dbx1000_5fservice_2eproto__INCLUDED

#include "dbx1000_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace dbx1000 {

class DBx1000Service final {
 public:
  static constexpr char const* service_full_name() {
    return "dbx1000.DBx1000Service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // for instance
    virtual ::grpc::Status LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::dbx1000::LockRemoteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::LockRemoteReply>> AsyncLockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::LockRemoteReply>>(AsyncLockRemoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::LockRemoteReply>> PrepareAsyncLockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::LockRemoteReply>>(PrepareAsyncLockRemoteRaw(context, request, cq));
    }
    virtual ::grpc::Status InstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest& request, ::dbx1000::InstanceInitDoneReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InstanceInitDoneReply>> AsyncInstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InstanceInitDoneReply>>(AsyncInstanceInitDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InstanceInitDoneReply>> PrepareAsyncInstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InstanceInitDoneReply>>(PrepareAsyncInstanceInitDoneRaw(context, request, cq));
    }
    virtual ::grpc::Status LockServiceInitDone(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest& request, ::dbx1000::LockServiceInitDoneReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::LockServiceInitDoneReply>> AsyncLockServiceInitDone(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::LockServiceInitDoneReply>>(AsyncLockServiceInitDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::LockServiceInitDoneReply>> PrepareAsyncLockServiceInitDone(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::LockServiceInitDoneReply>>(PrepareAsyncLockServiceInitDoneRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::dbx1000::GetNextTsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetNextTsReply>> AsyncGetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetNextTsReply>>(AsyncGetNextTsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetNextTsReply>> PrepareAsyncGetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetNextTsReply>>(PrepareAsyncGetNextTsRaw(context, request, cq));
    }
    // for lock_server
    virtual ::grpc::Status Invalid(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest& request, ::dbx1000::InvalidReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InvalidReply>> AsyncInvalid(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InvalidReply>>(AsyncInvalidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InvalidReply>> PrepareAsyncInvalid(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InvalidReply>>(PrepareAsyncInvalidRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest& request, ::dbx1000::GetTestNumReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetTestNumReply>> AsyncGetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetTestNumReply>>(AsyncGetTestNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetTestNumReply>> PrepareAsyncGetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetTestNumReply>>(PrepareAsyncGetTestNumRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // for instance
      virtual void LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LockRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockRemoteReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LockRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockRemoteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LockRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockRemoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void InstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest* request, ::dbx1000::InstanceInitDoneReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InstanceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InstanceInitDoneReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest* request, ::dbx1000::InstanceInitDoneReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest* request, ::dbx1000::InstanceInitDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void InstanceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InstanceInitDoneReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void InstanceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InstanceInitDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void LockServiceInitDone(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest* request, ::dbx1000::LockServiceInitDoneReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LockServiceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockServiceInitDoneReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LockServiceInitDone(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest* request, ::dbx1000::LockServiceInitDoneReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LockServiceInitDone(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest* request, ::dbx1000::LockServiceInitDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LockServiceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockServiceInitDoneReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LockServiceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockServiceInitDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // for lock_server
      virtual void Invalid(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest* request, ::dbx1000::InvalidReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Invalid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InvalidReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Invalid(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest* request, ::dbx1000::InvalidReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Invalid(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest* request, ::dbx1000::InvalidReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Invalid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InvalidReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Invalid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InvalidReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest* request, ::dbx1000::GetTestNumReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTestNum(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetTestNumReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest* request, ::dbx1000::GetTestNumReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest* request, ::dbx1000::GetTestNumReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTestNum(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetTestNumReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTestNum(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetTestNumReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::LockRemoteReply>* AsyncLockRemoteRaw(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::LockRemoteReply>* PrepareAsyncLockRemoteRaw(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InstanceInitDoneReply>* AsyncInstanceInitDoneRaw(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InstanceInitDoneReply>* PrepareAsyncInstanceInitDoneRaw(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::LockServiceInitDoneReply>* AsyncLockServiceInitDoneRaw(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::LockServiceInitDoneReply>* PrepareAsyncLockServiceInitDoneRaw(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetNextTsReply>* AsyncGetNextTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetNextTsReply>* PrepareAsyncGetNextTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InvalidReply>* AsyncInvalidRaw(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::InvalidReply>* PrepareAsyncInvalidRaw(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetTestNumReply>* AsyncGetTestNumRaw(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dbx1000::GetTestNumReply>* PrepareAsyncGetTestNumRaw(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::dbx1000::LockRemoteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::LockRemoteReply>> AsyncLockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::LockRemoteReply>>(AsyncLockRemoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::LockRemoteReply>> PrepareAsyncLockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::LockRemoteReply>>(PrepareAsyncLockRemoteRaw(context, request, cq));
    }
    ::grpc::Status InstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest& request, ::dbx1000::InstanceInitDoneReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::InstanceInitDoneReply>> AsyncInstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::InstanceInitDoneReply>>(AsyncInstanceInitDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::InstanceInitDoneReply>> PrepareAsyncInstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::InstanceInitDoneReply>>(PrepareAsyncInstanceInitDoneRaw(context, request, cq));
    }
    ::grpc::Status LockServiceInitDone(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest& request, ::dbx1000::LockServiceInitDoneReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::LockServiceInitDoneReply>> AsyncLockServiceInitDone(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::LockServiceInitDoneReply>>(AsyncLockServiceInitDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::LockServiceInitDoneReply>> PrepareAsyncLockServiceInitDone(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::LockServiceInitDoneReply>>(PrepareAsyncLockServiceInitDoneRaw(context, request, cq));
    }
    ::grpc::Status GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::dbx1000::GetNextTsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>> AsyncGetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>>(AsyncGetNextTsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>> PrepareAsyncGetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>>(PrepareAsyncGetNextTsRaw(context, request, cq));
    }
    ::grpc::Status Invalid(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest& request, ::dbx1000::InvalidReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::InvalidReply>> AsyncInvalid(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::InvalidReply>>(AsyncInvalidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::InvalidReply>> PrepareAsyncInvalid(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::InvalidReply>>(PrepareAsyncInvalidRaw(context, request, cq));
    }
    ::grpc::Status GetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest& request, ::dbx1000::GetTestNumReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetTestNumReply>> AsyncGetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetTestNumReply>>(AsyncGetTestNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetTestNumReply>> PrepareAsyncGetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dbx1000::GetTestNumReply>>(PrepareAsyncGetTestNumRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response, std::function<void(::grpc::Status)>) override;
      void LockRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockRemoteReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LockRemote(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LockRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockRemoteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LockRemote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockRemoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void InstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest* request, ::dbx1000::InstanceInitDoneReply* response, std::function<void(::grpc::Status)>) override;
      void InstanceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InstanceInitDoneReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest* request, ::dbx1000::InstanceInitDoneReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InstanceInitDone(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest* request, ::dbx1000::InstanceInitDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void InstanceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InstanceInitDoneReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void InstanceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InstanceInitDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void LockServiceInitDone(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest* request, ::dbx1000::LockServiceInitDoneReply* response, std::function<void(::grpc::Status)>) override;
      void LockServiceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockServiceInitDoneReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LockServiceInitDone(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest* request, ::dbx1000::LockServiceInitDoneReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LockServiceInitDone(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest* request, ::dbx1000::LockServiceInitDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LockServiceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockServiceInitDoneReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LockServiceInitDone(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::LockServiceInitDoneReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, std::function<void(::grpc::Status)>) override;
      void GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetNextTs(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetNextTs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetNextTsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Invalid(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest* request, ::dbx1000::InvalidReply* response, std::function<void(::grpc::Status)>) override;
      void Invalid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InvalidReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Invalid(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest* request, ::dbx1000::InvalidReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Invalid(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest* request, ::dbx1000::InvalidReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Invalid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InvalidReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Invalid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::InvalidReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest* request, ::dbx1000::GetTestNumReply* response, std::function<void(::grpc::Status)>) override;
      void GetTestNum(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetTestNumReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest* request, ::dbx1000::GetTestNumReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTestNum(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest* request, ::dbx1000::GetTestNumReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTestNum(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetTestNumReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTestNum(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbx1000::GetTestNumReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dbx1000::LockRemoteReply>* AsyncLockRemoteRaw(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::LockRemoteReply>* PrepareAsyncLockRemoteRaw(::grpc::ClientContext* context, const ::dbx1000::LockRemoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::InstanceInitDoneReply>* AsyncInstanceInitDoneRaw(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::InstanceInitDoneReply>* PrepareAsyncInstanceInitDoneRaw(::grpc::ClientContext* context, const ::dbx1000::InstanceInitDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::LockServiceInitDoneReply>* AsyncLockServiceInitDoneRaw(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::LockServiceInitDoneReply>* PrepareAsyncLockServiceInitDoneRaw(::grpc::ClientContext* context, const ::dbx1000::LockServiceInitDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>* AsyncGetNextTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::GetNextTsReply>* PrepareAsyncGetNextTsRaw(::grpc::ClientContext* context, const ::dbx1000::GetNextTsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::InvalidReply>* AsyncInvalidRaw(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::InvalidReply>* PrepareAsyncInvalidRaw(::grpc::ClientContext* context, const ::dbx1000::InvalidRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::GetTestNumReply>* AsyncGetTestNumRaw(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dbx1000::GetTestNumReply>* PrepareAsyncGetTestNumRaw(::grpc::ClientContext* context, const ::dbx1000::GetTestNumRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_LockRemote_;
    const ::grpc::internal::RpcMethod rpcmethod_InstanceInitDone_;
    const ::grpc::internal::RpcMethod rpcmethod_LockServiceInitDone_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNextTs_;
    const ::grpc::internal::RpcMethod rpcmethod_Invalid_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTestNum_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // for instance
    virtual ::grpc::Status LockRemote(::grpc::ServerContext* context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response);
    virtual ::grpc::Status InstanceInitDone(::grpc::ServerContext* context, const ::dbx1000::InstanceInitDoneRequest* request, ::dbx1000::InstanceInitDoneReply* response);
    virtual ::grpc::Status LockServiceInitDone(::grpc::ServerContext* context, const ::dbx1000::LockServiceInitDoneRequest* request, ::dbx1000::LockServiceInitDoneReply* response);
    virtual ::grpc::Status GetNextTs(::grpc::ServerContext* context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response);
    // for lock_server
    virtual ::grpc::Status Invalid(::grpc::ServerContext* context, const ::dbx1000::InvalidRequest* request, ::dbx1000::InvalidReply* response);
    virtual ::grpc::Status GetTestNum(::grpc::ServerContext* context, const ::dbx1000::GetTestNumRequest* request, ::dbx1000::GetTestNumReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_LockRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LockRemote() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_LockRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockRemote(::grpc::ServerContext* /*context*/, const ::dbx1000::LockRemoteRequest* /*request*/, ::dbx1000::LockRemoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLockRemote(::grpc::ServerContext* context, ::dbx1000::LockRemoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::LockRemoteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InstanceInitDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InstanceInitDone() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_InstanceInitDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstanceInitDone(::grpc::ServerContext* /*context*/, const ::dbx1000::InstanceInitDoneRequest* /*request*/, ::dbx1000::InstanceInitDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstanceInitDone(::grpc::ServerContext* context, ::dbx1000::InstanceInitDoneRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::InstanceInitDoneReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LockServiceInitDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LockServiceInitDone() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_LockServiceInitDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockServiceInitDone(::grpc::ServerContext* /*context*/, const ::dbx1000::LockServiceInitDoneRequest* /*request*/, ::dbx1000::LockServiceInitDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLockServiceInitDone(::grpc::ServerContext* context, ::dbx1000::LockServiceInitDoneRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::LockServiceInitDoneReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNextTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNextTs() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetNextTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextTs(::grpc::ServerContext* /*context*/, const ::dbx1000::GetNextTsRequest* /*request*/, ::dbx1000::GetNextTsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNextTs(::grpc::ServerContext* context, ::dbx1000::GetNextTsRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::GetNextTsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Invalid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Invalid() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Invalid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Invalid(::grpc::ServerContext* /*context*/, const ::dbx1000::InvalidRequest* /*request*/, ::dbx1000::InvalidReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvalid(::grpc::ServerContext* context, ::dbx1000::InvalidRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::InvalidReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTestNum() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetTestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTestNum(::grpc::ServerContext* /*context*/, const ::dbx1000::GetTestNumRequest* /*request*/, ::dbx1000::GetTestNumReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTestNum(::grpc::ServerContext* context, ::dbx1000::GetTestNumRequest* request, ::grpc::ServerAsyncResponseWriter< ::dbx1000::GetTestNumReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_LockRemote<WithAsyncMethod_InstanceInitDone<WithAsyncMethod_LockServiceInitDone<WithAsyncMethod_GetNextTs<WithAsyncMethod_Invalid<WithAsyncMethod_GetTestNum<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LockRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LockRemote() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::LockRemoteRequest, ::dbx1000::LockRemoteReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dbx1000::LockRemoteRequest* request, ::dbx1000::LockRemoteReply* response) { return this->LockRemote(context, request, response); }));}
    void SetMessageAllocatorFor_LockRemote(
        ::grpc::experimental::MessageAllocator< ::dbx1000::LockRemoteRequest, ::dbx1000::LockRemoteReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::LockRemoteRequest, ::dbx1000::LockRemoteReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LockRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockRemote(::grpc::ServerContext* /*context*/, const ::dbx1000::LockRemoteRequest* /*request*/, ::dbx1000::LockRemoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LockRemote(
      ::grpc::CallbackServerContext* /*context*/, const ::dbx1000::LockRemoteRequest* /*request*/, ::dbx1000::LockRemoteReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LockRemote(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dbx1000::LockRemoteRequest* /*request*/, ::dbx1000::LockRemoteReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InstanceInitDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_InstanceInitDone() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::InstanceInitDoneRequest, ::dbx1000::InstanceInitDoneReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dbx1000::InstanceInitDoneRequest* request, ::dbx1000::InstanceInitDoneReply* response) { return this->InstanceInitDone(context, request, response); }));}
    void SetMessageAllocatorFor_InstanceInitDone(
        ::grpc::experimental::MessageAllocator< ::dbx1000::InstanceInitDoneRequest, ::dbx1000::InstanceInitDoneReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::InstanceInitDoneRequest, ::dbx1000::InstanceInitDoneReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_InstanceInitDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstanceInitDone(::grpc::ServerContext* /*context*/, const ::dbx1000::InstanceInitDoneRequest* /*request*/, ::dbx1000::InstanceInitDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InstanceInitDone(
      ::grpc::CallbackServerContext* /*context*/, const ::dbx1000::InstanceInitDoneRequest* /*request*/, ::dbx1000::InstanceInitDoneReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InstanceInitDone(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dbx1000::InstanceInitDoneRequest* /*request*/, ::dbx1000::InstanceInitDoneReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LockServiceInitDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LockServiceInitDone() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::LockServiceInitDoneRequest, ::dbx1000::LockServiceInitDoneReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dbx1000::LockServiceInitDoneRequest* request, ::dbx1000::LockServiceInitDoneReply* response) { return this->LockServiceInitDone(context, request, response); }));}
    void SetMessageAllocatorFor_LockServiceInitDone(
        ::grpc::experimental::MessageAllocator< ::dbx1000::LockServiceInitDoneRequest, ::dbx1000::LockServiceInitDoneReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::LockServiceInitDoneRequest, ::dbx1000::LockServiceInitDoneReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LockServiceInitDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockServiceInitDone(::grpc::ServerContext* /*context*/, const ::dbx1000::LockServiceInitDoneRequest* /*request*/, ::dbx1000::LockServiceInitDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LockServiceInitDone(
      ::grpc::CallbackServerContext* /*context*/, const ::dbx1000::LockServiceInitDoneRequest* /*request*/, ::dbx1000::LockServiceInitDoneReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LockServiceInitDone(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dbx1000::LockServiceInitDoneRequest* /*request*/, ::dbx1000::LockServiceInitDoneReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNextTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNextTs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::GetNextTsRequest, ::dbx1000::GetNextTsReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dbx1000::GetNextTsRequest* request, ::dbx1000::GetNextTsReply* response) { return this->GetNextTs(context, request, response); }));}
    void SetMessageAllocatorFor_GetNextTs(
        ::grpc::experimental::MessageAllocator< ::dbx1000::GetNextTsRequest, ::dbx1000::GetNextTsReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::GetNextTsRequest, ::dbx1000::GetNextTsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNextTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextTs(::grpc::ServerContext* /*context*/, const ::dbx1000::GetNextTsRequest* /*request*/, ::dbx1000::GetNextTsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNextTs(
      ::grpc::CallbackServerContext* /*context*/, const ::dbx1000::GetNextTsRequest* /*request*/, ::dbx1000::GetNextTsReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNextTs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dbx1000::GetNextTsRequest* /*request*/, ::dbx1000::GetNextTsReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Invalid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Invalid() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::InvalidRequest, ::dbx1000::InvalidReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dbx1000::InvalidRequest* request, ::dbx1000::InvalidReply* response) { return this->Invalid(context, request, response); }));}
    void SetMessageAllocatorFor_Invalid(
        ::grpc::experimental::MessageAllocator< ::dbx1000::InvalidRequest, ::dbx1000::InvalidReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::InvalidRequest, ::dbx1000::InvalidReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Invalid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Invalid(::grpc::ServerContext* /*context*/, const ::dbx1000::InvalidRequest* /*request*/, ::dbx1000::InvalidReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Invalid(
      ::grpc::CallbackServerContext* /*context*/, const ::dbx1000::InvalidRequest* /*request*/, ::dbx1000::InvalidReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Invalid(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dbx1000::InvalidRequest* /*request*/, ::dbx1000::InvalidReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTestNum() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::GetTestNumRequest, ::dbx1000::GetTestNumReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::dbx1000::GetTestNumRequest* request, ::dbx1000::GetTestNumReply* response) { return this->GetTestNum(context, request, response); }));}
    void SetMessageAllocatorFor_GetTestNum(
        ::grpc::experimental::MessageAllocator< ::dbx1000::GetTestNumRequest, ::dbx1000::GetTestNumReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::dbx1000::GetTestNumRequest, ::dbx1000::GetTestNumReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTestNum(::grpc::ServerContext* /*context*/, const ::dbx1000::GetTestNumRequest* /*request*/, ::dbx1000::GetTestNumReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTestNum(
      ::grpc::CallbackServerContext* /*context*/, const ::dbx1000::GetTestNumRequest* /*request*/, ::dbx1000::GetTestNumReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTestNum(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::dbx1000::GetTestNumRequest* /*request*/, ::dbx1000::GetTestNumReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_LockRemote<ExperimentalWithCallbackMethod_InstanceInitDone<ExperimentalWithCallbackMethod_LockServiceInitDone<ExperimentalWithCallbackMethod_GetNextTs<ExperimentalWithCallbackMethod_Invalid<ExperimentalWithCallbackMethod_GetTestNum<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_LockRemote<ExperimentalWithCallbackMethod_InstanceInitDone<ExperimentalWithCallbackMethod_LockServiceInitDone<ExperimentalWithCallbackMethod_GetNextTs<ExperimentalWithCallbackMethod_Invalid<ExperimentalWithCallbackMethod_GetTestNum<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_LockRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LockRemote() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_LockRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockRemote(::grpc::ServerContext* /*context*/, const ::dbx1000::LockRemoteRequest* /*request*/, ::dbx1000::LockRemoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InstanceInitDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InstanceInitDone() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_InstanceInitDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstanceInitDone(::grpc::ServerContext* /*context*/, const ::dbx1000::InstanceInitDoneRequest* /*request*/, ::dbx1000::InstanceInitDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LockServiceInitDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LockServiceInitDone() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_LockServiceInitDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockServiceInitDone(::grpc::ServerContext* /*context*/, const ::dbx1000::LockServiceInitDoneRequest* /*request*/, ::dbx1000::LockServiceInitDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNextTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNextTs() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetNextTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextTs(::grpc::ServerContext* /*context*/, const ::dbx1000::GetNextTsRequest* /*request*/, ::dbx1000::GetNextTsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Invalid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Invalid() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Invalid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Invalid(::grpc::ServerContext* /*context*/, const ::dbx1000::InvalidRequest* /*request*/, ::dbx1000::InvalidReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTestNum() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetTestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTestNum(::grpc::ServerContext* /*context*/, const ::dbx1000::GetTestNumRequest* /*request*/, ::dbx1000::GetTestNumReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_LockRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LockRemote() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_LockRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockRemote(::grpc::ServerContext* /*context*/, const ::dbx1000::LockRemoteRequest* /*request*/, ::dbx1000::LockRemoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLockRemote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InstanceInitDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InstanceInitDone() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_InstanceInitDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstanceInitDone(::grpc::ServerContext* /*context*/, const ::dbx1000::InstanceInitDoneRequest* /*request*/, ::dbx1000::InstanceInitDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstanceInitDone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LockServiceInitDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LockServiceInitDone() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_LockServiceInitDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockServiceInitDone(::grpc::ServerContext* /*context*/, const ::dbx1000::LockServiceInitDoneRequest* /*request*/, ::dbx1000::LockServiceInitDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLockServiceInitDone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNextTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNextTs() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetNextTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextTs(::grpc::ServerContext* /*context*/, const ::dbx1000::GetNextTsRequest* /*request*/, ::dbx1000::GetNextTsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNextTs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Invalid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Invalid() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Invalid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Invalid(::grpc::ServerContext* /*context*/, const ::dbx1000::InvalidRequest* /*request*/, ::dbx1000::InvalidReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvalid(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTestNum() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetTestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTestNum(::grpc::ServerContext* /*context*/, const ::dbx1000::GetTestNumRequest* /*request*/, ::dbx1000::GetTestNumReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTestNum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LockRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LockRemote() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LockRemote(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_LockRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockRemote(::grpc::ServerContext* /*context*/, const ::dbx1000::LockRemoteRequest* /*request*/, ::dbx1000::LockRemoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LockRemote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LockRemote(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InstanceInitDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_InstanceInitDone() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InstanceInitDone(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_InstanceInitDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstanceInitDone(::grpc::ServerContext* /*context*/, const ::dbx1000::InstanceInitDoneRequest* /*request*/, ::dbx1000::InstanceInitDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* InstanceInitDone(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* InstanceInitDone(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LockServiceInitDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LockServiceInitDone() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LockServiceInitDone(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_LockServiceInitDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LockServiceInitDone(::grpc::ServerContext* /*context*/, const ::dbx1000::LockServiceInitDoneRequest* /*request*/, ::dbx1000::LockServiceInitDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LockServiceInitDone(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LockServiceInitDone(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNextTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNextTs() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNextTs(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNextTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNextTs(::grpc::ServerContext* /*context*/, const ::dbx1000::GetNextTsRequest* /*request*/, ::dbx1000::GetNextTsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNextTs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNextTs(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Invalid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Invalid() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Invalid(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Invalid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Invalid(::grpc::ServerContext* /*context*/, const ::dbx1000::InvalidRequest* /*request*/, ::dbx1000::InvalidReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Invalid(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Invalid(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTestNum() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTestNum(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTestNum(::grpc::ServerContext* /*context*/, const ::dbx1000::GetTestNumRequest* /*request*/, ::dbx1000::GetTestNumReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTestNum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTestNum(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LockRemote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LockRemote() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbx1000::LockRemoteRequest, ::dbx1000::LockRemoteReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::dbx1000::LockRemoteRequest, ::dbx1000::LockRemoteReply>* streamer) {
                       return this->StreamedLockRemote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LockRemote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LockRemote(::grpc::ServerContext* /*context*/, const ::dbx1000::LockRemoteRequest* /*request*/, ::dbx1000::LockRemoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLockRemote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::LockRemoteRequest,::dbx1000::LockRemoteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InstanceInitDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InstanceInitDone() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbx1000::InstanceInitDoneRequest, ::dbx1000::InstanceInitDoneReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::dbx1000::InstanceInitDoneRequest, ::dbx1000::InstanceInitDoneReply>* streamer) {
                       return this->StreamedInstanceInitDone(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InstanceInitDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InstanceInitDone(::grpc::ServerContext* /*context*/, const ::dbx1000::InstanceInitDoneRequest* /*request*/, ::dbx1000::InstanceInitDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInstanceInitDone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::InstanceInitDoneRequest,::dbx1000::InstanceInitDoneReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LockServiceInitDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LockServiceInitDone() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbx1000::LockServiceInitDoneRequest, ::dbx1000::LockServiceInitDoneReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::dbx1000::LockServiceInitDoneRequest, ::dbx1000::LockServiceInitDoneReply>* streamer) {
                       return this->StreamedLockServiceInitDone(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LockServiceInitDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LockServiceInitDone(::grpc::ServerContext* /*context*/, const ::dbx1000::LockServiceInitDoneRequest* /*request*/, ::dbx1000::LockServiceInitDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLockServiceInitDone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::LockServiceInitDoneRequest,::dbx1000::LockServiceInitDoneReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNextTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNextTs() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbx1000::GetNextTsRequest, ::dbx1000::GetNextTsReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::dbx1000::GetNextTsRequest, ::dbx1000::GetNextTsReply>* streamer) {
                       return this->StreamedGetNextTs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNextTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNextTs(::grpc::ServerContext* /*context*/, const ::dbx1000::GetNextTsRequest* /*request*/, ::dbx1000::GetNextTsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNextTs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::GetNextTsRequest,::dbx1000::GetNextTsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Invalid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Invalid() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbx1000::InvalidRequest, ::dbx1000::InvalidReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::dbx1000::InvalidRequest, ::dbx1000::InvalidReply>* streamer) {
                       return this->StreamedInvalid(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Invalid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Invalid(::grpc::ServerContext* /*context*/, const ::dbx1000::InvalidRequest* /*request*/, ::dbx1000::InvalidReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInvalid(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::InvalidRequest,::dbx1000::InvalidReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTestNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTestNum() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::dbx1000::GetTestNumRequest, ::dbx1000::GetTestNumReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::dbx1000::GetTestNumRequest, ::dbx1000::GetTestNumReply>* streamer) {
                       return this->StreamedGetTestNum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTestNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTestNum(::grpc::ServerContext* /*context*/, const ::dbx1000::GetTestNumRequest* /*request*/, ::dbx1000::GetTestNumReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTestNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dbx1000::GetTestNumRequest,::dbx1000::GetTestNumReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_LockRemote<WithStreamedUnaryMethod_InstanceInitDone<WithStreamedUnaryMethod_LockServiceInitDone<WithStreamedUnaryMethod_GetNextTs<WithStreamedUnaryMethod_Invalid<WithStreamedUnaryMethod_GetTestNum<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_LockRemote<WithStreamedUnaryMethod_InstanceInitDone<WithStreamedUnaryMethod_LockServiceInitDone<WithStreamedUnaryMethod_GetNextTs<WithStreamedUnaryMethod_Invalid<WithStreamedUnaryMethod_GetTestNum<Service > > > > > > StreamedService;
};

}  // namespace dbx1000


#endif  // GRPC_dbx1000_5fservice_2eproto__INCLUDED
